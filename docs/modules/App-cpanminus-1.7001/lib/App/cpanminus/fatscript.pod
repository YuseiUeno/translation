=encoding utf8

=head1 NAME

=begin original

cpanm - get, unpack build and install modules from CPAN

=end original

cpanm - CPANからモジュールを取得、アンパック、インストールする

=head1 SYNOPSIS

=begin original

  cpanm Test::More                                 # install Test::More
  cpanm MIYAGAWA/Plack-0.99_05.tar.gz              # full distribution path
  cpanm http://example.org/LDS/CGI.pm-3.20.tar.gz  # install from URL
  cpanm ~/dists/MyCompany-Enterprise-1.00.tar.gz   # install from a local file
  cpanm --interactive Task::Kensho                 # Configure interactively
  cpanm .                                          # install from local directory
  cpanm --installdeps .                            # install all the deps for the current directory
  cpanm -L extlib Plack                            # install Plack and all non-core deps into extlib
  cpanm --mirror http://cpan.cpantesters.org/ DBI  # use the fast-syncing mirror

=end original

  cpanm Test::More                                 # Test::More をインストール
  cpanm MIYAGAWA/Plack-0.99_05.tar.gz              # 完全なディストリビューションのパス
  cpanm http://example.org/LDS/CGI.pm-3.20.tar.gz  # URLからインストール
  cpanm ~/dists/MyCompany-Enterprise-1.00.tar.gz   # ローカルファイルからインストール
  cpanm --interactive Task::Kensho                 # インタラクティブに設定する
  cpanm .                                          # ローカルディレクトリからインストール
  cpanm --installdeps .                            # カレントディレクトリの全ての依存をインストール
  cpanm -L extlib Plack                            # Plackとコアでない依存を extlib にインストール
  cpanm --mirror http://cpan.cpantesters.org/ DBI  # 高速同期ミラーを使う

=head1 COMMANDS

(コマンド)

=over 4

=item (arguments)

=begin original

Command line arguments can be either a module name, distribution file,
local file path, HTTP URL or git repository URL. Following commands
will all work as you expect.

=end original

コマンドライン引数には、モジュール名、ディストリビューションのファイル、
ローカルのファイルパス、HTTP URL か git リポジトリのURLが取れます。以下のコマンド
は全て期待通りに動きます。

    cpanm Plack
    cpanm Plack/Request.pm
    cpanm MIYAGAWA/Plack-1.0000.tar.gz
    cpanm /path/to/Plack-1.0000.tar.gz
    cpanm http://cpan.metacpan.org/authors/id/M/MI/MIYAGAWA/Plack-0.9990.tar.gz
    cpanm git://github.com/plack/Plack.git

=begin original

Additionally, you can use the notation using C<~> and C<@> to specify
version for a given module. C<~> specifies the version requirement in
the L<CPAN::Meta::Spec> format, while C<@> pins the exact version, and
is a shortcut for C<~"== VERSION">.

=end original

追加として、C<~>とC<@>の記法を使って、与えられたモジュールのバージョンを特定
することがができます。C<~>はバージョン要求を、L<CPAN::Meta::Spec>の
フォーマットで指定します。C<@>は、正確なバージョンを固定しますが、
C<~"== VERSION">のショートカットです。

=begin original

    cpanm Plack~1.0000                 # 1.0000 or later
    cpanm Plack~">= 1.0000, < 2.0000"  # latest of 1.xxxx
    cpanm Plack@0.9990                 # specific version. same as Plack~"== 0.9990"

=end original

    cpanm Plack~1.0000                 # 1.0000 以降
    cpanm Plack~">= 1.0000, < 2.0000"  # 最新の 1.xxxx
    cpanm Plack@0.9990                 # 特定のバージョン。 Plack~"== 0.9990"と同じ

=begin original

The version query including specific version or range will be sent to
L<MetaCPAN> to search for previous releases. The query will search for
BackPAN archives by default, unless you specify C<--dev> option, in
which case, archived versions will be filtered out.

=end original

特定のバージョンや範囲を指定することを含むバージョンクエリは
L<MetaCPAN>に送られて、以前のリリースを調べます。C<--dev>オプションを
付けなければクエリはデフォルトでBackPANのアーカイブを探します。
そのようなケースでは、アーカイブされたバージョンはフィルターされます。

=begin original

For a git repository, you can specify a branch, tag, or commit SHA to
build. The default is C<master>

=end original

gitリポジトリのために、ブランチ、タグ、コミットSHAを指定して、
ビルドできます。デフォルトはC<master>です。

    cpanm git://github.com/plack/Plack.git@1.0000        # tag
    cpanm git://github.com/plack/Plack.git@devel         # branch

=item -i, --install

=begin original

Installs the modules. This is a default behavior and this is just a
compatibility option to make it work like L<cpan> or L<cpanp>.

=end original

モジュールをインストールします。これはデフォルトの振る舞いで、単に
L<cpan> や L<cpanp> のように動くための互換性のためのオプションです。

=item --self-upgrade

=begin original

Upgrades itself. It's just an alias for:

=end original

cpanm自身をアップグレードします。これは、ただの、以下の aliasです:

  cpanm App::cpanminus

=item --info

=begin original

Displays the distribution information in
C<AUTHOR/Dist-Name-ver.tar.gz> format in the standard out.

=end original

C<AUTHOR/Dist-Name-ver.tar.gz>フォーマットで、
ディストリビューションの情報を、標準出力に表示します。

=item --installdeps

=begin original

Installs the dependencies of the target distribution but won't build
itself. Handy if you want to try the application from a version
controlled repository such as git.

=end original

ターゲットのディストリビューションの依存をインストールします。ですが、
自身はビルドしません。gitのようなバージョンコントロールされたリポジトリ
からアプリケーションを試してみたいときに便利です。

  cpanm --installdeps .

=item --look

=begin original

Download and unpack the distribution and then open the directory with
your shell. Handy to poke around the source code or do manual
testing.

=end original

ディストリビューションをダウンロードしてアンパックし、シェルで
ディレクトリを開きます。ソースコードを覗いてみたり、手動でテストを実行
するのに便利です。

=item -U, --uninstall

=begin original

B<EXPERIMENTAL>: Uninstalls the modules. Will remove the distribution
files from your library path using the C<.packlist> file.

=end original

モジュールのアンインストールします。 C<.packlist>ファイルを使って
ライブラリパスからディストリビューションを削除します。

=begin original

When used with C<-l> or C<-L>, only the files under the local::lib
directory will be removed.

=end original

C<-l>かC<-L>と一緒に使うと、local::lib ディレクトリの下のファイルのみ
削除されます。

=begin original

B<NOTE>: If you have the "dual-life" module in multiple locations
(i.e. C<site_perl> and C<perl> library path, with perl 5.12 or later),
only the files in C<site_perl> will be deleted.

=end original

B<注意>: "dual-life"モジュールが複数の場所にあるなら
(i.e. perl 5.12以降で、C<site_perl>、C<perl>ライブラリパス)、
C<site_perl>内のファイルのみ削除されます。

=begin original

If the distribution has bin scripts and man, they will be kept in case
the core installation still references that, although there's no
guarantee that the script will continue working as expected with the
older version of .pm files.

=end original

ディストリビューションに bin スクリプトと man があれば、
そのケースでは、それらはコアのインストールがまだそれを参照し続けるでしょう。
ただし、より古いバージョンの .pm ファイルで期待通りに動き続けるかは保証されません。

=item -h, --help

=begin original

Displays the help message.

=end original

help メッセージを表示します。

=item -V, --version

=begin original

Displays the version number.

=end original

バージョン番号を表示します。

=back

=head1 OPTIONS

(オプション)

=begin original

You can specify the default options in C<PERL_CPANM_OPT> environment variable.

=end original

デフォルトのオプションをC<PERL_CPANM_OPT>環境変数に指定できます。

=over 4

=item -f, --force

=begin original

Force install modules even when testing failed.

=end original

テストが失敗しても、モジュールを強制的にインストールします。

=item -n, --notest

=begin original

Skip the testing of modules. Use this only when you just want to save
time for installing hundreds of distributions to the same perl and
architecture you've already tested to make sure it builds fine.

=end original

モジュールのテストをスキップします。数百のディストリビューションを、
既にテスト済みでうまくビルドできるとわかっている、同じperlとアーキテクチャーに、
インストールする時間を節約したいだけの時に使ってください。

=begin original

Defaults to false, and you can say C<--no-notest> to override when it
is set in the default options in C<PERL_CPANM_OPT>.

=end original

デフォルトは偽です。C<PERL_CPANM_OPT>のデフォルトオプションにセットすれば、
オーバーライドするために、C<--no-notest>を指定できます。

=item --test-only

=begin original

Run the tests only, and do not install the specified module or
distributions. Handy if you want to verify the new (or even old)
releases pass its unit tests without installing the module.

=end original

テストのみを実行し、指定したモジュールやディストリビューションをインストールしません。
新しい(古くても)リリースがモジュールをインストールすることなしに、
ユニットテストが通るかどうか確かめたい時に便利です。

=begin original

Note that if you specify this option with a module or distribution
that has dependencies, these dependencies will be installed if you
don't currently have them.

=end original

次のことに注意してください。依存のあるモジュールやディストリビューションに
このオプションを指定した場合、これらの依存は、現在持っていなければ、
インストールされます。

=item -S, --sudo

=begin original

Switch to the root user with C<sudo> when installing modules. Use this
if you want to install modules to the system perl include path.

=end original

モジュールのインストール時に、C<sudo>オプションをつけて root ユーザーに代わります。
system perl が持っているパスにモジュールをインストールしたければ、
これを使ってください。

=begin original

Defaults to false, and you can say C<--no-sudo> to override when it is
set in the default options in C<PERL_CPANM_OPT>.

=end original

デフォルトは偽です。C<PERL_CPANM_OPT>にデフォルトオプションとしてセットした場合は、
C<--no-sudo>を指定することで、オーバーライドできます。

=item -v, --verbose

=begin original

Makes the output verbose. It also enables the interactive
configuration. (See --interactive)

=end original

出力を冗長にします。インタラクティブな設定も有効になります
(--interactiveを見てください)

=item -q, --quiet

=begin original

Makes the output even more quiet than the default. It only shows the
successful/failed dependencies to the output.

=end original

デフォルトよりも、出力をより静かにします。成功した/失敗した依存のみを
出力します。

=item -l, --local-lib

=begin original

Sets the L<local::lib> compatible path to install modules to. You
don't need to set this if you already configure the shell environment
variables using L<local::lib>, but this can be used to override that
as well.

=end original

L<local::lib>コンパチブルなパスをモジュールをインストールする場所にセットします。
L<local::lib>を使ってシェルの環境変数を既に設定済みであれば、これをセットする
必要はありませんが、それをオーバーライドするのにも使えます。

=item -L, --local-lib-contained

=begin original

Same with C<--local-lib> but with L<--self-contained> set.  All
non-core dependencies will be installed even if they're already
installed.

=end original

C<--local-lib>をセットしますが、L<--self-contained>もセットします。
全てのコアでない依存が、それらがインストール済みであっても、
インストールされます。

=begin original

For instance,

=end original

例えば、

  cpanm -L extlib Plack

=begin original

would install Plack and all of its non-core dependencies into the
directory C<extlib>, which can be loaded from your application with:

=end original


Plackと全てのコアでない依存を C<extlib>にインストールします。
アプリケーションからは次のようにロードできます:

  use local::lib '/path/to/extlib';

=item --self-contained

=begin original

When examining the dependencies, assume no non-core modules are
installed on the system. Handy if you want to bundle application
dependencies in one directory so you can distribute to other machines.

=end original

依存を調査するときに、コアでないモジュールはシステムにインストールされていると
想定します。アプリケーションの依存を一つのディレクトリにまとめるのに便利で、
そうすることで、他のマシンに配布できます。

=item --mirror

=begin original

Specifies the base URL for the CPAN mirror to use, such as
C<http://cpan.cpantesters.org/> (you can omit the trailing slash). You
can specify multiple mirror URLs by repeating the command line option.

=end original

使用するCPANミラーのベースのURLを指定します。
C<http://cpan.cpantesters.org>のように(最後のスラッシュは省略できます)。
このコマンドラインオプションを繰り返すことで、複数のミラーを指定できます。

=begin original

You can use a local directory that has a CPAN mirror structure
(created by tools such as L<OrePAN> or L<Pinto>) by using a special
URL scheme C<file://>. If the given URL begins with `/` (without any
scheme), it is considered as a file scheme as well.

=end original

CPANミラーの構造を持っているローカルディレクトリ
(L<OrePAN>やL<Pinto>を使って作られた)も、C<file://>のURLスキーマを使って
指定できます。与えられた、URLが（何のスキーマもなしで）'/'から始まっていた
場合、ファイルスキーマであると考えます。

  cpanm --mirror file:///path/to/mirror
  cpanm --mirror ~/minicpan      # Because shell expands ~ to /home/user

=begin original

Defaults to C<http://www.cpan.org/>.

=end original

デフォルトは、 C<http://www.cpan.org/>です。

=item --mirror-only

=begin original

Download the mirror's 02packages.details.txt.gz index file instead of
querying the CPAN Meta DB. This will also effectively opt out sending
your local perl versions to backend database servers such as CPAN Meta
DB and MetaCPAN.

=end original

ミラーの02packages.details.txt.gz インデックスをCPAN Meta DBに問い合わせる
代わりにダウンロードします。CPAN Meta DBや MetaCPANのようなバックエンドの
データベースにローカルのperlのバージョンを送るのをオプトアウトするのに
効果的です。

=begin original

Select this option if you are using a local mirror of CPAN, such as
minicpan when you're offline, or your own CPAN index (a.k.a darkpan).

=end original

オフラインでminicpanのようなCPANのローカルミラーか、
自分自身の CPANインデックス(a.k.a dakpan)を使っているなら、このオプションを選んでください。

=begin original

B<Tip:> It might be useful if you name these mirror options with your
shell aliases, like:

=end original

B<Tip:>ミラーオプションをシェルのエイリアスで作ると便利かもしれません。

  alias minicpanm='cpanm --mirror ~/minicpan --mirror-only'
  alias darkpan='cpanm --mirror http://mycompany.example.com/DPAN --mirror-only'

=item --mirror-index

=begin original

B<EXPERIMENTAL>: Specifies the file path to C<02packages.details.txt>
for module search index.

=end original

B<実験的>: モジュールの検索のためにC<02packages.details.txt>のファイルのパスを
指定します。

=item --cpanmetadb

=begin original

B<EXPERIMENTAL>: Specifies an alternate URI for CPAN MetaDB index lookups.

=end original

B<実験的>: 代替のURIかCPAN MetaDBインデックスを指定します。

=item --cpanfile

=begin original

B<EXPERIMENTAL>: Specified an alternate path for cpanfile to search for,
when C<--installdeps> command is in use. Defaults to C<cpanfile>.

=end original

B<実験的>: C<--installdeps>コマンドを使う際に、cpanfile を探す代替のパスを指定します。
デフォルトは、C<cpanfile>です。

=item --prompt

=begin original

Prompts when a test fails so that you can skip, force install, retry
or look in the shell to see what's going wrong. It also prompts when
one of the dependency failed if you want to proceed the installation.

=end original

テストが失敗するときにプロンプトを出し、スキップしたり、強制的にインストールしたり、
リトライしたり、何が悪いかシェルで見ることができます。インストールを処理したいなら、
依存の一つが失敗した時にも、プロンプトを出します。

=begin original

Defaults to false, and you can say C<--no-prompt> to override if it's
set in the default options in C<PERL_CPANM_OPT>.

=end original

デフォルトは偽です。C<PERL_CPANM_OPT>にデフォルトオプションとしてセットした場合は、
C<--no-prompt>を指定することで、オーバーライドできます。

=item --dev

=begin original

B<EXPERIMENTAL>: search for a newer developer release as well. Defaults to false.

=end original

B<実験的>: より新しい開発者向けリリースも検索します。デフォルトは偽です。

=item --reinstall

=begin original

cpanm, when given a module name in the command line (i.e. C<cpanm
Plack>), checks the locally installed version first and skips if it is
already installed. This option makes it skip the check, so:

=end original

cpanmは、コマンドラインにモジュール名が与えられたとき(i.e. C<cpanm Plack>)に、
最初にローカルにインストールされたバージョンをチェックして、既にインストール済みであれば、
スキップします。このオプションはそのチエックをスキップします:

  cpanm --reinstall Plack

=begin original

would reinstall L<Plack> even if your locally installed version is
latest, or even newer (which would happen if you install a developer
release from version control repositories).

=end original

L<Plack>を、たとえローカルにインストールされたバージョンが最新か、
より新しくても(開発者向けリリースをバージョン管理リポジトリからインストールした場合に、
起きるかもしれません)、再インストールします。

=begin original

Defaults to false.

=end original

デフォルトは偽です。

=item --interactive

=begin original

Makes the configuration (such as C<Makefile.PL> and C<Build.PL>)
interactive, so you can answer questions in the distribution that
requires custom configuration or Task:: distributions.

=end original

設定を(C<Makefile.PL>やC<Build.PL>のように)インタラクティブにします。
カスタムの設定が必要なディストリビューションか、Task:: のディストリビューション
で質問に答えることができます。

=begin original

Defaults to false, and you can say C<--no-interactive> to override
when it's set in the default options in C<PERL_CPANM_OPT>.

=end original

デフォルトは偽です。C<PERL_CPANM_OPT>にデフォルトオプションとしてセットした場合は、
C<--no-interactive>を指定することで、オーバーライドできます。

=item --pp, --pureperl

=begin original

Prefer Pure perl build of modules by setting C<PUREPERL_ONLY=1> for
MakeMaker and C<--pureperl-only> for Build.PL based
distributions. Note that not all of the CPAN modules support this
convention yet.

=end original

モジュールのPure perl のビルドを優先します。MakerMakerのためにC<PUREPERL_ONLY=1>と、
Build.PLベースのディストリビューションのために、C<--pureperl-only>を設定します。
全てのCPANモジュールがこれをサポートしているわけではないことに注意してください。

=item --with-recommends, --with-suggests

=begin original

B<EXPERIMENTAL>: Installs dependencies declared as C<recommends> and
C<suggests> respectively, per META spec. When these dependencies fail
to install, cpanm continues the installation, since they're just
recommendation/suggestion.

=end original

B<実験的>: META仕様で、C<recommends>とC<suggests>として宣言されている
依存をそれぞれインストールします。こららの依存のインストールに失敗しても、
それらは、ただの推奨/提案なので、cpanmはインストールを続けます。

=begin original

Enabling this could potentially make a circular dependency for a few
modules on CPAN, when C<recommends> adds a module that C<recommends>
back the module in return.

=end original

これを有効にすると、C<recommends>が、C<recommends>し返しているモジュールを
加えるようなときに、CPANのモジュールで循環依存をになる可能性があります。

=begin original

There's also C<--without-recommend> and C<--without-suggests> to
override the default decision made earlier in C<PERL_CPANM_OPT>.

=end original

C<PERL_CPANM_OPT>で先にされた、デフォルトの決定を
C<--without-recommend>とC<--without-suggests>でオーバーライドできます。

=begin original

Defaults to false for both.

=end original

デフォルトは両方とも偽です。

=item --with-develop

=begin original

B<EXPERIMENTAL>: Installs develop phase dependencies in META files or
C<cpanfile> when used with C<--installdeps>. Defaults to false.

=end original

B<実験的>: C<--installdeps>を使う際に、METAファイルかC<cpanfile>内の
開発フェーズの依存をインストールします。デフォルトは偽です。

=item --with-feature, --without-feature, --with-all-features

=begin original

B<EXPERIMENTAL>: Specifies the feature to enable, if a module supports
optional features per META spec 2.0.

=end original

B<実験的>: META仕様2.0のオプションの機能をサポートしている場合に、
有効にする機能を指定します。

    cpanm --with-feature=opt_csv Spreadsheet::Read

=begin original

the features can also be interactively chosen when C<--interactive>
option is enabled.

=end original

この機能は C<--interactive>オプションを有効にすれば、
インタラクティブに選択することもできます。

=begin original

C<--with-all-features> enables all the optional features, and
C<--without-feature> can select a feature to disable.

=end original

C<--with-all-features> 全てのオプションの機能を有効にし、
C<--without-feature> 機能を無効として選択します。

=item --configure-timeout, --build-timeout, --test-timeout

=begin original

Specify the timeout length (in seconds) to wait for the configure,
build and test process. Current default values are: 60 for configure,
3600 for build and 1800 for test.

=end original

configure、build、testのプロセスを待つ、タイムアウトの長さ(秒で)を指定します。
現在のデフォルトは、configure で60、buildで3600、testで1800です。

=item --configure-args, --build-args, --test-args, --install-args

=begin original

B<EXPERIMENTAL>: Pass arguments for configure/build/test/install
commands respectively, for a given module to install.

=end original

B<実験的>: インストールする与えられたモジュールのために、
configure/build/test/install コマンドにそれぞれ、引数を与えます。


    cpanm DBD::mysql --configure-args="--cflags=... --libs=..."

=begin original

The argument is only enabled for the module passed as a command line
argument, not dependencies.

=end original

引数は、コマンドラインに引数として渡されたモジュールにのみ有効です。
依存には無効です。

=item --scandeps

=begin original

B<DEPRECATED>: Scans the depencencies of given modules and output the
tree in a text format. (See C<--format> below for more options)

=end original

B<廃止>: 与えられたモジュールの依存をスキャンして、テキストフォーマットでツリー表示します。
(詳しくは、後述のC<--format>オプションを見てください)。

=begin original

Because this command doesn't actually install any distributions, it
will be useful that by typing:

=end original

このコマンドは実際には、なんのディストリビューションもインストールしないので、
タイピングで便利です:

  cpanm --scandeps Catalyst::Runtime

=begin original

you can make sure what modules will be installed.

=end original

どんなモジュールがインストールするか確かめることができます。

This command takes into account which modules you already have
installed in your system. If you want to see what modules will be
installed against a vanilla perl installation, you might want to
combine it with C<-L> option.

=item --format

=begin original

B<DEPRECATED>: Determines what format to display the scanned
dependency tree. Available options are C<tree>, C<json>, C<yaml> and
C<dists>.

=end original

B<廃止>: スキャンされた依存ツリーをどのフォーマットで表示するかを決めます。
利用可能なオプションは C<tree>, C<json>, C<yaml>,
C<dists>です。

=over 8

=item tree

=begin original

Displays the tree in a plain text format. This is the default value.

=end original

プレーンテキストフォーマットでツリー表示します。デフォルトの値です。

=item json, yaml

=begin original

Outputs the tree in a JSON or YAML format. L<JSON> and L<YAML> modules
need to be installed respectively. The output tree is represented as a
recursive tuple of:

=end original

JSONかYAMLのフォーマットで出力します。L<JSON>とL<YAML>モジュール
がそれぞれインストールされていなければいけません。出力されるツリーは
再帰的なタプルで表現されます:

  [ distribution, dependencies ]

=begin original

and the container is an array containing the root elements. Note that
there may be multiple root nodes, since you can give multiple modules
to the C<--scandeps> command.

=end original

コンテナがルートの要素を含む配列です。複数のモジュールをC<--scandeps>コマンドに
与えた場合、ルートノードが複数になる場合もあります。

=item dists

=begin original

C<dists> is a special output format, where it prints the distribution
filename in the I<depth first order> after the dependency resolution,
like:

=end original

C<dists>は特別な出力フォーマットです。依存の解決の後に、I<深さ優先で>
ディストリビューションのファイルネームを表示します。
次のように:

  GAAS/MIME-Base64-3.13.tar.gz
  GAAS/URI-1.58.tar.gz
  PETDANCE/HTML-Tagset-3.20.tar.gz
  GAAS/HTML-Parser-3.68.tar.gz
  GAAS/libwww-perl-5.837.tar.gz

=begin original

which means you can install these distributions in this order without
extra dependencies. When combined with C<-L> option, it will be useful
to replay installations on other machines.

=end original

特別な依存なしにこの順番でこれらのディストリビューションをインストールできることを
意味します。C<-L>オプションと組み合わせると、他のマシンでインストールをリプレイ
するのに便利でしょう。

=back

=item --save-dists

=begin original

Specifies the optional directory path to copy downloaded tarballs in
the CPAN mirror compatible directory structure
i.e. I<authors/id/A/AU/AUTHORS/Foo-Bar-version.tar.gz>

=end original

CPANミラーと互換性のあるディレクトリ構造にダウンロードしたtarボールを
コピーするオプショナルのディレクトリのパスを指定します。
i.e. I<authors/id/A/AU/AUTHORS/Foo-Bar-version.tar.gz>

=begin original

If the distro tarball did not come from CPAN, for example from a local
file or from GitHub, then it will be saved under
I<vendor/Foo-Bar-version.tar.gz>.

=end original

ディストリビューションのtarボールがCPANからではないなら、例えば、ローカルファイル
かGitHumからなら、I<vendor/Foo-Bar-version.tar.gz>のように保存されます。

=item --uninst-shadows

=begin original

Uninstalls the shadow files of the distribution that you're
installing. This eliminates the confusion if you're trying to install
core (dual-life) modules from CPAN against perl 5.10 or older, or
modules that used to be XS-based but switched to pure perl at some
version.

=end original

インストールするディストリビューションのシャドーファイルをあにンストールします。
perl 5.10以下に対して、コアの(dual-life)のモジュールをCPANからインストール
するか、XSベースで使っていたモジュールを同じバージョンの pure perlにスイッチ
しようとしているなら、混乱を取り除きます。

=begin original

If you run cpanm as root and use C<INSTALL_BASE> or equivalent to
specify custom installation path, you SHOULD disable this option so
you won't accidentally uninstall dual-life modules from the core
include path.

=end original

cpanmをrootとして、C<INSTALL_BASE>か同等のカスタムのインストールパスを
指定しているなら、このオプションを無効に*すべき*です。
そうすれば、間違って、コアのインクルードパスからdual-lifeのモジュールを
アンインストールしないでしょう。

=begin original

Defaults to true if your perl version is smaller than 5.12, and you
can disable that with C<--no-uninst-shadows>.

=end original

perlのバージョンが5.12より小さい場合、デフォルトでは真です。
C<--no-uninst-shadows>で、無効に出来ます。

=begin original

B<NOTE>: Since version 1.3000 this flag is turned off by default for
perl newer than 5.12, since with 5.12 @INC contains site_perl directory
I<before> the perl core library path, and uninstalling shadows is not
necessary anymore and does more harm by deleting files from the core
library path.

=end original

B<注意>: バージョン 1.3000から、このフラグは、5.12より新しいperlで
デフォルトでオフです。 5.12で、@INCはperl のコアライブラリパスのI<前に>
site_perlディレクトリを含んでいるので、シャドーを削除することは、
必要ないし、コアライブラリパスから削除することでより危ないからです。

=item --uninstall, -U

=begin original

Uninstalls a module from the library path. It finds a packlist for
given modules, and removes all the files included in the same
distribution.

=end original

ライブラリパスからモジュールのアンインストールします。 与えられたモジュールが
packlistに見つかると、同じディストリビューションに含まれる据えてのファイルを
削除します。

=begin original

If you enable local::lib, it only removes files from the local::lib
directory.

=end original

local::libが有効であれば、local::libのディレクトリからだけファイルを
削除します。

=begin original

If you try to uninstall a module in C<perl> directory (i.e. core
module), an error will be thrown.

=end original

C<perl>ディレクトリのモジュール(i.e. コアモジュール)をアンインストールしようとすると、
エラーが投げられます。

=begin original

A dialog wil be prompted to confirm the files to be deleted. If you pass
C<-f> option as well, the dialog will be skipped and uninstallation
will be forced.

=end original

ダイアログで削除されるファイルを確認を促されます。C<-f>オプションを渡せば、
ダイアログはスキップされて、アンインストールが強制的に
行われます。

=item --cascade-search

=begin original

B<EXPERIMENTAL>: Specifies whether to cascade search when you specify
multiple mirrors and a mirror doesn't have a module or has a lower
version of the module than requested. Defaults to false.

=end original

B<実験的>:複数のミラーを指定した際で、1つのミラーがモジュールを持っていないか、
リクエストしたものより低いバージョンのモジュールしかない場合に、検索を次に
つなげるかどうかを指定します。デフォルトでは偽です。

=item --skip-installed

=begin original

Specifies whether a module given in the command line is skipped if its latest
version is already installed. Defaults to true.

=end original

もし、最新のバージョンがすでにインストールされていれば、コマンドラインで与えられた
モジュールはスキップするかどうかを指定します。デフォルトは真です。

=begin original

B<NOTE>: The C<PERL5LIB> environment variable have to be correctly set
for this to work with modules installed using L<local::lib>, unless
you always use the C<-l> option.

=end original

B<注意>: C<-l>オプションを常に使わないなら、L<local::lib>を使って
インストールされたモジュールでこれを動かすためには、C<PERL5LIB>環境変数が
正しくセットされている必要があります。

=item --skip-satisfied

=begin original

B<EXPERIMENTAL>: Specifies whether a module (and version) given in the
command line is skipped if it's already installed.

=end original

B<EXPERIMENTAL>: コマンドラインで与えられたモジュール(とバージョン)は、
すでにインストールされていれば、スキップするかどうかを指定します。

=begin original

If you run:

=end original

実行すると:

  cpanm --skip-satisfied CGI DBI~1.2

=begin original

cpanm won't install them if you already have CGI (for whatever
versions) or have DBI with version higher than 1.2. It is similar to
C<--skip-installed> but while C<--skip-installed> checks if the
I<latest> version of CPAN is installed, C<--skip-satisfied> checks if
a requested version (or not, which means any version) is installed.

=end original

cpanm はCGI(どのバージョンでも)かDBIのバージョン1.2以上がすでにあれば、
それらをインストールしません。これは、C<--skip-installed>に似ていますが、
C<--skip-installed>は、CPANのI<最新の>バージョンがインストールされているかどうかを
チェックする一方、C<--skip-satisfied>は、リクエストしたバージョン
(または、なければ、どのバージョンでも良いことを意味する)がインストール
されているかどうかをチェックします。

=begin original

Defaults to false.

=end original

デフォルトは偽です。

=item --verify

=begin original

Verify the integrity of distribution files retrieved from PAUSE using
CHECKSUMS and SIGNATURES (if found). Defaults to false.

=end original

CHECKSUMSとSIGNATURES(あれば)を使って、PAUSEから取ったディストリビューション
ファイルの整合性を検証します。デフォルトでは偽です。

=item --report-perl-version

=begin original

Whether it report the locally installed perl version to the various
web server as part of User-Agent. Defaults to true, and you can disable
it by using C<--no-report-perl-version>.

=end original

ローカルにインストールされているperlのバージョンをUser-Agentとして
様々なwebサーバに送るかどうかです。デフォルトでは真です。無効にしたければ、
C<--no-report-perlversion>を使います。

=item --auto-cleanup

=begin original

Specifies the number of days in which cpanm's work directories
expire. Defaults to 7, which means old work directories will be
cleaned up in one week.

=end original

cpanmのワーキングディレクトリの期限切れの日数を指定する。
デフォルトは7日です。古いディレクトリは1習慣で掃除されます。

=begin original

You can set the value to C<0> to make cpan never cleanup those
directories.

=end original

=item --man-pages

=begin original

Generates man pages for executables (man1) and libraries (man3).

=end original

実行ファイル(man1)とライブラリ(man3)のためにmanページを作ります。

=begin original

Defaults to true (man pages generated) unless C<-L|--local-lib-contained>
option is supplied in which case it's set to false. You can disable
it with C<--no-man-pages>.

=end original

偽にセットされるC<-L|--local-lib-contained>がなければ、デフォルトでは
真です(man ページは生成されます)。無効にするには、C<--no-man-pages>を
使います。

=item --lwp

=begin original

Uses L<LWP> module to download stuff over HTTP. Defaults to true, and
you can say C<--no-lwp> to disable using LWP, when you want to upgrade
LWP from CPAN on some broken perl systems.

=end original

L<LWP>を使ってHTTP経由でダウンロードします。デフォルトは真です。
perlのシステムが壊れている環境で、CPANからLWPをアップグレードしたい時に、
C<--no-lwp>を使うと、LWPを使うのを無効にできます。

=item --wget

=begin original

Uses GNU Wget (if available) to download stuff. Defaults to true, and
you can say C<--no-wget> to disable using Wget (versions of Wget older
than 1.9 don't support the C<--retry-connrefused> option used by cpanm).

=end original

GNU Wgetを(もし可能なら)使ってダウンロードします。デフォルトは真です。
C<--no-wget>を使うと、Wget(1.9より古いバージョンのWgetは、cpanmで使われる、
C<--retry-connrefused>オプションをサポートしません)を使うのを無効にできます。

=item --curl

=begin original

Uses cURL (if available) to download stuff. Defaults to true, and
you can say C<--no-curl> to disable using cURL.

=end original

cURLを(もし可能なら)使ってダウンロードします。デフォルトは真です。
C<--no-curl>を使うと、cURLを使うのを無効にできます。

=begin original

Normally with C<--lwp>, C<--wget> and C<--curl> options set to true
(which is the default) cpanm tries L<LWP>, Wget, cURL and L<HTTP::Tiny>
(in that order) and uses the first one available.

=end original

通常、C<--lwp>、C<--wget>、C<--curl>オプションは(デフォルトで)真です。
cpanm はL<LWP>、Wet、cURL、L<HTTP::Tiny>を(この順番で)試し、最初に
利用可能なものを使います。

=back

=head1 SEE ALSO

L<App::cpanminus>

=head1 COPYRIGHT

Copyright 2010 Tatsuhiko Miyagawa.

=head1 AUTHOR

Tatsuhiko Miyagawa


=cut

