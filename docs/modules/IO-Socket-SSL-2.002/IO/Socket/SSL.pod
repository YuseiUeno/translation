
=encoding utf-8

=head1 NAME

=begin original

IO::Socket::SSL - SSL sockets with IO::Socket interface

=end original

IO::Socket::SSL - IO::Socket インターフェースの SSL ソケット

=head1 SYNOPSIS

    use strict;
    use IO::Socket::SSL;

    # simple client
    my $cl = IO::Socket::SSL->new('www.google.com:443');
    print $cl "GET / HTTP/1.0\r\n\r\n";
    print <$cl>;

    # simple server
    my $srv = IO::Socket::SSL->new(
	LocalAddr => '0.0.0.0:1234',
	Listen => 10,
	SSL_cert_file => 'server-cert.pem',
	SSL_key_file => 'server-key.pem',
    );
    $srv->accept;

=head1 DESCRIPTION

=over 4

=item *

=begin original

0 - No debugging (default).

=end original

0 - デバッグなし(デフォルト)

=item *

=begin original

1 - Print out errors from IO::Socket::SSL and ciphers from Net::SSLeay.

=end original

1 - IO::Socket::SSL からのエラーと Net::SSLeay からの暗号を出力。

=item *

=begin original

2 - Print also information about call flow from IO::Socket::SSL and progress
information from Net::SSLeay.

=end original

2 - IO::Socket::SSL からの呼び出しフローと Net::SSLeay からの進捗情報も出力。

=item *

=begin original

3 - Print also some data dumps from IO::Socket::SSL and from Net::SSLeay.

=end original

3 - IO::Socket::SSL からと Net::SSLeay からの一部のデータダンプも出力。

=back

=head1 Description Of Methods

(メソッドの説明)

=begin original

Please be aware, that with the IPv6 capable super classes, it will lookup first
for the IPv6 address of a given hostname. If the resolver provides an IPv6
address, but the host cannot be reached by IPv6, there will be no automatic
fallback to IPv4.
To avoid these problems you can either force IPv4 by specifying and AF_INET
as C<Domain> of the socket or globally enforce IPv4 by loading IO::Socket::SSL
with the option 'inet4'.

=end original

IPv6 対応のスーパークラスでは、指定されたホスト名の IPv6 アドレスを
最初に探すことに注意してください。
リゾルバが IPv6 アドレスを提供するけれどもホストが IPv6 で到達できない場合、
自動的に IPv4 にフォールバックすることはしません。
これらの問題を回避するには、ソケットの C<ドメイン> として AF_INET を指定して
IPv4 を強制するか、オプション 'inet4' で IO::Socket::SSL をロードすることで
グローバルに IPv4 を強制します。

=over 4

=item B<new(...)>

=begin original

Creates a new IO::Socket::SSL object.  You may use all the friendly options
that came bundled with the super class (e.g. IO::Socket::IP,
IO::Socket::INET, ...) plus (optionally) the ones described below.
If you don't specify any SSL related options it will do it's best in using
secure defaults, e.g. chosing good ciphers, enabling proper verification etc.

=end original

新しい IO::Socket::SSL オブジェクトを作成します。
(オプションで)以下のものも含めて、スーパークラス
(IO::Socket::IP, IO::Socket::INET など) についてくる
親切なオプションの全てを使うことが出来ます:
SSL 関連のオプションを何も指定しない場合、
セキュアなデフォルトを使うことで最善を尽くします;
つまり、良い暗号を選ぶ、適切な検証を有効にする、など。

=over 2

=item SSL_server

=begin original

Set this option to a true value, if the socket should be used as a server.
If this is not explicitly set it is assumed, if the Listen parameter is given
when creating the socket.

=end original

ソケットがサーバとして使われる場合にこのオプションに真を設定します。
これが明示的に設定されると、ソケットを作成するときに
Listen 引数が与えられることを仮定します。

=item SSL_hostname

=begin original

This can be given to specify the hostname used for SNI, which is needed if you
have multiple SSL hostnames on the same IP address. If not given it will try to
determine hostname from PeerAddr, which will fail if only IP was given or if
this argument is used within start_SSL.

=end original

これは、SNI に使用されるホスト名を指定するために指定できます;
これは、同じ IP アドレスに複数の SSL ホスト名がある場合に必要です。
指定されていない場合は、PeerAddr からホスト名を決定しようとします;
IP のみが指定されている場合、またはこの引数が start_SSL 内で
使用されている場合は失敗します。

=begin original

If you want to disable SNI set this argument to ''.

=end original

SNI を無効にする場合は、この引数を '' に設定します。

=begin original

Currently only supported for the client side and will be ignored for the server
side.

=end original

現在はクライアント側でのみサポートされており、サーバ側では無視されます。

=item SSL_ca | SSL_ca_file | SSL_ca_path

=begin original

Usually you want to verify that the peer certificate has been signed by a
trusted certificate authority. In this case you should use this option to
specify the file (C<SSL_ca_file>) or directory (C<SSL_ca_path>) containing the
certificateZ<>(s) of the trusted certificate authorities.
Also you can give X509* certificate handles (from L<Net::SSLeay> or
L<IO::Socket::SSL::Utils>) as a list with C<SSL_ca>. These will be added to the
CA store before path and file and thus take precedence.
If neither SSL_ca, nor SSL_ca_file or SSL_ca_path are set it will use
C<default_ca()> to determine the user-set or system defaults.
If you really don't want to set a CA set SSL_ca_file or SSL_ca_path to
C<\undef> or SSL_ca to an empty list. (unfortunatly C<''> is used by some
modules using IO::Socket::SSL when CA is not exlicitly given).

=end original

普通は相手の証明書が信頼できる認証局(certificate authority)によって
署名されたかを確認したいでしょう。
その場合信頼できる認証局の証明書が入っているファイル (C<SSL_ca_file>)
またはディレクトリ (C<SSL_ca_path>) の場所を示すため、このオプションを
使わなければなりません。
本当に SSL_ca_file を使わないのなら、undef に設定する必要があります。
また、C<SSL_ca> のリストとして (L<Net::SSLeay> または
L<IO::Socket::SSL::Utils> からの) X509* 証明書ハンドルを指定できます。
これらは、path と file の前に CA ストアに追加されるので、優先されます。
SSL_ca, SSL_ca_file, SSL_ca_path のいずれも設定されない場合、
ユーザー設定かシステムデフォルトかを決定するために C<default_ca()> を
使います。
本当に CA を設定したくない場合は、SSL_ca_file か SSL_ca_path に
C<\undef> を設定するか、SSL_ca に空リストを設定します。
(残念ながら C<''> は、CA が明示的に与えられなかったときに
IO::Socket::SSL を使った一部のモジュールによって使われています。)

=item SSL_passwd_cb

=begin original

If your private key is encrypted, you might not want the default password prompt
from Net::SSLeay.  This option takes a reference to a subroutine that should
return the password required to decrypt your private key.

=end original

あなたの秘密鍵が暗号化されているならば、Net::SSLeay からのデフォルトのパスワード
プロンプトが望ましくないかもしれません。
このオプションは秘密鍵を復号化するために必要とされるパスワードを返す
サブループンへのリファレンスを取ります。

=item SSL_use_cert

=begin original

If this is true, it forces IO::Socket::SSL to use a certificate and key, even if
you are setting up an SSL client.  If this is set to 0 (the default), then you
will only need a certificate and key if you are setting up a server.

=end original

これが真だと、SSL クライアントをセットアップしているときでさえも
IO::Socket::SSL に証明書と鍵を使うよう強制させます。
これが0(デフォルト)に
設定されると、サーバとして設定したときにだけ、証明書と鍵が必要になります。

=begin original

SSL_use_cert will implicitly be set if SSL_server is set.
For convenience it is also set if it was not given but a cert was given for use
(SSL_cert_file or similar).

=end original

SSL_server が設定されると、SSL_use_cert は暗黙に設定されます。
便利のために、これが設定されなくても (SSL_cert_file などで)
使用する証明書が設定されると、設定されます。

=item SSL_version

=begin original

Sets the version of the SSL protocol used to transmit data.
'SSLv23' uses a handshake compatible with SSL2.0, SSL3.0 and TLS1.x, while
'SSLv2', 'SSLv3', 'TLSv1', 'TLSv1_1' or 'TLSv1_2' restrict handshake and
protocol to the specified version.
All values are case-insensitive.  Instead of 'TLSv1_1' and 'TLSv1_2' one can
also use 'TLSv11' and 'TLSv12'.  Support for 'TLSv1_1' and 'TLSv1_2' requires
recent versions of Net::SSLeay and openssl.

=end original

データを転送するために使われるSSLプロトコルのバージョンを設定します。
'SSLv23' は SSL2.0, SSL3.0, TLS1.x に互換性のあるハンドシェイクを使いますが、
'SSLv2', 'SSLv3', 'TLSv1', 'TLSv1_1', 'TLSv1_2' は
指定されたバージョンにハンドシェイクとプロトコルを制限します。
全ての値は大文字小文字を無視します。
'TLSv1_1' と 'TLSv1_2' の代わりに、
'TLSv11' と 'TLSv12' を使えます。
'TLSv1_1' と 'TLSv1_2' に対応するには最近のバージョンの
Net::SSLeay と openssl が必要です。

=begin original

Independend from the handshake format you can limit to set of accepted SSL
versions by adding !version separated by ':'.

=end original

ハンドシェイクとは独立して、
':' で区切られた!バージョンを追加することで、受け入れる SSL の
バージョンのセットを制限できます。

=begin original

The default SSL_version is 'SSLv23:!SSLv3:!SSLv2' which means, that the
handshake format is compatible to SSL2.0 and higher, but that the successful
handshake is limited to TLS1.0 and higher, that is no SSL2.0 or SSL3.0 because
both of these versions have serious security issues and should not be used
anymore.
You can also use !TLSv1_1 and !TLSv1_2 to disable TLS versions 1.1 and 1.2 while
still allowing TLS version 1.0.

=end original

デフォルトの SSL_version は 'SSLv23:!SSLv3:!SSLv2' です;
ハンドシェイク形式は SSL2.0 以上と互換性がありますが、
ハンドシェイクが成功するのは TLS1.0 以上に制限されます。
つまり SSL2.0 や SSL3.0 はありません;
これらは両方とも重大なセキュリティ問題があり、
もはや使うべきではないからです。
!TLSv1_1 と !TLSv1_2 を使用して、TLS バージョン 1.1 と 1.2 を無効にし、
まだ TLS バージョン 1.0 を許可することもできます。

=begin original

Setting the version instead to 'TLSv1' might break interaction with older
clients, which need and SSL2.0 compatible handshake. On the other
side some clients just close the connection when they receive a TLS version 1.1
request. In this case setting the version to
'SSLv23:!SSLv2:!SSLv3:!TLSv1_1:!TLSv1_2' might help.

=end original

代わりにバージョンを 'TLSv1' に設定すると、SSL2.0 互換のハンドシェイクが
必要な古いクライアントとの相互作用が失われる可能性があります。
一方、一部のクライアントは、TLS バージョン 1.1 要求を受信したときに
接続を閉じるだけです。
この場合、バージョンを 'SSLv23:!SSLv2:!SSLv3:!TLSv1_1:!TLSv1_2' に設定すると
役立つ場合があります。

=item SSL_cipher_list

=begin original

If this option is set the cipher list for the connection will be set to the
given value, e.g. something like 'ALL:!LOW:!EXP:!aNULL'. Look into the OpenSSL
documentation (L<http://www.openssl.org/docs/apps/ciphers.html#CIPHER_STRINGS>)
for more details.

=end original

このオプションが設定されると、接続のための暗号リストが指定された値になります;
つまり、'ALL:!LOW:!EXP:!aNULL' のようなものです。
さらなる詳細については、OpenSSL の文書
(L<http://www.openssl.org/docs/apps/ciphers.html#CIPHER_STRINGS>) を
参照してください。

=begin original

Unless you fail to contact your peer because of no shared ciphers it is
recommended to leave this option at the default setting. The default setting
prefers ciphers with forward secrecy, disables anonymous authentication and
disables known insecure ciphers like MD5, DES etc. This gives a grade A result
at the tests of SSL Labs.
To use the less secure OpenSSL builtin default (whatever this is) set
SSL_cipher_list to ''.

=end original

共通の暗号がないために相手先との接続が失敗する場合を除いて、
このオプションをデフォルト設定のままにすることを勧めます。
デフォルト設定は前方秘匿性をもつ暗号を優先し、
無名認証を無効化し、MD5, DES などの安全でないことが知られている暗号を
無効化します。
これは SSL Labs のテストでグレード A を取っています。
安全性の低い OpenSSL 組み込みのデフォルト(これが何であれ)を使用するには、
SSL_cipher_list に '' を設定します。

=item SSL_honor_cipher_order

=begin original

If this option is true the cipher order the server specified is used instead
of the order proposed by the client. This option defaults to true to make use of
our secure cipher list setting.

=end original

このオプションが真の場合、クライアントによって提示された順序ではなく、
サーバが指定した暗号順序が使用されます。
このオプションのデフォルトは真で、私たちのセキュアな暗号リスト設定を
使います。

=item SSL_dh_file

=begin original

If you want Diffie-Hellman key exchange you need to supply a suitable file here
or use the SSL_dh parameter. See dhparam command in openssl for more
information.
To create a server which provides forward secrecy you need to either give the DH
parameters or (better, because faster) the ECDH curve.

=end original

Diffie-Hellman 鍵交換を行いたい場合、ここで適切なファイルを指定するか
SSL_dh 引数を使う必要があります。
さらなる情報については openssl の dhparam コマンドを参照してください。
前方秘匿性を持つサーバを作るには、
DH 引数か、(より高速なのでより好ましい) ECDH 曲線のどちらかを
指定する必要があります。

=item SSL_dh

=begin original

Like SSL_dh_file, but instead of giving a file you use a preloaded or generated
DH*.

=end original

SSL_dh_file と同様ですが、ファイルを指定する代わりに事前に読み込んだか
生成した DH* を使います。

=item SSL_verify_mode

=begin original

This option sets the verification mode for the peer certificate.
You may combine SSL_VERIFY_PEER (verify_peer), SSL_VERIFY_FAIL_IF_NO_PEER_CERT
(fail verification if no peer certificate exists; ignored for clients),
SSL_VERIFY_CLIENT_ONCE (verify client once; ignored for clients).
See OpenSSL man page for SSL_CTX_set_verify for more information.

=end original

このオプションは相手の証明書のための確認モードを設定します。
SSL_VERIFY_PEER (相手を確認), SSL_VERIFY_FAIL_IF_NO_PEER_CERT
(相手の証明書がなければ確認失敗;クライアントに対しては無視),
SSL_VERIFY_CLIENT_ONCE (一度、クライアントは確認;
クライアントに対しては無視) を組み合わせることができます。
さらなる情報については OpenSSL man ページの SSL_CTX_set_verify を
参照してください。

=item SSL_verify_callback

=begin original

If you want to verify certificates yourself, you can pass a sub reference along
with this parameter to do so.  When the callback is called, it will be passed:

=end original

証明書を自分で検証する場合は、このパラメータとともにサブルーチン参照を渡して
検証できます。
コールバックが呼び出されると、次のものが渡されます:

=over 4

=item 1.
a true/false value that indicates what OpenSSL thinks of the certificate,

(OpenSSL が証明書について認識している内容を示す真偽値)

=item 2.
a C-style memory address of the certificate store,

(証明書ストアの C 形式のメモリアドレス)

=item 3.
a string containing the certificate's issuer attributes and owner attributes,
and

(証明書の発行者属性と所有者属性を含む文字列)

=item 4.
a string containing any errors encountered (0 if no errors).

(発生したエラーを含む文字列(エラーがない場合は 0))

=item 5.
a C-style memory address of the peer's own certificate (convertible to
PEM form with Net::SSLeay::PEM_get_string_X509()).

(相手自身の証明書の C 形式のメモリアドレス (Net::SSLeay::PEM_get_string_X509() で PEM 形式に変換可能))

=back

=begin original

The function should return 1 or 0, depending on whether it thinks the
certificate is valid or invalid.  The default is to let OpenSSL do all of the
busy work.

=end original

この関数は、証明書が有効であると認識しているか無効であると
認識しているかに応じて、1 または 0 を返します。
デフォルトでは、OpenSSL が忙しい作業をすべて実行します。

=begin original

The callback will be called for each element in the certificate chain.

=end original

コールバックは、証明書チェーン内の各要素に対して呼び出されます。

=begin original

See the OpenSSL documentation for SSL_CTX_set_verify for more information.

=end original

SSL_CTX_set_verify の詳細については、OpenSSL のマニュアルを参照してください。

=item SSL_verifycn_scheme

=begin original

The scheme is used to correctly verify the identity inside the certificate
by using the hostname of the peer.
See the information about the verification schemes in B<verify_hostname>.

=end original

スキーマは、ピアのホスト名を使うことによって、証明書の中の
身元を検証するために使われます。
B<verify_hostname> の検証スキームに関する情報を参照してください。

=item SSL_verifycn_name

=begin original

Set the name which is used in verification of hostname. If SSL_verifycn_scheme
is set and no SSL_verifycn_name is given it will try to use SSL_hostname or
PeerHost and PeerAddr settings and fail if no name can be determined.
If SSL_verifycn_scheme is not set it will use a default scheme and warn if it
cannot determine a hostname, but it will not fail.

=end original

ホスト名の検証に使用される名前を設定します。
SSL_verifycn_scheme が設定されていて、SSL_verifycn_name が
指定されていない場合、SSL_hostname または PeerHost と PeerAddr の設定を
使用しようとしますが、名前が決定できない場合は失敗します。
SSL_verifycn_scheme が設定されていない場合はデフォルトのスキームを使い、
ホスト名が決定できない場合は警告されますが、失敗はしません。

=begin original

Using PeerHost or PeerAddr works only if you create the connection directly
with C<< IO::Socket::SSL->new >>, if an IO::Socket::INET object is upgraded
with B<start_SSL> the name has to be given in B<SSL_verifycn_name> or
B<SSL_hostname>.

=end original

PeerHost または PeerAddr の使用は、C<< IO::Socket::SSL->new >> で
直接接続を作成する場合にのみ機能します;
IO::Socket::INET オブジェクトが B<start_SSL> でアップグレードされる場合、
名前は B<SSL_verifycn_name> または B<SSL_hostname> で指定する必要があります。

=item SSL_check_crl

=begin original

If you want to verify that the peer certificate has not been revoked
by the signing authority, set this value to true. OpenSSL will search
for the CRL in your SSL_ca_path, or use the file specified by
SSL_crl_file.  See the Net::SSLeay documentation for more details.
Note that this functionality appears to be broken with OpenSSL <
v0.9.7b, so its use with lower versions will result in an error.

=end original

ピア証明書が署名機関によって取り消されていないことを確認する場合は、
この値を真に設定します;
OpenSSL は SSL_ca_path で CRL を検索するか、SSL_crl_file で
指定されたファイルを使用します。
詳細は、Net::SSLeay の文書を参照してください。
この機能は OpenSSL < v0.9.7b では壊れているように見えるため、
下位バージョンで使用するとエラーが発生することに注意してください。

=item SSL_crl_file

=begin original

If you want to specify the CRL file to be used, set this value to the
pathname to be used.  This must be used in addition to setting
SSL_check_crl.

=end original

使用する CRL ファイルを指定する場合は、この値を使用するパス名に設定します。
これは、SSL_check_crl の設定に加えて使用する必要があります。

=item SSL_reuse_ctx

=begin original

If you have already set the above options for a previous instance of
IO::Socket::SSL, then you can reuse the SSL context of that instance by passing
it as the value for the SSL_reuse_ctx parameter.  You may also create a
new instance of the IO::Socket::SSL::SSL_Context class, using any context
options that you desire without specifying connection options, and pass that
here instead.

=end original

上記のオプションを、IO::Socket::SSL の前のインスタンスのために
設定していれば、それを SSL_reuse_ctx パラメータの値として渡すことにより、
そのインスタンスの SSL コンテキストを再利用することができます。
また、接続オプションを指定せずに、ここで渡すことで、
望みのコンテキストオプションを使った IO::Socket::SSL::SSL_Context クラスの
新しいインスタンスを作ることもできます。

=begin original

If you use this option, all other context-related options that you pass
in the same call to new() will be ignored unless the context supplied was
invalid.  Note that, contrary to versions of IO::Socket::SSL below v0.90, a
global SSL context will not be implicitly used unless you use the
set_default_context() function.

=end original

このオプションを使うと、new() への同じ呼び出しで渡した、コンテキストに関連した
その他全てのオプションは、渡されたコンテキストが無効でない限り、無視されます。
v0.90 より前の IO::Socket::SSL とは反対に、set_default_context() 関数を
使わない限り、グローバルな SSL コンテキストは暗黙のうちには
使われないことに注意してください。

=item SSL_create_ctx_callback

=begin original

With this callback you can make individual settings to the context after it
got created and the default setup was done.
The callback will be called with the CTX object from Net::SSLeay as the single
argument.

=end original

このコールバックを使用すると、コンテキストが作成され、
デフォルトの設定が完了した後に、コンテキストに対して
個別の設定を行うことができます。
コールバックは、Net::SSLeay からの CTX オブジェクトを
単一の引数として呼び出します。

=begin original

Example for limiting the server session cache size:

=end original

サーバーセッションのキャッシュサイズを制限する例:

  SSL_create_ctx_callback => sub {
      my $ctx = shift;
      Net::SSLeay::CTX_sess_set_cache_size($ctx,128);
  }

=item SSL_session_cache_size

=begin original

If you make repeated connections to the same host/port and the SSL renegotiation
time is an issue, you can turn on client-side session caching with this option
by specifying a positive cache size.  For successive connections, pass the
SSL_reuse_ctx option to the new() calls (or use set_default_context()) to make
use of the cached sessions.  The session cache size refers to the number of
unique host/port pairs that can be stored at one time; the oldest sessions in
the cache will be removed if new ones are added.

=end original

同じホスト/ポートに繰り返し接続し、SSL 再ネゴシエーション時間が
問題になる場合は、正のキャッシュサイズを指定して、このオプションで
クライアント側のセッションキャッシュをオンにできます。
連続した接続の場合は、SSL_reuse_ctx オプションを new() 呼び出しに渡して
(または set_default_context() を使用して)、
キャッシュされたセッションを利用します。
セッションキャッシュサイズは、一度に格納できる一意の
ホスト/ポートペアの数を示します;
新しいセッションが追加されると、キャッシュ内の
最も古いセッションが削除されます。

=begin original

This option does not effect the session cache a server has for it's clients,
e.g. it does not affect SSL objects with SSL_server set.

=end original

このオプションは、サーバーがそのクライアントに対して持っている
セッションキャッシュには影響しません;
たとえば、SSL_server が設定されている SSL オブジェクトには影響しません。

=item SSL_session_cache

=begin original

Specifies session cache object which should be used instead of creating a new.
Overrules SSL_session_cache_size.
This option is useful if you want to reuse the cache, but not the rest of
the context.

=end original

新規作成のかわりに使用するセッションキャッシュオブジェクトを指定します。
SSL_session_cache_size を上書きします。
このオプションは、キャッシュを再利用するが、残りのコンテキストは
再利用しない場合に便利です。

=begin original

A session cache object can be created using
C<< IO::Socket::SSL::Session_Cache->new( cachesize ) >>.

=end original

セッションキャッシュオブジェクトは、
C<< IO::Socket::SSL::Session_Cache->new(cachesize)>> を使って作成できます。

=begin original

Use set_default_session_cache() to set a global cache object.

=end original

グローバルキャッシュオブジェクトを設定するには、
set_default_session_cache() を使用します。

=item SSL_session_id_context

=begin original

This gives an id for the servers session cache. It's necessary if you want
clients to connect with a client certificate. If not given but SSL_verify_mode
specifies the need for client certificate a context unique id will be picked.

=end original

これにより、サーバーのセッションキャッシュの ID が指定されます。
これは、クライアントがクライアント証明書を使用して接続する場合に必要です。
指定されていない場合でも、SSL_verify_mode がクライアント証明書の必要性を
指定している場合は、コンテキスト固有の ID が選択されます。

=item SSL_error_trap

=begin original

When using the accept() or connect() methods, it may be the case that the
actual socket connection works but the SSL negotiation fails, as in the case of
an HTTP client connecting to an HTTPS server.  Passing a subroutine ref attached
to this parameter allows you to gain control of the orphaned socket instead of
having it be closed forcibly.
The subroutine, if called, will be passed two parameters:
a reference to the socket on which the SSL negotiation failed and the full
text of the error message.

=end original

accept() または connect() メソッドを使用する場合、HTTP クライアントが
HTTPS サーバーに接続する場合のように、実際のソケット接続は機能するが、
SSL ネゴシエーションが失敗する場合があります。
このパラメータに付加されたサブルーチンリファレンスを渡すと、
強制的に閉じるのではなく、孤立したソケットを制御できます。
サブルーチンが呼び出されると、二つのパラメータが渡されます:
一つは SSL ネゴシエーションが失敗したソケットへの参照で、もう1つは
エラーメッセージの全文です。

=item SSL_npn_protocols

=begin original

If used on the server side it specifies list of protocols advertised by SSL
server as an array ref, e.g. ['spdy/2','http1.1'].
On the client side it specifies the protocols offered by the client for NPN
as an array ref.
See also method C<next_proto_negotiated>.

=end original

サーバ側で使用する場合は、SSL サーバによってアドバタイズされるプロトコルの
リストを配列リファレンスとして指定します(例: ['spdy/2','http1.1'])。
クライアント側では、クライアントが NPN 用に提供するプロトコルを
配列リファレンスとして指定します。
C<next_proto_negotiated> メソッドも参照してください。

=begin original

Next Protocol Negotioation (NPN) is available with Net::SSLeay 1.46+ and
openssl-1.0.1+.
To check support you might call C<IO::Socket::SSL->can_npn()>.
If you use this option with an unsupported Net::SSLeay/OpenSSL it will
throw an error.

=end original

Next Protocol Negotiation(NPN) は、Net::SSLeay 1.46+ および
openssl-1.0.1+ で使用できます。
サポートをチェックするためには、C<IO::Socket::SSL->can_npn()> を
呼び出せます。
未対応の Net::SSLeay/OpenSSL でこのオプションを使うと、
エラーが投げられます。

=back

=item B<close(...)>

=begin original

There are a number of nasty traps that lie in wait if you are not careful about
using close().  The first of these will bite you if you have been using
shutdown() on your sockets.  Since the SSL protocol mandates that a SSL "close
notify" message be sent before the socket is closed, a shutdown() that closes
the socket's write channel will cause the close() call to hang.  For a similar
reason, if you try to close a copy of a socket (as in a forking server) you will
affect the original socket as well.
To get around these problems, call close with an object-oriented syntax
(e.g. $socket->close(SSL_no_shutdown => 1))
and one or more of the following parameters:

=end original

close() を使うことについて注意しなければ、wait に関連していくつかの
やっかいな罠があります。
まず最初にソケットで shutdown() を使っていると、これにより
困ったことになります。
SSL プロトコルはソケットをクローズ前に SSL "close notify" メッセージが
送信されるよう権限を与え、ソケットの書込みチャネルをクローズする
shutdown() は close() 呼び出しをハングさせてしまいます。
同じような理由で、(サーバを fork するとき)ソケットのコピーを
close しようとすると、元のソケットにも影響を与えます。
これらの問題を回避するため、
以下のパラメータの 1 つあるいは複数でオブジェクト指向の書き方
(例えば socket->close(SSL_no_shutdown => 1)) で close() を
呼び出してください。

=over 2

=item SSL_no_shutdown

=begin original

If set to a true value, this option will make close() not use the SSL_shutdown()
call on the socket in question so that the close operation can complete without
problems if you have used shutdown() or are working on a copy of a socket.

=end original

true 値に設定すると、このオプションは、shutdown() やソケットのコピーで
動いているならば、close() に、close 操作が問題なく完了できるよう、
疑わしいソケットに対して SSL_shutdown() を使わないようにさせます。

=item SSL_fast_shutdown

=begin original

If set to true only a unidirectional shutdown will be done, e.g. only the
close_notify (see SSL_shutdown(3)) will be sent. Otherwise a bidirectional
shutdown will be done where it waits for the close_notify of the peer too.

=end original

真に設定した場合、一方向のシャットダウンのみが行われます;
例えば、close_notify(SSL_shutdown(3) を参照)のみが送られます。
それ以外の場合は、双方向のシャットダウンが行われます;
相手側の close_notify も待ちます。

=item SSL_ctx_free

=begin original

If you want to make sure that the SSL context of the socket is destroyed when
you close it, set this option to a true value.

=end original

それをクローズするとき、そのソケットの SSL コンテキストが破壊されることを
確実にしたければ、このオプションを true 値に設定してください。

=back

=item B<peek( BUF, LEN, [ OFFSET ])>

=begin original

This function has exactly the same syntax as B<sysread>, and performs nearly the
same task but will not advance the read position so that successive calls to
peek() with the same arguments will return the same results.  This function
requires OpenSSL 0.9.6a or later to work.

=end original

この関数は B<sysread> と全く同じ書き方をします。
そしてほとんど同じ仕事を行います。
しかし連続して同じ引数で peek() を呼び出すと同じ結果が返るように、
読み込み位置を進めません。
この関数が機能するためには、OpenSSL 0.9.6a 以降が必要です。

=item B<pending()>

=item B<get_cipher()>

=begin original

Returns the string form of the cipher that the IO::Socket::SSL object is using.

=end original

IO::Socket::SSL が使っている暗号を文字列の形で返します。

=item B<dump_peer_certificate()>

=begin original

Returns a parsable string with select fields from the peer SSL certificate.
This method directly returns the result of the dump_peer_certificate() method of
Net::SSLeay.

=end original

相手の SSL 証明書から選択フィールドが入った解析可能な文字列を返します。
このメソッドは Net::SSLeay の dump_peer_certificate() メソッドの結果を直接、
返します。

=item B<peer_certificate($field;[$refresh])>

=begin original

If a peer certificate exists, this function can retrieve values from it.
If no field is given the internal representation of certificate from Net::SSLeay
is returned.
If refresh is true it will not used a cached version, but check again in case
the certificate of the connection has changed due to renegotiation.

=end original

相手の証明書があれば、この関数はそれから値を取り出します。
フィールドが指定されなかった場合、 Net::SSLeay からの証明書の
内部表現が返されます。
refresh が真なら、キャッシュ版は使いませんが、
接続の証明書が再ネゴシエーションのために変更された場合は再びチェックします。

=begin original

The following fields can be queried:

=end original

以下のフィールドを問い合わせることができます:

=over 8

=item authority (alias issuer)

=begin original

The certificate authority which signed the certificate.

=end original

証明書に署名している認証局。

=item owner (alias subject)

=begin original

The owner of the certificate.

=end original

証明書の発行者。

=item commonName (alias cn) - only for Net::SSLeay version >=1.30

=begin original

The common name, usually the server name for SSL certificates.

=end original

一般名; 通常は SSL 証明書のサーバ名。

=item subjectAltNames - only for Net::SSLeay version >=1.33

=begin original

Alternative names for the subject, usually different names for the same
server, like example.org, example.com, *.example.com.

=end original

サブジェクトの代替名。
通常は、example.org, example.com, *.example.com など、同じサーバに対して
異なる名前です。

=begin original

It returns a list of (typ,value) with typ GEN_DNS, GEN_IPADD etc (these
constants are exported from IO::Socket::SSL).
See Net::SSLeay::X509_get_subjectAltNames.

=end original

typ GEN_DNS, GEN_IPADD などを含む(typ、value)のリストを返します
(これらの定数は IO::Socket::SSL からエクスポートされます)。
Net::SSLeay::X509_get_subjectAltNames を参照してください。

=back

=item B<verify_hostname($hostname,$scheme,$publicsuffix)>

=begin original

This verifies the given hostname against the peer certificate using the
given scheme. Hostname is usually what you specify within the PeerAddr.
See the C<SSL_verifycn_publicsuffix> parameter for an explanation of suffix
checking and for the possible values.

=end original

これは、指定されたスキームを使用して、ピア証明書に対して
指定されたホスト名を検証します。
ホスト名は通常、PeerAddr 内で指定するものです。
接頭辞チェックと取りうる値に関する説明については
C<SSL_verifycn_publicsuffix> 引数を参照してください。

=begin original

Verification of hostname against a certificate is different between various
applications and RFCs. Some scheme allow wildcards for hostnames, some only
in subjectAltNames, and even their different wildcard schemes are possible.
RFC 6125 provides a good overview.

=end original

証明書に対するホスト名の検証は、さまざまなアプリケーションおよび
RFC 間で異なります。
スキームによっては、ホスト名にワイルドカードを使用できるものもあれば、
subjectAltNames にのみ使用できるものもあります;
また、異なるワイルドカードスキームも可能です。
RFC 6125 はよい外観を提供します。

=begin original

To ease the verification the following schemes are predefined (both protocol
name and rfcXXXX name can be used):

=end original

検証を容易にするために、次のスキームが事前定義されています
(プロトコル名と rfcXXXX 名の両方が使えます):

=over 8

=item rfc2818, xmpp (rfc3920), ftp (rfc4217)

=begin original

Extended wildcards in subjectAltNames and common name are possible, e.g.
*.example.org or even www*.example.org. The common
name will be only checked if no DNS names are given in subjectAltNames.

=end original

subjectAltNames には、*.example.org や www*.example.org などの
拡張ワイルドカードと共通名を使えます。
共通名は、subjectAltNames に DNS 名が指定されていない場合にのみ
チェックされます。

=item smtp (rfc2595), imap, pop3, acap (rfc4642), netconf (rfc5538), syslog (rfc5425), snmp (rfc5953)

=begin original

Simple wildcards in subjectAltNames are possible, e.g. *.example.org matches
www.example.org but not lala.www.example.org. If nothing from subjectAltNames
match it checks against the common name, where wildcards are also allowed to
match the full leftmost label.

=end original

subjectAltNames には単純なワイルドカードを使えます;
たとえば、*.example.org は www.example.org と一致しますが、
lala.www.example.org とは一致しません。
subjectAltNames から何も一致しない場合は、共通名と照合されます;
完全な左端ラベルとのマッチングにワイルドカードも使えます。

=item none

=begin original

No verification will be done.
Actually is does not make any sense to call verify_hostname in this case.

=end original

検証は行われません。
実際には、この場合に verify_hostname を呼び出しても意味がありません。

=back

=begin original

The scheme can be given either by specifying the name for one of the above
predefined schemes, or by using a hash which can have the following keys and
values:

=end original

スキームを指定するには、上記の定義済みスキームのいずれかの名前を指定するか、
次のキーと値を持つハッシュを使います。

=over 8

=item check_cn:  0|'always'|'when_only'

=begin original

Determines if the common name gets checked. If 'always' it will always be
checked (like in ldap), if 'when_only' it will only be checked if no names are
given in subjectAltNames (like in http), for any other values the common name
will not be checked.

=end original

共通名がチェックされるかどうかを決定します。
'always' の場合は常にチェックされ(ldap の場合と同様)、
'when_only' の場合は subjectAltNames に名前が指定されていない場合にのみ
チェックされ(http の場合と同様)、その他の値の場合は共通名は
チェックされません。

=item wildcards_in_alt: 0|'full_label'|'anywhere'

=begin original

Determines if and where wildcards in subjectAltNames are possible. If
'full_label' only cases like *.example.org will be possible (like in ldap), for
'anywhere' www*.example.org is possible too (like http), dangerous things like
but www.*.org or even '*' will not be allowed.
For compatibility with older versions 'leftmost' can be given instead of
'full_label'.

=end original

subjectAltNames でワイルドカードを使用できるかどうか、
および使用できる場合はどこで使用できるかを決定します。
'leftmost' の場合は *.example.org のようなケースのみが可能で
(ldap の場合のように)、'anywhere' の場合は www*.example.org も可能で
(http の場合のように)、www.*.org や '*' のような危険なものは許可されません。
古いバージョンとの互換性のために、'full_label' の代わりに
'leftmost' を指定することもできます。

=item wildcards_in_cn: 0|'full_label'|'anywhere'

=begin original

Similar to wildcards_in_alt, but checks the common name. There is no predefined
scheme which allows wildcards in common names.

=end original

wildcards_in_alt と似ていますが、共通名をチェックします。
共通名にワイルドカードを使用できる事前定義されたスキームはありません。

=item callback: \&coderef

=begin original

If you give a subroutine for verification it will be called with the arguments
($hostname,$commonName,@subjectAltNames), where hostname is the name given for
verification, commonName is the result from peer_certificate('cn') and
subjectAltNames is the result from peer_certificate('subjectAltNames').

=end original

検証用のサブルーチンを指定すると、
引数 ($hostname, $commonName, @subjectAltNames) を指定して呼び出されます;
ここで、hostname は検証用に指定された名前、
commonName は peer_certificate('cn') の結果、
subjectAltNames は peer_certificate('subjectAltNames') の結果です。

=begin original

All other arguments for the verification scheme will be ignored in this case.

=end original

この場合、検証スキームの他のすべての引数は無視されます。

=back

=item B<next_proto_negotiated()>

=begin original

This method returns the name of negotiated protocol - e.g. 'http/1.1'. It works
for both client and server side of SSL connection.

=end original

このメソッドは、ネゴシエートされたプロトコルの名前 ('http/1.1' など) を
返します。
SSL 接続のクライアント側とサーバー側の両方で機能します。

=begin original

NPN support is available with Net::SSLeay 1.46+ and openssl-1.0.1+.
To check support you might call C<IO::Socket::SSL->can_npn()>.

=end original

NPN のサポートは、Net::SSLeay 1.46+ と openssl-1.0.1+ で利用できます。
サポートをチェックするためには、C<IO::Socket::SSL->can_npn()> を
呼び出せます。

=item B<errstr()>

=begin original

Returns the last error (in string form) that occurred.	If you do not have a
real object to perform this method on, call IO::Socket::SSL::errstr() instead.

=end original

発生した最後のエラーを(文字列形式で)返します。
このメソッドを実行するための
本物のオブジェクトを持っていなければ、代わりに IO::Socket::SSL::errstr() を
呼び出してください。

=begin original

For read and write errors on non-blocking sockets, this method may include the
string C<SSL wants a read first!> or C<SSL wants a write first!> meaning that
the other side is expecting to read from or write to the socket and wants to be
satisfied before you get to do anything. But with version 0.98 you are better
comparing the global exported variable $SSL_ERROR against the exported symbols
SSL_WANT_READ and SSL_WANT_WRITE.

=end original

ブロックしていないソケットの読み込みや書込みに、このメソッドは、
もう一方の側がソケットからの読み込みや書き込みを待っていて、あなたが
何かする前に満足させて欲しいと思っていることを意味する、
C<SSL wants a read first!> あるいは C<SSL wants a write first!> を
文字列に入れるかもしれません。
しかしバージョン 0.98 からは、グローバルにエクスポートされた変数
$SSL_ERROR を、エクスポートされたシンボル SSL_WANT_READ および
SSL_WANT_WRITE と比較した方がよいです。

=item B<opened()>

=begin original

This returns false if the socket could not be opened, 1 if the socket could be
opened and the SSL handshake was successful done and -1 if the underlying
IO::Handle is open, but the SSL handshake failed.

=end original

ソケットを開くことができなかった場合は偽、
ソケットを開くことができて SSL ハンドシェイクが成功した場合は 1、
基礎となる IO::Handle は開いているが SSL ハンドシェイクが失敗した場合は
-1 を返します。

=item B<< IO::Socket::SSL->start_SSL($socket, ... ) >>

=begin original

This will convert a glob reference or a socket that you provide to an
IO::Socket::SSL object.	 You may also pass parameters to specify context or
connection options as with a call to new().  If you are using this function on
an accept()ed socket, you must set the parameter "SSL_server" to 1, i.e.
IO::Socket::SSL->start_SSL($socket, SSL_server => 1).  If you have a class that
inherits from IO::Socket::SSL and you want the $socket to be blessed into your
own class instead, use MyClass->start_SSL($socket) to achieve the desired
effect.

=end original

これは、あなたが与えた glob リファレンスやソケットを
IO::Socket::SSL オブジェクトに変換します。
コンテキストや new() を呼び出すときのような接続オプションを指定するため、
パラメータを渡すこともできます。
もしこの関数を accept() されたソケットに使うのであれば、
パラメータ "SSL_server" を 1 に設定しなければなりません。
つまり IO::Socket::SSL->start_SSL($socket, SSL_server => 1) です。
IO::Socket::SSL から継承したクラスを持っていて、
代わりに自分自身のクラスで $socket を bless したいときは、
望みの効果を得るために MyClass->start_SSL($socket) を使ってください。

=begin original

Note that if start_SSL() fails in SSL negotiation, $socket will remain blessed
in its original class.	 For non-blocking sockets you better just upgrade the
socket to IO::Socket::SSL and call accept_SSL or connect_SSL and the upgraded
object. To just upgrade the socket set B<SSL_startHandshake> explicitly to 0. If
you call start_SSL w/o this parameter it will revert to blocking behavior for
accept_SSL and connect_SSL.

=end original

start_SSL() が SSL ネゴシエーションに失敗した場合、
$socket は元のクラスで bless されたままになることに注意してください。
非ブロッキングソケットの場合は、ソケットを IO::Socket::SSL に
アップグレードし、accept_SSL または connect_SSL と
アップグレードされたオブジェクトを呼び出します。
ソケットをアップグレードするには、B<SSL_startHandshake> を
明示的に 0 に設定します。
このパラメータを使用せずに start_SSL を呼び出すと、
accept_SSL と connect_SSL のブロッキング動作に戻ります。

=begin original

If given the parameter "Timeout" it will stop if after the timeout no SSL
connection was established. This parameter is only used for blocking sockets, if
it is not given the default Timeout from the underlying IO::Socket will be
used.

=end original

パラメータ "Timeout" を指定すると、タイムアウト後に
SSL 接続が確立されなかった場合に停止します。
このパラメータは、ソケットのブロックにのみ使われます;
このパラメータが指定されていない場合は、
基礎となる IO::Socket からのデフォルトの Timeout が使用されます。

=item B<stop_SSL(...)>

=begin original

This is the opposite of start_SSL(), connect_SSL() and accept_SSL(), e.g. it
will shutdown the SSL connection and return to the class before start_SSL(). It
gets the same arguments as close(), in fact close() calls stop_SSL() (but
without downgrading the class).

=end original

これは start_SSL(), connect_SSL(), accept_SSL() とは逆です;
例えば、start_SSL() の前に SSL 接続をシャットダウンしてクラスに戻ります。
close() と同じ引数を受け取ります;
実際に close() は stop_SSL() を呼び出します
(ただし、クラスをダウングレードすることはありません)。

=begin original

Will return true if it succeeded and undef if failed. This might be the case for
non-blocking sockets. In this case $! is set to EAGAIN and the ssl error to
SSL_WANT_READ or SSL_WANT_WRITE. In this case the call should be retried again
with the same arguments once the socket is ready.

=end original

成功した場合は真を返し、失敗した場合は undef を返します。
これは、非ブロッキングソケットの場合に当てはまります。
この場合、$! は EAGAIN に設定され、ssl エラーは SSL_WANT_READ または
SSL_WANT_WRITE に設定されます。
この場合、ソケットの準備ができたら、同じ引数で呼び出しを
再試行する必要があります。

=item B<< IO::Socket::SSL->new_from_fd($fd, [mode], %sslargs) >>

=begin original

This will convert a socket identified via a file descriptor into an SSL socket.
Note that the argument list does not include a "MODE" argument; if you supply
one, it will be thoughtfully ignored (for compatibility with IO::Socket::INET).
Instead, a mode of '+<' is assumed, and the file descriptor passed must be able
to handle such I/O because the initial SSL handshake requires bidirectional
communication.

=end original

これは、ファイル記述子を介して識別されるソケットを SSL ソケットに変換します。
引数リストには "MODE" 引数が含まれていないことに注意してください;
これを指定すると、(IO::Socket::INET との互換性のために)慎重に無視されます。
代わりに、'+<' のモードが想定され、最初の SSL ハンドシェイクには双方向通信が
必要であるため、渡されるファイル記述子はそのような I/O を処理できる必要があります。

=item B<IO::Socket::SSL::set_default_context(...)>

=begin original

You may use this to make IO::Socket::SSL automatically re-use a given context
(unless specifically overridden in a call to new()).
It accepts one argument, which should be either an IO::Socket::SSL object or an
IO::Socket::SSL::SSL_Context object.
See the SSL_reuse_ctx option of new() for more details.
Note that this sets the default context globally, so use with caution (esp. in
mod_perl scripts).

=end original

これを使用して、IO::Socket::SSL が特定のコンテキストを自動的に
再利用するようにすることができます(new() の呼び出しで特に上書きされない限り)。
これは一つの引数を受け入れます;
この引数は、IO::Socket::SSL オブジェクトまたは
IO::Socket::SSL::SSL_Context オブジェクトのいずれかである必要があります。
詳細については、new() の SSL_reuse_ctx オプションを参照してください。
これによりデフォルトのコンテキストがグローバルに設定されるため、
注意して使用してください(特に mod_perl スクリプトで)。

=item B<IO::Socket::SSL::set_default_session_cache(...)>

=begin original

You may use this to make IO::Socket::SSL automatically re-use a given session
cache (unless specifically overridden in a call to new()).
It accepts one argument, which should be an IO::Socket::SSL::Session_Cache
object or similar (e.g something which implements get_session and add_session
like IO::Socket::SSL::Session_Cache does).
See the SSL_session_cache option of new() for more details.
Note that this sets the default cache globally, so use with caution.

=end original

これを使用して、IO::Socket::SSL が指定されたセッションキャッシュを
自動的に再利用するようにすることができます
(new() の呼び出しで特に上書きされない限り)。
これは一つの引数を受け入れますが、これは
IO::Socket::SSL::Session_Cache オブジェクトまたは同様のもの
(例えば、IO::Socket::SSL::Session_Cache のように get_session と
add_session を実装するもの)である必要があります。
詳細については、new() の SSL_session_cache オプションを参照してください。
これによりデフォルトのキャッシュがグローバルに設定されるため、
注意して使用してください。

=item B<IO::Socket::SSL::set_defaults(%args)>

=begin original

With this function one can set defaults for all SSL_* parameter used for
creation of the context, like the SSL_verify* parameter. Any SSL_* parameter can
be given or the following short versions:

=end original

この関数を使うと、SSL_verify* パラメータのように、
コンテキストの作成に使用されるすべての SSL_* パラメータのデフォルトを
設定できます。
任意の SSL_* パラメータが指定でき、次の短縮版も使えます。

=over 8

=item mode - SSL_verify_mode

=item callback - SSL_verify_callback

=item scheme - SSL_verifycn_scheme

=item name - SSL_verifycn_name

=back

=back

=begin original

The following methods are unsupported (not to mention futile!) and
IO::Socket::SSL will emit a large CROAK() if you are silly enough to use them:

=end original

以下のメソッドは対応していません(役に立たないと
いっているわけではありません!)
そしてあなたがそれらを使うほどのオバカさんであれば、IO::Socket::SSL は
巨大な CROAK() を吐き出すことになります。

=over 4

=item truncate

=item stat

=item ungetc

=item setbuf

=item setvbuf

=item fdopen

=item send/recv

=begin original

Note that send() and recv() cannot be reliably trapped by a tied filehandle
(such as that used by IO::Socket::SSL) and so may send unencrypted data over the
socket.	 Object-oriented calls to these functions will fail, telling you to use
the print/printf/syswrite and read/sysread families instead.

=end original

send() と recv() は、tie されたファイルハンドル
(IO::Socket::SSL で使用されるものなど)では確実にトラップできないため、
暗号化されていないデータをソケット経由で送信する可能性があることに
注意してください。
これらの関数へのオブジェクト指向の呼び出しは失敗し、
代わりに print/printf/syswrite および read/sysread ファミリを
使用するように指示されます。

=back

=head1 DEPRECATIONS

(廃止予定)

=begin original

The following functions are deprecated and are only retained for compatibility:

=end original

以下の関数は廃止予定(deprecate)になり、互換性のためだけに維持されています:

=over 2

=item context_init()

=begin original

use the SSL_reuse_ctx option if you want to re-use a context

=end original

コンテキストを再利用したければ、SSL_reuse_ctx オプションを使ってください

=item socketToSSL() and socket_to_SSL()

=begin original

use IO::Socket::SSL->start_SSL() instead

=end original

代わりに IO::Socket::SSL->start_SSL() を使ってください

=item kill_socket()

=begin original

use close() instead

=end original

代わりに close() を使ってください

=item get_peer_certificate()

=begin original

use the peer_certificate() function instead.
Used to return X509_Certificate with methods subject_name and issuer_name.
Now simply returns $self which has these methods (although deprecated).

=end original

代わりに peer_certificate() 関数を使ってください。
X509_Certificateをメソッドsubject_nameおよびissuer_nameとともに返すために使われていました。
現在では、これらのメソッドを持つ$selfを返すだけです(ただし、これは廃止予定です)。

=item issuer_name()

=begin original

use peer_certificate( 'issuer' ) instead

=end original

代わりに peer_certificate( 'issuer' ) を使ってください

=item subject_name()

=begin original

use peer_certificate( 'subject' ) instead

=end original

代わりに peer_certificate( 'subject' ) を使ってください

=back

=head1 EXAMPLES

=begin original

See the 'example' directory, the tests in 't' and also the tools in 'util'.

=end original

'example'ディレクトリ、't' にあるテストと 'util' にあるツールをご覧ください。

=head1 BUGS

=begin original

Creating an IO::Socket::SSL object in one thread and closing it in another
thread will not work.

=end original

あるスレッドで IO::Socket::SSL オブジェクトを作成し、別のスレッドで
それを閉じることはできません。

=begin original

IO::Socket::SSL does not work together with Storable::fd_retrieve/fd_store.
See BUGS file for more information and how to work around the problem.

=end original

IO::Socket::SSLは、Storable::fd_retrieve/fd_store と連携して動作しません。
詳細および問題の回避方法については、BUGS ファイルを参照してください。

=begin original

Non-blocking and timeouts (which are based on non-blocking) are not
supported on Win32, because the underlying IO::Socket::INET does not support
non-blocking on this platform.

=end original

Win32 では、基礎となる IO::Socket::INET が非ブロッキングに対応していないため、
非ブロッキングと(非ブロッキングに基づく)タイムアウトは対応していません。

=begin original

If you have a server and it looks like you have a memory leak you might
check the size of your session cache. Default for Net::SSLeay seems to be
20480, see the example for SSL_create_ctx_callback for how to limit it.

=end original

サーバを使用していて、メモリリークが発生しているように見える場合は、
セッションキャッシュのサイズを確認してください。
Net::SSLeay のデフォルトは 20480 のようです。
制限方法については、SSL_create_ctx_callback の例を参照してください。

=head1 SEE ALSO

IO::Socket::INET, IO::Socket::INET6, IO::Socket::IP, Net::SSLeay.

=head1 AUTHORS

=begin original

Steffen Ullrich, <sullr at cpan.org> is the current maintainer.

=end original

Steffen Ullrich, <sullr at cpan.org> は現在のメンテナです。

=begin original

Peter Behroozi, <behrooz at fas.harvard.edu> (Note the lack of an "i" at the end of "behrooz")

=end original

Peter Behroozi, <behrooz at fas.harvard.edu>
("behrooz" の最後の "i" がないことに注意)

=begin original

Marko Asplund, <marko.asplund at kronodoc.fi>, was the original author of IO::Socket::SSL.

=end original

Marko Asplund, <marko.asplund at kronodoc.fi> は
IO::Socket::SSL の元のメンテナです。

=begin original

Patches incorporated from various people, see file Changes.

=end original

様々な人々から組み込まれたパッチについては Changes ファイルを
参照してください。

=head1 COPYRIGHT

=begin original

The original versions of this module are Copyright (C) 1999-2002 Marko Asplund.

=end original

このモジュールの元のバージョンは:
Copyright (C) 1999-2002 Marko Asplund.

=begin original

The rewrite of this module is Copyright (C) 2002-2005 Peter Behroozi.

=end original

このモジュールの書き換えは:
Copyright (C) 2002-2005 Peter Behroozi.

Versions 0.98 and newer are Copyright (C) 2006-2014 Steffen Ullrich.

This module is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.

=begin meta

Translate: hippo2000
Update: SHIRAKATA Kentaro <argrath@ub32.org> (1.33-)
Status: in progress

=end meta

