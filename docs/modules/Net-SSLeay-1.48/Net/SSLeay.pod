
=encoding utf-8

=head1 NAME

=begin original

Net::SSLeay - Perl extension for using OpenSSL

=end original

Net::SSLeay - OpenSSL を使うための Perl 拡張

=head1 SYNOPSIS

  use Net::SSLeay qw(get_https post_https sslcat make_headers make_form);

  ($page) = get_https('www.bacus.pt', 443, '/');                 # Case 1

  ($page, $response, %reply_headers)
	 = get_https('www.bacus.pt', 443, '/',                   # Case 2
	 	make_headers(User-Agent => 'Cryptozilla/5.0b1',
			     Referer    => 'https://www.bacus.pt'
		));

  ($page, $result, %headers) =                                   # Case 2b
         = get_https('www.bacus.pt', 443, '/protected.html',
	      make_headers(Authorization =>
			   'Basic ' . MIME::Base64::encode("$user:$pass",''))
	      );

  ($page, $response, %reply_headers)
	 = post_https('www.bacus.pt', 443, '/foo.cgi', '',       # Case 3
		make_form(OK   => '1',
			  name => 'Sampo'
		));

  $reply = sslcat($host, $port, $request);                       # Case 4

  ($reply, $err, $server_cert) = sslcat($host, $port, $request); # Case 5

  $Net::SSLeay::trace = 2;  # 0=no debugging, 1=ciphers, 2=trace, 3=dump data

  Net::SSLeay::initialize(); # Initialize ssl library once

=head1 DESCRIPTION

=begin original

L<Net::SSLeay> module contains perl bindings to openssl (L<http://www.openssl.org|http://www.openssl.org>) library.

=end original

L<Net::SSLeay>モジュールには、openssl(L<http://www.openssl.org|http://www.openssl.org>)ライブラリへのperlバインディングが含まれています。
(TBR)

=begin original

B<COMPATIBILITY NOTE:> L<Net::SSLeay> cannot be built with pre-0.9.3 openssl. It is strongly recommended
to use at least 0.9.7 (as older versions are not tested during development). Some low level API functions
may be available with certain openssl versions.

=end original

B<互換性に関する注意:>L<Net::SSLeay>は、0.9.3より前のopensslでは構築できません。
少なくとも0.9.7を使用することを強くお勧めします(古いバージョンは開発中にテストされていないため)。
一部の低レベルAPI関数は、特定のopensslバージョンで使用できる場合があります。
(TBR)

=begin original

L<Net::SSLeay> module basically comprise of:

=end original

L<Net::SSLeay>モジュールは、基本的に次のもので構成されています。
(TBR)

=over

=item * High level functions for accessing web servers (by using HTTP/HTTPS)

=item * Low level API (mostly mapped 1:1 to openssl's C functions)

=item * Convenience functions (related to low level API but with more perl friendly interface)

=back

=begin original

There is also a related module called L<Net::SSLeay::Handle> included in this
distribution that you might want to use instead. It has its own pod
documentation.

=end original

あなたが代わりに使いたいかもしれない、この配布に
含まれている L<Net::SSLeay::Handle> という関連するモジュールもあります。
それは、それ独自の POD ドキュメントを持っています。

=head2 High level functions for accessing web servers

=begin original

This module offers some high level convenience functions for accessing
web pages on SSL servers (for symmetry, the same API is offered for
accessing http servers, too), an C<sslcat()> function for writing your own
clients, and finally access to the SSL api of the SSLeay/OpenSSL package
so you can write servers or clients for more complicated applications.

=end original

このモジュールは、SSL サーバ上の Web ページにアクセスするためのいくつかの
高レベルで便利な関数
(対称性のために、同じ API で http サーバへのアクセスも提供します)、
独自のクライアントを書くための C<sslcat()> 関数、そして最終的には
より複雑なアプリケーションのためにサーバやクライアントを書くことが
できるような SSLeay/OpenSSL パッケージの SSL api への
アクセスを提供します。

=begin original

For high level functions it is most convenient to import them into your
main namespace as indicated in the synopsis.

=end original

高レベルの関数については、概要で示したように、あなたの main 名前空間に
インポートすることが、とても便利でしょう。

=head3 Basic set of functions

=over

=item * get_https

=item * post_https

=item * put_https

=item * head_https

=item * do_https

=item * sslcat

=item * https_cat

=item * make_form

=item * make_headers

=back

=begin original

B<Case 1 (in SYNOPSIS)> demonstrates the typical invocation of get_https() to fetch an HTML
page from secure server. The first argument provides the hostname or IP
in dotted decimal notation of the remote server to contact. The second
argument is the TCP port at the remote end (your own port is picked
arbitrarily from high numbered ports as usual for TCP). The third
argument is the URL of the page without the host name part. If in
doubt consult the HTTP specifications at L<http://www.w3c.org>.

=end original

B<(SYNOPSIS の)ケース 1> はセキュアなサーバから HTML ページを取り出すための
get_https() の典型的な呼び出しを示しています。
最初の引数は接続するリモートのサーバの
ホスト名あるいは IP をドット区切られた数字による書き方によって与えます。
2 番目の引数はリモート側の TCP ポートです(あなた自身のポートは通常の
TCP のための大きな番号が振られたものから勝手に選択されます)。
3 番目の引数はホスト名の部分を抜いたページの URL です。
もし疑問があれば、L<http://www.w3c.org> にある HTTP の仕様を
あたってみてください。

=begin original

B<Case 2 (in SYNOPSIS)> demonstrates full fledged use of C<get_https()>. As can be seen,
C<get_https()> parses the response and response headers and returns them as
a list, which can be captured in a hash for later reference. Also a
fourth argument to C<get_https()> is used to insert some additional headers
in the request. C<make_headers()> is a function that will convert a list or
hash to such headers. By default C<get_https()> supplies C<Host> (to make
virtual hosting easy) and C<Accept> (reportedly needed by IIS) headers.

=end original

B<(SYNOPSIS の)ケース 2> は、完全に一人前の C<get_https()> の使い方を示しています。
ご覧になった通り、
C<get_https()> は応答と応答のヘッダを解析し、それをリストで返しています。
それらはハッシュや後者のリファレンスで捉えることができます。
また C<get_https()> の 4 番目の引数は、応答での追加のヘッダを挿入するために
使われます。
C<make_headers()> はリストやハッシュを、そのようなヘッダに変換する関数です。
デフォルトでは C<get_https()> は C<Host>(バーチャルホストを簡単に
行えるように)と C<Accept> (IIS が必要としているとのこと)ヘッダを提供します。

=begin original

B<Case 2b (in SYNOPSIS)> demonstrates how to get a password protected page. Refer to
the HTTP protocol specifications for further details (e.g. RFC-2617).

=end original

B<(SYNOPSIS の)ケース 2b> はパスワードで保護されているページを取得する方法を示しています。
更なる詳細に関しては、HTTP プロトコルの仕様を参照してください
(例えば RFC-2617)。

=begin original

B<Case 3 (in SYNOPSIS)> invokes C<post_https()> to submit a HTML/CGI form to a secure
server. The first four arguments are equal to C<get_https()> (note that
the empty string (C<''>) is passed as header argument).
The fifth argument is the
contents of the form formatted according to CGI specification. In this
case the helper function C<make_https()> is used to do the formatting,
but you could pass any string. C<post_https()> automatically adds
C<Content-Type> and C<Content-Length> headers to the request.

=end original

B<(SYNOPSIS の)ケース 3> は HTML/CGI フォームをセキュアなサーバで実行するために
C<post_https()> を呼び出します。
最初の 4 つの引数は C<get_https()> と同じです (空文字列(C<''>)が
ヘッダの引数として渡されていることに注意してください)。
5 番目の引数は CGI の仕様に従って形式が整えられたフォームの内容です。
この場合、そのように形式を整えるためにヘルパー関数 C<make_https()> が
使われますが、どのような文字列でも渡すことができます。
C<post_https()> は自動的にリクエストに C<Content-Type> と C<Content-Length>
ヘッダを付与します。

=begin original

B<Case 4 (in SYNOPSIS)> shows the fundamental C<sslcat()> function (inspired in spirit by
the C<netcat> utility :-). It's your swiss army knife that allows you to
easily contact servers, send some data, and then get the response. You
are responsible for formatting the data and parsing the response -
C<sslcat()> is just a transport.

=end original

B<(SYNOPSIS の)ケース 4> は、基本的な C<sslcat()> 関数を示しています(C<netcat>
ユーティリティに心を動かされました :-)。
これは単純にサーバに接続し、データを送信し、
それから応答を取得することを簡単にするスイスアーミーナイフのようなものです。
データの整形と応答の解析についてはあなたの責任です - C<sslcat()> は
単に転送するだけのものです。

=begin original

B<Case 5 (in SYNOPSIS)> is a full invocation of C<sslcat()> which allows the return of errors
as well as the server (peer) certificate.

=end original

B<(SYNOPSIS の)ケース 5> は、エラーだけでなくサーバ(相手側)証明書と同様も返すことを
可能にする、C<sslcat()> の完全な呼び出しです。

=begin original

The C<$trace> global variable can be used to control the verbosity of the
high level functions. Level 0 guarantees silence, level 1 (the default)
only emits error messages.

=end original

C<$trace> グローバル変数は高レベル関数の冗長さを制御するために使うことが
出来ます。
レベル 0 は何もいわないことを保証します。
レベル 1 (デフォルト) はエラーメッセージだけを吐き出します。

=head3 Alternate versions of high-level API

(高レベル API の代替版)

=over

=item * get_https3

=item * post_https3

=item * put_https3

=item * get_https4

=item * post_https4

=item * put_https4

=back

=begin original

The above mentioned functions actually return the response headers as
a list, which only gets converted to hash upon assignment (this
assignment looses information if the same header occurs twice, as may
be the case with cookies). There are also other variants of the
functions that return unprocessed headers and that return a reference
to a hash.

=end original

上記の関数は実際には応答ヘッダをリストで返します。
それは代入されたハッシュに変換されます
(もしクッキーの場合がそうであるかもしれないように同じヘッダが
2 回発生すると、この代入によって情報が失われるかもしれません)。
処理されていないヘッダとハッシュへのリファレンスを返す別の形の関数もあります。

  ($page, $response, @headers) = get_https('www.bacus.pt', 443, '/');
  for ($i = 0; $i < $#headers; $i+=2) {
      print "$headers[$i] = " . $headers[$i+1] . "\n";
  }

  ($page, $response, $headers, $server_cert)
    = get_https3('www.bacus.pt', 443, '/');
  print "$headers\n";

  ($page, $response, %headers_ref, $server_cert)
    = get_https4('www.bacus.pt', 443, '/');
  for $k (sort keys %{headers_ref}) {
      for $v (@{$headers_ref{$k}}) {
	  print "$k = $v\n";
      }
  }

=begin original

All of the above code fragments accomplish the same thing: display all
values of all headers. The API functions ending in "3" return the
headers simply as a scalar string and it is up to the application to
split them up. The functions ending in "4" return a reference to
a hash of arrays (see L<perlref> and L<perllol> if you are
not familiar with complex perl data structures). To access a single value
of such a header hash you would do something like

=end original

上記の全てのちょっとしたコードは、同じ事を実現します: ヘッダの全ての値を
表示します。
"3" で終わる API 関数はヘッダを単なるスカラーの文字列で返します。
アプリケーションがそれを分割することになります。
"4" で終わる関数は配列のハッシュへのリファレンスを返します(複雑な
perl データ構造体に精通していなければ L<perlref> と L<Lperllol>
マニュアルページをご覧ください)。
そのようなヘッダハッシュの1つの値にアクセスするためには、
以下のようにしてください:

  print $headers_ref{COOKIE}[0];

=begin original

Variants 3 and 4 also allow you to discover the server certificate
in case you would like to store or display it, e.g.

=end original

3 と 4 の形は、それを格納したり表示したいときサーバ証明書を見つけることも
可能にします。
例えば:

  ($p, $resp, $hdrs, $server_cert) = get_https3('www.bacus.pt', 443, '/');
  if (!defined($server_cert) || ($server_cert == 0)) {
      warn "Subject Name: undefined, Issuer  Name: undefined";
  } else {
      warn 'Subject Name: '
	  . Net::SSLeay::X509_NAME_oneline(
		 Net::SSLeay::X509_get_subject_name($server_cert))
	      . 'Issuer  Name: '
		  . Net::SSLeay::X509_NAME_oneline(
                         Net::SSLeay::X509_get_issuer_name($server_cert));
  }

=begin original

Beware that this method only allows after the fact verification of
the certificate: by the time C<get_https3()> has returned the https
request has already been sent to the server, whether you decide to
trust it or not. To do the verification correctly you must either
employ the OpenSSL certificate verification framework or use
the lower level API to first connect and verify the certificate
and only then send the http data. See the implementation of C<ds_https3()>
for guidance on how to do this.

=end original

この方法は証明書の確認の後にだけ可能になるということに注意してください:
そのときには、あなたが信用するかどうかに関わらず、C<get_https3()> は
サーバに送信された https リクエストを返してしまっています。
正しく確認するためには、OpenSSL 証明書確認フレームワークを採用するか、
最初に接続し、証明書を確認し、そのときにだけ http データを送信するため
低レベル API を利用するかのどちらかをする必要があります。
このやり方についてのガイドは C<ds_https3()> の実装をご覧ください。

=head3 Using client certificates

(クライアント証明書を使う)

=begin original

Secure web communications are encrypted using symmetric crypto keys
exchanged using encryption based on the certificate of the
server. Therefore in all SSL connections the server must have a
certificate. This serves both to authenticate the server to the
clients and to perform the key exchange.

=end original

セキュアな Web 通信はサーバの証明書をベースにした暗号を使って
交換された対称になった暗号鍵を使って暗号化されます。
このため全ての SSL の通信では、サーバは証明書を持っていなければなりません。
これはクライアントへのサーバの認証と鍵の交換の両方を提供します。

=begin original

Sometimes it is necessary to authenticate the client as well. Two
options are available: HTTP basic authentication and a client side
certificate. The basic authentication over HTTPS is actually quite
safe because HTTPS guarantees that the password will not travel in
the clear. Never-the-less, problems like easily guessable passwords
remain. The client certificate method involves authentication of the
client at the SSL level using a certificate. For this to work, both the
client and the server have certificates (which typically are
different) and private keys.

=end original

場合によってはクライアントも認証する必要があります。
二つの選択を利用できます: HTTP 基本認証とクライアント側の証明書です。
HTTPS がパスワードが平文で流れないことを保証するので、HTTPS 越しの
基本認証は実際には非常に安全です。
しかし、そうであったとしても簡単にわかるようなパスワードのような
問題は残ります。
クライアント証明書の方法には証明書を使った SSL レベルでのクライアントの
認証を意味します。
これが機能するためにはクライアントとサーバの両方が
(典型的には異なる)証明書と秘密鍵を持つ必要があります。

=begin original

The API functions outlined above accept additional arguments that
allow one to supply the client side certificate and key files. The
format of these files is the same as used for server certificates and
the caveat about encrypting private keys applies.

=end original

上記で概説された API 関数は、クライアント側の証明書と鍵ファイルを
提供することができる追加の引数を受け取ります。
これらのファイルの形式はサーバ証明書で使われているものと同じです。
そして秘密鍵の暗号化に関する注意も当てはまります。

  ($page, $result, %headers) =                                   # 2c
         = get_https('www.bacus.pt', 443, '/protected.html',
	      make_headers(Authorization =>
			   'Basic ' . MIME::Base64::encode("$user:$pass",'')),
	      '', $mime_type6, $path_to_crt7, $path_to_key8);

  ($page, $response, %reply_headers)
	 = post_https('www.bacus.pt', 443, '/foo.cgi',           # 3b
	      make_headers('Authorization' =>
			   'Basic ' . MIME::Base64::encode("$user:$pass",'')),
	      make_form(OK   => '1', name => 'Sampo'),
	      $mime_type6, $path_to_crt7, $path_to_key8);

=begin original

B<Case 2c (in SYNOPSIS)> demonstrates getting a password protected page that also requires
a client certificate, i.e. it is possible to use both authentication
methods simultaneously.

=end original

B<(SYNOPSIS の)ケース 2c> はクライアント証明書も必要とする、パスワードで保護された
ページを取得することを示しています。
つまり両方の認証方法を同時に使うことも可能です。

=begin original

B<Case 3b (in SYNOPSIS)> is a full blown POST to a secure server that requires both password
authentication and a client certificate, just like in case 2c.

=end original

B<(SYNOPSIS の)ケース 3b> は、ケース 2c とちょうど同じようにパスワード認証とクライアント
証明書の両方を必要とするセキュアなサーバへの完全に展開された POST です。

=begin original

Note: The client will not send a certificate unless the server requests one.
This is typically achieved by setting the verify mode to C<VERIFY_PEER> on the
server:

=end original

注意: サーバが要求しなければ、クライアントは証明書を送信しません。
これは典型的にはサーバで確認モードを C<VERIFY_PEER> に設定することにより
実現されます:

  Net::SSLeay::set_verify(ssl, Net::SSLeay::VERIFY_PEER, 0);

=begin original

See C<perldoc ~openssl/doc/ssl/SSL_CTX_set_verify.pod> for a full description.

=end original

完全な説明については、C<perldoc ~openssl/doc/ssl/SSL_CTX_set_verify.pod> を
ご覧ください。

=head3 Working through a web proxy

(Web プロキシを通して動かす)

=over

=item * set_proxy

=back

=begin original

C<Net::SSLeay> can use a web proxy to make its connections. You need to
first set the proxy host and port using C<set_proxy()> and then just
use the normal API functions, e.g:

=end original

C<Net::SSLeay> は接続を行うためにWebプロキシを利用することができます。
最初に C<set_proxy()> を使ってプロキシホストとポートを設定したら、
後は通常のAPI関数を使うだけです。
例えば:

  Net::SSLeay::set_proxy('gateway.myorg.com', 8080);
  ($page) = get_https('www.bacus.pt', 443, '/');

=begin original

If your proxy requires authentication, you can supply a username and
password as well

=end original

あなたのプロキシが認証を必要とするのであれば、ユーザ名とパスワードも
与えることができます

  Net::SSLeay::set_proxy('gateway.myorg.com', 8080, 'joe', 'salainen');
  ($page, $result, %headers) =
         = get_https('www.bacus.pt', 443, '/protected.html',
	      make_headers(Authorization =>
			   'Basic ' . MIME::Base64::encode("susie:pass",''))
	      );

=begin original

This example demonstrates the case where we authenticate to the proxy as
C<"joe"> and to the final web server as C<"susie">. Proxy authentication
requires the C<MIME::Base64> module to work.

=end original

この例は C<"joe"> でプロキシに、最終的なWebサーバには C<"susie"> で認証を
行うケースを示しています。
プロキシの認証は C<MIME::Base64> が機能することを必要とします。

=head3 HTTP (without S) API

(HTTP (S なし) API)

=over

=item * get_http

=item * post_http

=item * tcpcat

=item * get_httpx

=item * post_httpx

=item * tcpxcat

=back

=begin original

Over the years it has become clear that it would be convenient to use
the light-weight flavour API of C<Net::SSLeay> for normal HTTP as well (see
C<LWP> for the heavy-weight object-oriented approach). In fact it would be
nice to be able to flip https on and off on the fly. Thus regular HTTP
support was evolved.

=end original

年を経るにつれて、通常の HTTP でも C<Net::SSLeay> の軽量級 API を
使うのが便利であることが明らかになりました
(重量級のオブジェクト指向手法には C<LWP> を参照してください)。
実際のところ、その場で https のオンオフを切り替えられると有用です。
従って、普通の HTTP 対応は進化しました。

  use Net::SSLeay qw(get_http post_http tcpcat
                      get_httpx post_httpx tcpxcat
                      make_headers make_form);

  ($page, $result, %headers)
         = get_http('www.bacus.pt', 443, '/protected.html',
	      make_headers(Authorization =>
			   'Basic ' . MIME::Base64::encode("$user:$pass",''))
	      );

  ($page, $response, %reply_headers)
	 = post_http('www.bacus.pt', 443, '/foo.cgi', '',
		make_form(OK   => '1',
			  name => 'Sampo'
		));

  ($reply, $err) = tcpcat($host, $port, $request);

  ($page, $result, %headers)
         = get_httpx($usessl, 'www.bacus.pt', 443, '/protected.html',
	      make_headers(Authorization =>
			   'Basic ' . MIME::Base64::encode("$user:$pass",''))
	      );

  ($page, $response, %reply_headers)
	 = post_httpx($usessl, 'www.bacus.pt', 443, '/foo.cgi', '',
		make_form(OK   => '1',  name => 'Sampo'	));

  ($reply, $err, $server_cert) = tcpxcat($usessl, $host, $port, $request);

=begin original

As can be seen, the C<"x"> family of APIs takes as the first argument a flag
which indicates whether SSL is used or not.

=end original

ここで見られるように、API の C<"x"> ファミリーは、最初の引数として、
SSL が使われているかどうかを示すフラグを取ります。

=head2 Certificate verification and Certificate Revocation Lists (CRLs)

(証明書の検証と証明書失効リスト(CRL))

=begin original

OpenSSL supports the ability to verify peer certificates. It can also
optionally check the peer certificate against a Certificate Revocation
List (CRL) from the certificates issuer. A CRL is a file, created by
the certificate issuer that lists all the certificates that it
previously signed, but which it now revokes. CRLs are in PEM format.

=end original

OpenSSL はピア証明書の検証に対応しています。
オプションで、証明書発行者からの 証明書失効リスト (CRL) に対する
ピア証明書のチェックもできます。
CRL は、証明者の発行者によって作られた、以前に署名したけれども、
今は廃止されている全ての証明書の一覧のファイルです。
CRL は PEM 形式です。

=begin original

You can enable C<Net::SSLeay CRL> checking like this:

=end original

次のようにして C<Net::SSLeay CRL> チェックを有効にします:

	    &Net::SSLeay::X509_STORE_set_flags
		(&Net::SSLeay::CTX_get_cert_store($ssl),
		 &Net::SSLeay::X509_V_FLAG_CRL_CHECK);

=begin original

After setting this flag, if OpenSSL checks a peer's certificate, then
it will attempt to find a CRL for the issuer. It does this by looking
for a specially named file in the search directory specified by
CTX_load_verify_locations.  CRL files are named with the hash of the
issuer's subject name, followed by C<.r0>, C<.r1> etc.  For example
C<ab1331b2.r0>, C<ab1331b2.r1>. It will read all the .r files for the
issuer, and then check for a revocation of the peer certificate in all
of them.  (You can also force it to look in a specific named CRL
file., see below).  You can find out the hash of the issuer subject
name in a CRL with

=end original

このフラグを設定した後、OpenSSL がピア証明書をチェックする場合、
発行元の CRL を見つけようとします。
これは CTX_load_verify_locations で指定された検索ディレクトリから
特定の名前のファイルを探すことで行われます。
CRL ファイルは、発行者のサブジェクト名のハッシュに
C<.r0>, C<.r1> などが引き続く名前を持ちます。
例えば C<ab1331b2.r0>, C<ab1331b2.r1>。
対象の発行者の全ての .r ファイルを読み込み、その全てから
ピア証明書の失効をチェックします。
(特定の名前の CRL ファイルを見るように強制することもできます; 後述。)
CRL での発行者のサブジェクト名のハッシュは次のようにして見つけられます

	openssl crl -in crl.pem -hash -noout

=begin original

If the peer certificate does not pass the revocation list, or if no
CRL is found, then the handshaking fails with an error.

=end original

ピア証明書が証明書失効リストを通過しなかった場合、
あるいは CRL が見つからなかった場合、
ハンドシェイクはエラー終了します。

=begin original

You can also force OpenSSL to look for CRLs in one or more arbitrarily
named files.

=end original

また、任意の名前の一つまたは複数のファイルにある CRL を探させるように
OpenSSL を強制できます。

    my $bio = Net::SSLeay::BIO_new_file($crlfilename, 'r');
    my $crl = Net::SSLeay::PEM_read_bio_X509_CRL($bio);
    if ($crl) {
        Net::SSLeay::X509_STORE_add_crl(
	     Net::SSLeay::CTX_get_cert_store($ssl, $crl)
	);
    } else {
        error reading CRL....
    }

=head2 Using Net::SSLeay in multi-threaded applications

=begin original

B<IMPORTANT: versions 1.42 or earlier are not thread-safe!>

=end original

B<重要:1.42以前のバージョンはスレッドセーフではありません!>
(TBR)

=begin original

Net::SSLeay module implements all necessary stuff to be ready for multi-threaded
environment - it requires openssl-0.9.7 or newer. The implementation fully follows thread safety related requirements
of openssl library(see L<http://www.openssl.org/docs/crypto/threads.html|http://www.openssl.org/docs/crypto/threads.html>).

=end original

Net::SSLeayモジュールは、マルチスレッド環境に対応するために必要なすべての機能を実装します。
このモジュールを使用するには、openssl-0.9.7以降が必要です。
この実装は、opensslライブラリのスレッドセーフティー関連の要件に完全に準拠しています(L<http://www.openssl.org/docs/crypto/threads.html|http://www.openssl.org/docs/crypto/threads.html>を参照)。
(TBR)

=begin original

If you are about to use Net::SSLeay (or any other module based on Net::SSLeay) in multi-threaded
perl application it is recommended to follow this best-practice:

=end original

マルチスレッドのperlアプリケーションでNet::SSLeay(またはNet::SSLeayに基づくその他のモジュール)を使用する場合は、次のベストプラクティスに従うことをお勧めします。
(TBR)

=head3 Initialization

=begin original

Load and initialize Net::SSLeay module in the main thread:

=end original

メインスレッドでNet::SSLeayモジュールをロードして初期化します。
(TBR)

    use threads;
    use Net::SSLeay;

    Net::SSLeay::load_error_strings();
    Net::SSLeay::SSLeay_add_ssl_algorithms();
    Net::SSLeay::randomize();

    sub do_master_job {
      #... call whatever from Net::SSLeay
    }

    sub do_worker_job {
      #... call whatever from Net::SSLeay
    }

    #start threads
    my $master  = threads->new(\&do_master_job, 'param1', 'param2');
    my @workers = threads->new(\&do_worker_job, 'arg1', 'arg2') for (1..10);

    #waiting for all threads to finish
    $_->join() for (threads->list);

=begin original

NOTE: Openssl's C<int SSL_library_init(void)> function (which is also aliased as
C<SSLeay_add_ssl_algorithms>, C<OpenSSL_add_ssl_algorithms> and C<add_ssl_algorithms>)
is not re-entrant and multiple calls can cause a crash in threaded application.
Net::SSLeay implements flags preventing repeated calls to this function,
therefore even multiple initialization via Net::SSLeay::SSLeay_add_ssl_algorithms()
should work without trouble.

=end original

注:OpenSSLのC<int SSL_library_init(void)>関数(別名C<SSLeay_add_ssl_algorithms>、C<OpenSSL_add_ssl_algorithms>、C<add_ssl_algorithms>)は再入可能ではなく、複数回の呼び出しはスレッド化されたアプリケーションでクラッシュを引き起こす可能性があります。
Net::SSLeayは、この関数への繰り返し呼び出しを防止するフラグを実装しているため、Net::SSLeay::SSLeay_add_ssl_algorithms()による複数回の初期化であっても問題なく動作します。
(TBR)

=head3 Using callbacks

=begin original

Do not use callbacks across threads (the module blocks cross-thread callback operations
and throws a warning). Allways do the callback setup, callback use and callback destruction
within the same thread.

=end original

スレッド間でコールバックを使用しないでください(モジュールはスレッド間のコールバック操作をブロックし、警告をスローします)。
すべての方法で、同じスレッド内でコールバックのセットアップ、コールバックの使用、およびコールバックの破棄を行います。
(TBR)

=head3 Using openssl elements

=begin original

All openssl elements (X509, SSL_CTX, ...) can be directly passed between threads.

=end original

すべてのopenssl要素(X509、SSL_CTXなど)は、スレッド間で直接渡すことができます。
(TBR)

    use threads;
    use Net::SSLeay;

    Net::SSLeay::load_error_strings();
    Net::SSLeay::SSLeay_add_ssl_algorithms();
    Net::SSLeay::randomize();

    sub do_job {
      my $context = shift;
      Net::SSLeay::CTX_set_default_passwd_cb($context, sub { "secret" });
      #...
    }

    my $c = Net::SSLeay::CTX_new();
    threads->create(\&do_job, $c);

=begin original

Or:

=end original

または:
(TBR)

    use threads;
    use Net::SSLeay;

    my $context; #does not need to be 'shared'

    Net::SSLeay::load_error_strings();
    Net::SSLeay::SSLeay_add_ssl_algorithms();
    Net::SSLeay::randomize();

    sub do_job {
      Net::SSLeay::CTX_set_default_passwd_cb($context, sub { "secret" });
      #...
    }

    $context = Net::SSLeay::CTX_new();
    threads->create(\&do_job);

=head3 Using other perl modules based on Net::SSLeay

=begin original

It should be fine to use any other module based on L<Net::SSLeay> (like L<IO::Socket::SSL>)
in multi-threaded applications. It is generally recommended to do any global initialization
of such a module in the main thread before calling C<< threads->new(..) >> or
C<< threads->create(..) >> but it might differ module by module.

=end original

マルチスレッドアプリケーションでは、L<Net::SSLeay>をベースにした他のモジュール(L<IO::Socket::SSL>など)を使用しても問題ありません。
一般的には、C<< threads->new(.)>>またはC<< threads->create(.)>>を呼び出す前に、メインスレッドでそのようなモジュールのグローバル初期化を行うことをお勧めしますが、モジュールごとに異なる場合があります。
(TBR)

=begin original

To be play safe you can load and init Net::SSLeay explicitly in the main thread:

=end original

安全に動作させるために、メインスレッドでNet::SSLeayを明示的にロードして初期化することができます。
(TBR)

    use Net::SSLeay;
    use Other::SSLeay::Based::Module;

    Net::SSLeay::load_error_strings();
    Net::SSLeay::SSLeay_add_ssl_algorithms();
    Net::SSLeay::randomize();Net::SSLeay::initialize();
    Net::SSLeay::initialize();

=begin original

Or even safer:

=end original

さらに安全なのは
(TBR)

    use Net::SSLeay;
    use Other::SSLeay::Based::Module;

    BEGIN {
      Net::SSLeay::load_error_strings();
      Net::SSLeay::SSLeay_add_ssl_algorithms();
      Net::SSLeay::randomize();Net::SSLeay::initialize();
    }

=head3 Combining Net::SSLeay with other modules linked with openssl

=begin original

B<BEWARE: This might be a big trouble! This is not guaranteed be thread-safe!>

=end original

B<注意:これは大きな問題かもしれません!スレッドセーフであることは保証されていません!>
(TBR)

=begin original

There are many other (XS) modules linked directly to openssl library (like L<Crypt::SSLeay>).

=end original

opensslライブラリに直接リンクされている他の多くの(XS)モジュールがあります(L<Crypt::SSLeay>など)。
(TBR)

=begin original

As it is expected that also "another" module will call C<SSLeay_add_ssl_algorithms> at some point
we have again a trouble with multiple openssl initialization by Net::SSLeay and "another" module.

=end original

ある時点で「別の」モジュールもC<SSLeay_add_ssl_algorithms>を呼び出すことが予想されるため、Net::SSLeayと「別の」モジュールによる複数のopenssl初期化で再び問題が発生します。
(TBR)

=begin original

As you can expect Net::SSLeay is not able to avoid multiple initialization of openssl library
called by "another" module, thus you have to handle this on your own (in some cases it might
not be possible at all to avoid this).

=end original

ご想像のとおり、Net::SSLeayは、「別の」モジュールによって呼び出されるopensslライブラリの複数の初期化を回避することができないため、これを自分で処理する必要があります(場合によっては、これを回避できないこともあります)。
(TBR)

=head3 Threading with get_https and friends

=begin original

The convenience functions get_https, post_https etc all initialize the SSL library by calling
Net::SSLeay::initialize which does the conventional library initialization:

=end original

便利な関数get_https、post_httpsなどはすべて、従来のライブラリ初期化を行うNet::SSLeay::initializeを呼び出すことによってSSLライブラリを初期化します。
(TBR)

    Net::SSLeay::load_error_strings();
    Net::SSLeay::SSLeay_add_ssl_algorithms();
    Net::SSLeay::randomize();

=begin original

Net::SSLeay::initialize initializes the SSL library at most once.
You can override the Net::SSLeay::initialize function if you desire
some other type of initialization behaviour by get_https and friends.
You can call Net::SSLeay::initialize from your own code if you desire this conventional library initialization.

=end original

Net::SSLeay::initializeは、SSLライブラリを一度だけ初期化します。
get_httpsやfriendsによる他のタイプの初期化動作が必要な場合は、Net::SSLeay::initialize関数を上書きできます。
この従来のライブラリ初期化が必要な場合は、独自のコードからNet::SSLeay::initializeを呼び出すことができます。
(TBR)

=head2 Convenience routines

(便利なルーチン)

=begin original

To be used with Low level API

=end original

低レベルで使うために:

    Net::SSLeay::randomize($rn_seed_file,$additional_seed);
    Net::SSLeay::set_cert_and_key($ctx, $cert_path, $key_path);
    $cert = Net::SSLeay::dump_peer_certificate($ssl);
    Net::SSLeay::ssl_write_all($ssl, $message) or die "ssl write failure";
    $got = Net::SSLeay::ssl_read_all($ssl) or die "ssl read failure";

    $got = Net::SSLeay::ssl_read_CRLF($ssl [, $max_length]);
    $got = Net::SSLeay::ssl_read_until($ssl [, $delimit [, $max_length]]);
    Net::SSLeay::ssl_write_CRLF($ssl, $message);

=over

=item * randomize

=begin original

seeds the openssl PRNG with C</dev/urandom> (see the top of C<SSLeay.pm>
for how to change or configure this) and optionally with user provided
data. It is very important to properly seed your random numbers, so
do not forget to call this. The high level API functions automatically
call C<randomize()> so it is not needed with them. See also caveats.

=end original

これは C</dev/urandom> とオプションでユーザに与えられたデータで
openssl PRNG に種を設定し(これの変更あるいは設定のやり方については、
C<SSLeay.pm> の先頭をご覧ください)。
適切に乱数の種を設定することは非常に重要です。
ですから、これを呼び出すことを忘れないでください。
高レベルの API 関数は自動的に C<randomize()> を呼び出します。
そのためそれらでは必要ありません。
注意もご覧ください。

=item * set_cert_and_key

=begin original

takes two file names as arguments and sets
the certificate and private key to those. This can be used to
set either server certificates or client certificates.

=end original

これは引数として二つのファイル名を取り、
それらを証明書と秘密鍵に設定します。
これはサーバ証明書とクライアント証明書の両方に使えます。

=item * dump_peer_certificate

=begin original

allows you to get a plaintext description of the
certificate the peer (usually the server) presented to us.

=end original

これは相手側(通常はサーバ)が提出した
証明書の平文の説明を取得することを可能にします。

=item * ssl_read_all

=begin original

see ssl_write_all (below)

=end original

ssl_write_all(下記)を参照してください。
(TBR)

=item * ssl_write_all

=begin original

C<ssl_read_all()> and C<ssl_write_all()> provide true blocking semantics for
these operations (see limitation, below, for explanation). These are
much preferred to the low level API equivalents (which implement BSD
blocking semantics). The message argument to C<ssl_write_all()> can be
a reference. This is helpful to avoid unnecessary copying when writing
something big, e.g:

=end original

C<ssl_read_all()> と C<ssl_write_all()> は、これらの処理のための
本当のブロック化の意味論で提供します(説明については下記の制限を
ご覧ください)。
これらは低レベル API と同じものとして非常に好まれます
(これは BSD ブロック化セマンティクを実装しています)。
C<ssl_write_all()> への message 引数はリファレンスにすることができます。
これは何か大きなものを出力するとき、不必要なコピーを避けるために便利です。
例えば:

    $data = 'A' x 1000000000;
    Net::SSLeay::ssl_write_all($ssl, \$data) or die "ssl write failed";

=item * ssl_read_CRLF

=begin original

uses C<ssl_read_all()> to read in a line terminated with a
carriage return followed by a linefeed (CRLF).  The CRLF is included in
the returned scalar.

=end original

これは C<ssl_read_all()> を使って改行が後ろについた
復帰(CRLF)で終わる行を読み込みます。
CRLF は返されるスカラーに含まれます。

=item * ssl_read_until

=begin original

uses C<ssl_read_all()> to read from the SSL input
stream until it encounters a programmer specified delimiter.
If the delimiter is undefined, C<$/> is used.  If C<$/> is undefined,
C<\n> is used.  One can optionally set a maximum length of bytes to read
from the SSL input stream.

=end original

これは C<ssl_read_all()> を使って SSL 入力から
プログラマによって指定された区切り文字まで読み込みます。
区切り文字が未定義であればC<$/> が使われます。
C<$/> が未定義であれば、C<\n> が使われます。
SSL入力ストリームからの読み込む最大バイト長をオプションで
設定することができます。

=item * ssl_write_CRLF

=begin original

writes C<$message> and appends CRLF to the SSL output stream.

=end original

これは SSL 出力ストリームに C<$message> を出力し、CRLF を
追加します。

=back

=head2 Initialization

=begin original

In order to use the low level API you should start your programs with
the following incantation:

=end original

低レベル API を使うためには、あなたのプログラムは以下のように始まらなければ
なりません:

=begin original

	use Net::SSLeay qw(die_now die_if_ssl_error);
	Net::SSLeay::load_error_strings();
	Net::SSLeay::SSLeay_add_ssl_algorithms();    # Important!
        Net::SSLeay::ENGINE_load_builtin_engines();  # If you want built-in engines
        Net::SSLeay::ENGINE_register_all_complete(); # If you want built-in engines
        Net::SSLeay::randomize();

=end original

	use Net::SSLeay qw(die_now die_if_ssl_error);
	Net::SSLeay::load_error_strings();
	Net::SSLeay::SSLeay_add_ssl_algorithms();    # 重要!
        Net::SSLeay::ENGINE_load_builtin_engines();  # 組み込みエンジンが必要なら
        Net::SSLeay::ENGINE_register_all_complete(); # 組み込みエンジンが必要なら
        Net::SSLeay::randomize();

=head2 Error handling functions

=begin original

I can not emphasize the need to check for error enough. Use these
functions even in the most simple programs, they will reduce debugging
time greatly. Do not ask questions on the mailing list without having
first sprinkled these in your code.

=end original

エラーの戻り値をチェックする必要性はいくら強調しても足りません。
非常に単純なプログラムであっても、これらの関数を使ってください。
これらはデバッグにかかる時間を大幅に削減します。
先にこれらのものをあなたコードのあちこちに入れることなく、
メーリングリストに質問しないでください。

=over

=item * die_now

=item * die_if_ssl_error

=begin original

C<die_now()> and C<die_if_ssl_error()> are used to conveniently print the SSLeay error
stack when something goes wrong:

=end original

C<die_now()> と C<die_if_ssl_error()> は、以下のように何かがおかしくなったとき
簡単に SSLeay エラースタックを出力するために使用されます:

	Net::SSLeay::connect($ssl) or die_now("Failed SSL connect ($!)");

	Net::SSLeay::write($ssl, "foo") or die_if_ssl_error("SSL write ($!)");

=item * print_errs

=begin original

You can also use C<Net::SSLeay::print_errs()> to dump the error stack without
exiting the program. As can be seen, your code becomes much more readable
if you import the error reporting functions into your main name space.

=end original

プログラムを終了させることなくエラースタックをダンプさせるために
C<Net::SSLeay::print_errs()> を使うことも出来ます。
今見たように、main 名前空間にエラー報告関数をインポートすれば、
あなたのコードは、さらにとても読みやすくなります。

=back

=head2 Sockets

(ソケット)

=begin original

Perl uses file handles for all I/O. While SSLeay has a quite flexible BIO
mechanism and perl has an evolved PerlIO mechanism, this module still
sticks to using file descriptors. Thus to attach SSLeay to a socket you
should use C<fileno()> to extract the underlying file descriptor:

=end original

Perl は全ての I/O にファイルハンドルを使います。
SSLeay は非常に柔軟性のある BIO 機構を持っていますし、perl は PerlIO 機構を
進化させていますが、
このモジュールはファイル記述子を使うことにこだわっています。
このため SSLeay をソケットにつけるためには、元になっているファイル記述子を
取り出すために C<fineno()> を使わなければなりません:

=begin original

    Net::SSLeay::set_fd($ssl, fileno(S));   # Must use fileno

=end original

    Net::SSLeay::set_fd($ssl, fileno(S));   # fineno を使わなければなりません

=begin original

You should also set C<$|> to 1 to eliminate STDIO buffering so you do not
get confused if you use perl I/O functions to manipulate your socket
handle.

=end original

あなたのソケットハンドルを操作するために perl の I/O 関数を使うのであれば、
混乱しないよう、STDIO のバッファリングを止めさせるためには、C<$|> に 1 を
設定しなければなりません。

=begin original

If you need to C<select(2)> on the socket, go right ahead, but be warned
that OpenSSL does some internal buffering so SSL_read does not always
return data even if the socket selected for reading (just keep on
selecting and trying to read). C<Net::SSLeay> is no different from the
C language OpenSSL in this respect.

=end original

ソケットに C<select(2)> する必要があれば、すぐに行ってください。
ただし OpenSSL は内部バッファリングを行っていて、そのためソケットが読み込みの
ために選択されているときでも(単に選択し、読み込もうとし続けるだけ)、
常にデータを返すわけではないことに注意してください。
この点で C<Net::SSLeay> は C 言語 OpenSSL とは違います。

=head2 Callbacks

(コールバック)

=begin original

You can establish a per-context verify callback function something like this:

=end original

以下のようなコンテキスト単位の検証コールバック関数を設定できます:

	sub verify {
	    my ($ok, $x509_store_ctx) = @_;
	    print "Verifying certificate...\n";
		...
	    return $ok;
	}

=begin original

It is used like this:

=end original

これは以下のように使われます:

	Net::SSLeay::set_verify ($ssl, Net::SSLeay::VERIFY_PEER, \&verify);

=begin original

Per-context callbacks for decrypting private keys are implemented.

=end original

復号化するための秘密鍵のためのコンテキスト単位のコールバックは
実装されています。

        Net::SSLeay::CTX_set_default_passwd_cb($ctx, sub { "top-secret" });
        Net::SSLeay::CTX_use_PrivateKey_file($ctx, "key.pem",
					     Net::SSLeay::FILETYPE_PEM)
            or die "Error reading private key";
        Net::SSLeay::CTX_set_default_passwd_cb($ctx, undef);

=begin original

If Hello Extensions are supported by your OpenSSL,
a session secret callback can be set up to be called when a session secret is set
by openssl.

=end original

あなたの OpenSSL が Hello Extensions に対応しているなら、
セッションシークレットコールバックは、
セッションシークレットが openssl によって設定されたときに
呼び出されるように設定できます。

=begin original

Establish it like this:
    Net::SSLeay::set_session_secret_cb($ssl, \&session_secret_cb, $somedata);

=end original

次のようにしてこれを確立します:
    Net::SSLeay::set_session_secret_cb($ssl, \&session_secret_cb, $somedata);

=begin original

It will be called like this:

=end original

これは次のようにして呼び出されます:

    sub session_secret_cb
    {
        my ($secret, \@cipherlist, \$preferredcipher, $somedata) = @_;
    }

=begin original

No other callbacks are implemented. You do not need to use any
callback for simple (i.e. normal) cases where the SSLeay built-in
verify mechanism satisfies your needs.

=end original

その他のコールバックは実装されていません。
SSLeay 組み込みの確認機構があなたのニーズを満足させているところでは、
単純な(つまり通常の)ケースでは何もコールバックを使う必要はありません。

=begin original

It is required to reset these callbacks to undef immediately after use to prevent
memory leaks, thread safety problems and crashes on exit that
can occur if different threads set different callbacks.

=end original

異なるスレッドが異なるコールバックを持つ場合に起きるかもしれない
メモリリーク、スレッドセーフ性問題、終了時のクラッシュを防ぐために、
これらのコールバックは使用後直ちに未定義にリセットする必要があります。

=begin original

If you want to use callback stuff, see examples/callback.pl! It's the
only one I am able to make work reliably.

=end original

コールバックを使いたければ、examples/callback.pl をご覧ください!
それは私が信頼して動かすことができる唯一のものです。

=head2 Low level API

(低レベル API)

=begin original

In addition to the high level functions outlined above, this module
contains straight-forward access to CRYPTO and SSL parts of OpenSSL C API.

=end original

上記で説明した高レベル関数に加えて、このモジュールには OpenSSL C API の
CRYPTO と SSL 部分にそのままアクセスすることもできます。

=begin original

See the C<*.h> headers from OpenSSL C distribution for a list of low level
SSLeay functions to call (check SSLeay.xs to see if some function has been
implemented). The module strips the initial C<"SSL_"> off of the SSLeay names.
Generally you should use C<Net::SSLeay::> in its place.

=end original

低レベル SSLeay 関数の呼び出し方の一覧については、OpenSSL C
配布の C<*.h> ヘッダをご覧ください(関数が
実装されているかをチェックするためには、SSLeay.xs をご覧ください)。
このモジュールでは SSLeay の名前から先頭の C<"SSL_"> をはずしています。
一般的にはその場所に C<Net::SSLeay::> を使わなければなりません。

=begin original

Note that some functions are prefixed with C<"P_"> - these are very close to
the original API however contain some kind of a wrapper making its interface
more perl friendly.

=end original

一部の関数にはC<"P_">というプレフィックスが付いていることに注意してください。
これらの関数は元のAPIに非常に近いものですが、何らかのラッパーが含まれているため、Perlとのインターフェースがより使いやすくなっています。
(TBR)

=begin original

For example:

=end original

例えば:

=begin original

In C:

=end original

C では:

	#include <ssl.h>

	err = SSL_set_verify (ssl, SSL_VERIFY_CLIENT_ONCE,
				   &your_call_back_here);

=begin original

In Perl:

=end original

Perl では:

	use Net::SSLeay;

	$err = Net::SSLeay::set_verify ($ssl,
					Net::SSLeay::VERIFY_CLIENT_ONCE,
					\&your_call_back_here);

=begin original

If the function does not start with C<SSL_> you should use the full
function name, e.g.:

=end original

C<SSL_> で始まらない関数では、関数名全体を使わなければなりません。
例えば:

	$err = Net::SSLeay::ERR_get_error;

=begin original

The following new functions behave in perlish way:

=end original

以下の新しい関数は perl 的に振舞います:

=begin original

	$got = Net::SSLeay::read($ssl);
                                    # Performs SSL_read, but returns $got
                                    # resized according to data received.
                                    # Returns undef on failure.

=end original

	$got = Net::SSLeay::read($ssl);
                                    # SSL_read を行いますが、受信データに
                                    # 従って大きさが変更された $got を返します
                                    # 失敗したときには undef を返します。

=begin original

	Net::SSLeay::write($ssl, $foo) || die;
                                    # Performs SSL_write, but automatically
                                    # figures out the size of $foo

=end original

	Net::SSLeay::write($ssl, $foo) || die;
                                    # SSL_write を実行します。しかし自動的に
                                    # $foo の大きさを計算します。

=head3 Low level API: Version related functions

=over

=item * SSLeay

=begin original

B<COMPATIBILITY:> not available in Net-SSLeay-1.42 and before

=end original

B<COMPATIBILITY:>は、Net-SSLeay-1.42以前では使用できません。
(TBR)

=begin original

Gives version number (numeric) of underlaying openssl library.

=end original

基礎となるopensslライブラリのバージョン番号(数値)を指定します。
(TBR)

 my $ver_number = Net::SSLeay::SSLeay();
 # returns: the number identifying the openssl release
 #
 # 0x00903100 => openssl-0.9.3
 # 0x00904100 => openssl-0.9.4
 # 0x00905100 => openssl-0.9.5
 # 0x0090600f => openssl-0.9.6
 # 0x0090601f => openssl-0.9.6a
 # 0x0090602f => openssl-0.9.6b
 # ...
 # 0x009060df => openssl-0.9.6m
 # 0x0090700f => openssl-0.9.7
 # 0x0090701f => openssl-0.9.7a
 # 0x0090702f => openssl-0.9.7b
 # ...
 # 0x009070df => openssl-0.9.7m
 # 0x0090800f => openssl-0.9.8
 # 0x0090801f => openssl-0.9.8a
 # 0x0090802f => openssl-0.9.8b
 # ...
 # 0x0090814f => openssl-0.9.8t
 # 0x1000000f => openssl-1.0.0
 # 0x1000004f => openssl-1.0.0d
 # 0x1000007f => openssl-1.0.0g

=begin original

You can use it like this:

=end original

次のように使用できます。
(TBR)

  if (Net::SSLeay::SSLeay() < 0x0090800f) {
    die "you need openssl-0.9.8 or higher";
  }

=item * SSLeay_version

=begin original

B<COMPATIBILITY:> not available in Net-SSLeay-1.42 and before

=end original

B<COMPATIBILITY:>は、Net-SSLeay-1.42以前では使用できません。
(TBR)

=begin original

Gives version number (string) of underlaying openssl library.

=end original

基礎となるopensslライブラリのバージョン番号(文字列)を指定します。
(TBR)

 my $ver_string = Net::SSLeay::SSLeay_version($type);
 # $type
 #   0 (=SSLEAY_VERSION) - e.g. 'OpenSSL 1.0.0d 8 Feb 2011'
 #   2 (=SSLEAY_CFLAGS)  - e.g. 'compiler: gcc -D_WINDLL -DOPENSSL_USE_APPLINK .....'
 #   3 (=SSLEAY_BUILT_ON)- e.g. 'built on: Fri May  6 00:00:46 GMT 2011'
 #   4 (=SSLEAY_PLATFORM)- e.g. 'platform: mingw'
 #
 # returns: string

 Net::SSLeay::SSLeay_version();
 #is equivalent to
 Net::SSLeay::SSLeay_version(0);

=begin original

Check openssl doc L<http://www.openssl.org/docs/crypto/SSLeay_version.html|http://www.openssl.org/docs/crypto/SSLeay_version.html>

=end original

openssl doc L<http://www.openssl.org/docs/crypto/SSLeay_version.html|http://www.openssl.org/docs/crypto/SSLeay_version.html>を確認します。
(TBR)

=back

=head3 Low level API: Initialization related functions

=over

=item * library_init

=begin original

Initialize SSL library by registering algorithms.

=end original

アルゴリズムを登録してSSLライブラリを初期化します。
(TBR)

 my $rv = Net::SSLeay::library_init();
 #
 # returns: always 1

=begin original

Check openssl doc L<http://www.openssl.org/docs/ssl/SSL_library_init.html|http://www.openssl.org/docs/ssl/SSL_library_init.html>

=end original

openssl doc L<http://www.openssl.org/docs/ssl/SSL_library_init.html|http://www.openssl.org/docs/ssl/SSL_library_init.html>を確認します。
(TBR)

=item * add_ssl_algorithms

=begin original

The alias for L</library_init>

=end original

Lのエイリアス</library_init>
(TBR)

 Net::SSLeay::add_ssl_algorithms();

=item * OpenSSL_add_ssl_algorithms

=begin original

The alias for L</library_init>

=end original

Lのエイリアス</library_init>
(TBR)

 Net::SSLeay::OpenSSL_add_ssl_algorithms();

=item * SSLeay_add_ssl_algorithms

=begin original

The alias for L</library_init>

=end original

Lのエイリアス</library_init>
(TBR)

 Net::SSLeay::SSLeay_add_ssl_algorithms();

=item * load_error_strings

=begin original

Registers the error strings for all libcrypto + libssl related functions.

=end original

libcrypto+libssl関連のすべての関数のエラー文字列を登録します。
(TBR)

 Net::SSLeay::load_error_strings();
 #
 # returns: no return value

=begin original

Check openssl doc L<http://www.openssl.org/docs/crypto/ERR_load_crypto_strings.html|http://www.openssl.org/docs/crypto/ERR_load_crypto_strings.html>

=end original

openssl doc L<http://www.openssl.org/docs/crypto/ERR_load_crypto_strings.html|http://www.openssl.org/docs/crypto/ERR_load_crypto_strings.html>を確認します。
(TBR)

=item * ERR_load_crypto_strings

=begin original

Registers the error strings for all libcrypto functions. No need to call this function if you have already called L</load_error_strings>.

=end original

すべてのlibcrypto関数のエラー文字列を登録します。
すでにL</load_error_strings>を呼び出している場合は、この関数を呼び出す必要はありません。
(TBR)

 Net::SSLeay::ERR_load_crypto_strings();
 #
 # returns: no return value

=begin original

Check openssl doc L<http://www.openssl.org/docs/crypto/ERR_load_crypto_strings.html|http://www.openssl.org/docs/crypto/ERR_load_crypto_strings.html>

=end original

openssl doc L<http://www.openssl.org/docs/crypto/ERR_load_crypto_strings.html|http://www.openssl.org/docs/crypto/ERR_load_crypto_strings.html>を確認します。
(TBR)

=item * ERR_load_RAND_strings

=begin original

Registers the error strings for RAND related functions. No need to call this function if you have already called L</load_error_strings>.

=end original

RAND関連関数のエラー文字列を登録します。
すでにL</load_error_strings>を呼び出している場合は、この関数を呼び出す必要はありません。
(TBR)

 Net::SSLeay::ERR_load_RAND_strings();
 #
 # returns: no return value

=item * ERR_load_SSL_strings

=begin original

Registers the error strings for SSL related functions. No need to call this function if you have already called L</load_error_strings>.

=end original

SSL関連の関数のエラー文字列を登録します。
すでにL</load_error_strings>を呼び出している場合は、この関数を呼び出す必要はありません。
(TBR)

 Net::SSLeay::ERR_load_SSL_strings();
 #
 # returns: no return value

=item * OpenSSL_add_all_algorithms

=begin original

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before

=end original

B<COMPATIBILITY:>は、Net-SSLeay-1.45以前では使用できません。
(TBR)

=begin original

Add algorithms to internal table.

=end original

内部テーブルにアルゴリズムを追加します。
(TBR)

 Net::SSLeay::OpenSSL_add_all_algorithms();
 #
 # returns: no return value

=begin original

Check openssl doc L<http://www.openssl.org/docs/crypto/OpenSSL_add_all_algorithms.html|http://www.openssl.org/docs/crypto/OpenSSL_add_all_algorithms.html>

=end original

openssl doc L<http://www.openssl.org/docs/crypto/OpenSSL_add_all_algorithms.html|http://www.openssl.org/docs/crypto/OpenSSL_add_all_algorithms.html>を確認します。
(TBR)

=item * OPENSSL_add_all_algorithms_conf

=begin original

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before

=end original

B<COMPATIBILITY:>は、Net-SSLeay-1.45以前では使用できません。
(TBR)

=begin original

Similar to L</OpenSSL_add_all_algorithms> - will ALWAYS load the config file

=end original

Lと同様</OpenSSL_add_all_algorithms>-常に設定ファイルを読み込みます。
(TBR)

 Net::SSLeay::OPENSSL_add_all_algorithms_conf();
 #
 # returns: no return value

=item * OPENSSL_add_all_algorithms_noconf

=begin original

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before

=end original

B<COMPATIBILITY:>は、Net-SSLeay-1.45以前では使用できません。
(TBR)

=begin original

Similar to L</OpenSSL_add_all_algorithms> - will NEVER load the config file

=end original

Lと同様</OpenSSL_add_all_algorithms>-設定ファイルをロードしません。
(TBR)

 Net::SSLeay::OPENSSL_add_all_algorithms_noconf();
 #
 # returns: no return value

=back

=head3 Low level API: ERR_* and SSL_alert_* related functions

=begin original

B<NOTE:> Please note that SSL_alert_* function have "SSL_" part stripped from their names.

=end original

B<注:>SSL_alert_*関数の名前から「SSL_」の部分が削除されていることに注意してください。
(TBR)

=over

=item * ERR_clear_error

=begin original

Clear the error queue.

=end original

エラーキューをクリアします。
(TBR)

 Net::SSLeay::ERR_clear_error();
 #
 # returns: no return value

=begin original

Check openssl doc L<http://www.openssl.org/docs/crypto/ERR_clear_error.html|http://www.openssl.org/docs/crypto/ERR_clear_error.html>

=end original

openssl doc L<http://www.openssl.org/docs/crypto/ERR_clear_error.html|http://www.openssl.org/docs/crypto/ERR_clear_error.html>を確認します。
(TBR)

=item * ERR_error_string

=begin original

Generates a human-readable string representing the error code $error.

=end original

エラーコード$errorを表す人間が読める文字列を生成します。
(TBR)

 my $rv = Net::SSLeay::ERR_error_string($error);
 # $error - (unsigned integer) error code
 #
 # returns: string

=begin original

Check openssl doc L<http://www.openssl.org/docs/crypto/ERR_error_string.html|http://www.openssl.org/docs/crypto/ERR_error_string.html>

=end original

openssl doc L<http://www.openssl.org/docs/crypto/ERR_error_string.html|http://www.openssl.org/docs/crypto/ERR_error_string.html>を確認します。
(TBR)

=item * ERR_get_error

=begin original

Returns the earliest error code from the thread's error queue and removes the entry.
This function can be called repeatedly until there are no more error codes to return.

=end original

スレッドのエラーキューから最も古いエラーコードを戻し、エントリを削除します。
この関数は、戻すエラーコードがなくなるまで繰り返しコールできます。
(TBR)

 my $rv = Net::SSLeay::ERR_get_error();
 #
 # returns: (unsigned integer) error code

=begin original

Check openssl doc L<http://www.openssl.org/docs/crypto/ERR_get_error.html|http://www.openssl.org/docs/crypto/ERR_get_error.html>

=end original

openssl doc L<http://www.openssl.org/docs/crypto/ERR_get_error.html|http://www.openssl.org/docs/crypto/ERR_get_error.html>を確認します。
(TBR)

=item * ERR_peek_error

=begin original

Returns the earliest error code from the thread's error queue without modifying it.

=end original

スレッドのエラーキューから、変更せずに最も古いエラーコードを戻します。
(TBR)

 my $rv = Net::SSLeay::ERR_peek_error();
 #
 # returns: (unsigned integer) error code

=begin original

Check openssl doc L<http://www.openssl.org/docs/crypto/ERR_get_error.html|http://www.openssl.org/docs/crypto/ERR_get_error.html>

=end original

openssl doc L<http://www.openssl.org/docs/crypto/ERR_get_error.html|http://www.openssl.org/docs/crypto/ERR_get_error.html>を確認します。
(TBR)

=item * ERR_put_error

=begin original

Adds an error code to the thread's error queue. It signals that the error of $reason
code reason occurred in function $func of library $lib, in line number $line of $file.

=end original

スレッドのエラーキューにエラーコードを追加します。
$reason code reasonのエラーがライブラリ$libの関数$func、$fileの行番号$lineで発生したことを示します。
(TBR)

 Net::SSLeay::ERR_put_error($lib, $func, $reason, $file, $line);
 # $lib - (integer) library id (check openssl/err.h for constants e.g. ERR_LIB_SSL)
 # $func - (integer) function id (check openssl/ssl.h for constants e.g. SSL_F_SSL23_READ)
 # $reason - (integer) reason id (check openssl/ssl.h for constants e.g. SSL_R_SSL_HANDSHAKE_FAILURE)
 # $file - (string) file name
 # $line - (integer) line number in $file
 #
 # returns: no return value

=begin original

Check openssl doc L<http://www.openssl.org/docs/crypto/ERR_put_error.html|http://www.openssl.org/docs/crypto/ERR_put_error.html>
and L<http://www.openssl.org/docs/crypto/err.html|http://www.openssl.org/docs/crypto/err.html>

=end original

openssl doc L<http://www.openssl.org/docs/crypto/ERR_put_error.html|http://www.openssl.org/docs/crypto/ERR_put_error.html>およびL<http://www.openssl.org/docs/crypto/ERR.html|http://www.openssl.org/docs/crypto/ERR.html>を確認します。
(TBR)

=item * alert_desc_string

=begin original

Returns a two letter string as a short form describing the reason of the alert specified by value.

=end original

valueで指定したアラートの理由を説明する2文字の文字列を短い形式で返します。
(TBR)

 my $rv = Net::SSLeay::alert_desc_string($value);
 # $value - (integer) allert id (check openssl/ssl.h for SSL3_AD_* and TLS1_AD_* constants)
 #
 # returns: description string (2 letters)

=begin original

Check openssl doc L<http://www.openssl.org/docs/ssl/SSL_alert_type_string.html|http://www.openssl.org/docs/ssl/SSL_alert_type_string.html>

=end original

openssl doc L<http://www.openssl.org/docs/ssl/SSL_alert_type_string.html|http://www.openssl.org/docs/ssl/SSL_alert_type_string.html>を確認します。
(TBR)

=item * alert_desc_string_long

=begin original

Returns a string describing the reason of the alert specified by value.

=end original

valueで指定されたアラートの理由を説明する文字列を返します。
(TBR)

 my $rv = Net::SSLeay::alert_desc_string_long($value);
 # $value - (integer) allert id (check openssl/ssl.h for SSL3_AD_* and TLS1_AD_* constants)
 #
 # returns: description string

=begin original

Check openssl doc L<http://www.openssl.org/docs/ssl/SSL_alert_type_string.html|http://www.openssl.org/docs/ssl/SSL_alert_type_string.html>

=end original

openssl doc L<http://www.openssl.org/docs/ssl/SSL_alert_type_string.html|http://www.openssl.org/docs/ssl/SSL_alert_type_string.html>を確認します。
(TBR)

=item * alert_type_string

=begin original

Returns a one letter string indicating the type of the alert specified by value.

=end original

valueで指定したアラートのタイプを示す1文字の文字列を戻します。
(TBR)

 my $rv = Net::SSLeay::alert_type_string($value);
 # $value - (integer) allert id (check openssl/ssl.h for SSL3_AD_* and TLS1_AD_* constants)
 #
 # returns: string (1 letter)

=begin original

Check openssl doc L<http://www.openssl.org/docs/ssl/SSL_alert_type_string.html|http://www.openssl.org/docs/ssl/SSL_alert_type_string.html>

=end original

openssl doc L<http://www.openssl.org/docs/ssl/SSL_alert_type_string.html|http://www.openssl.org/docs/ssl/SSL_alert_type_string.html>を確認します。
(TBR)

=item * alert_type_string_long

=begin original

Returns a string indicating the type of the alert specified by value.

=end original

valueで指定したアラートのタイプを示す文字列を戻します。
(TBR)

 my $rv = Net::SSLeay::alert_type_string_long($value);
 # $value - (integer) allert id (check openssl/ssl.h for SSL3_AD_* and TLS1_AD_* constants)
 #
 # returns: string

=begin original

Check openssl doc L<http://www.openssl.org/docs/ssl/SSL_alert_type_string.html|http://www.openssl.org/docs/ssl/SSL_alert_type_string.html>

=end original

openssl doc L<http://www.openssl.org/docs/ssl/SSL_alert_type_string.html|http://www.openssl.org/docs/ssl/SSL_alert_type_string.html>を確認します。
(TBR)

=back

=head3 Low level API: SSL_METHOD_* related functions

=over

=item * SSLv2_method

=begin original

Returns SSL_METHOD structure corresponding to SSLv2 method, the return value can be later used as a param of L</CTX_new_with_method>.

=end original

SSLv2メソッドに対応するSSL_METHOD構造体を返します。
戻り値は後でL</CTX_new_with_method>のパラメータとして使用できます。
(TBR)

 my $rv = Net::SSLeay::SSLv2_method();
 #
 # returns: value corresponding to openssl's SSL_METHOD structure (0 on failure)

=item * SSLv3_method

=begin original

Returns SSL_METHOD structure corresponding to SSLv3 method, the return value can be later used as a param of L</CTX_new_with_method>.

=end original

SSLv3メソッドに対応するSSL_METHOD構造体を返します。
戻り値は後でL</CTX_new_with_method>のパラメータとして使用できます。
(TBR)

 my $rv = Net::SSLeay::SSLv3_method();
 #
 # returns: value corresponding to openssl's SSL_METHOD structure (0 on failure)

=begin original

Check openssl doc L<http://www.openssl.org/docs/ssl/SSL_CTX_new.html|http://www.openssl.org/docs/ssl/SSL_CTX_new.html>

=end original

openssl doc L<http://www.openssl.org/docs/ssl/SSL_CTX_new.html|http://www.openssl.org/docs/ssl/SSL_CTX_new.html>を確認します。
(TBR)

=item * TLSv1_method

=begin original

Returns SSL_METHOD structure corresponding to TLSv1 method, the return value can be later used as a param of L</CTX_new_with_method>.

=end original

TLSv1メソッドに対応するSSL_METHOD構造体を返します。
戻り値は後でL</CTX_new_with_method>のパラメータとして使用できます。
(TBR)

 my $rv = Net::SSLeay::TLSv1_method();
 #
 # returns: value corresponding to openssl's SSL_METHOD structure (0 on failure)

=begin original

Check openssl doc L<http://www.openssl.org/docs/ssl/SSL_CTX_new.html|http://www.openssl.org/docs/ssl/SSL_CTX_new.html>

=end original

openssl doc L<http://www.openssl.org/docs/ssl/SSL_CTX_new.html|http://www.openssl.org/docs/ssl/SSL_CTX_new.html>を確認します。
(TBR)

=back

=head3 Low level API: ENGINE_* related functions

=over

=item * ENGINE_load_builtin_engines

=begin original

Load all bundled ENGINEs into memory and make them visible.

=end original

バンドルされているすべてのENGINEをメモリにロードして表示します。
(TBR)

 Net::SSLeay::ENGINE_load_builtin_engines();
 #
 # returns: no return value

=begin original

Check openssl doc L<http://www.openssl.org/docs/crypto/engine.html|http://www.openssl.org/docs/crypto/engine.html>

=end original

openssl doc L<http://www.openssl.org/docs/crypto/engine.html|http://www.openssl.org/docs/crypto/engine.html>を確認します。
(TBR)

=item * ENGINE_register_all_complete

=begin original

Register all loaded ENGINEs for every algorithm they collectively implement.

=end original

集合的に実装するすべてのアルゴリズムに対して、ロードされたすべてのENGINEを登録する。
(TBR)

 Net::SSLeay::ENGINE_register_all_complete();
 #
 # returns: no return value

=begin original

Check openssl doc L<http://www.openssl.org/docs/crypto/engine.html|http://www.openssl.org/docs/crypto/engine.html>

=end original

openssl doc L<http://www.openssl.org/docs/crypto/engine.html|http://www.openssl.org/docs/crypto/engine.html>を確認します。
(TBR)

=item * ENGINE_set_default

=begin original

Set default engine to $e + set its flags to $flags.

=end original

デフォルトのエンジンを$eに設定し、そのフラグを$flagsに設定します。
(TBR)

 my $rv = Net::SSLeay::ENGINE_set_default($e, $flags);
 # $e - value corresponding to openssl's ENGINE structure
 # $flags - (integer) engine flags
 #          flags value can be made by bitwise "OR"ing:
 #          0x0001 - ENGINE_METHOD_RSA
 #          0x0002 - ENGINE_METHOD_DSA
 #          0x0004 - ENGINE_METHOD_DH
 #          0x0008 - ENGINE_METHOD_RAND
 #          0x0010 - ENGINE_METHOD_ECDH
 #          0x0020 - ENGINE_METHOD_ECDSA
 #          0x0040 - ENGINE_METHOD_CIPHERS
 #          0x0080 - ENGINE_METHOD_DIGESTS
 #          0x0100 - ENGINE_METHOD_STORE
 #          0x0200 - ENGINE_METHOD_PKEY_METHS
 #          0x0400 - ENGINE_METHOD_PKEY_ASN1_METHS
 #          Obvious all-or-nothing cases:
 #          0xFFFF - ENGINE_METHOD_ALL
 #          0x0000 - ENGINE_METHOD_NONE
 #
 # returns: 1 on success, 0 on failure

=begin original

Check openssl doc L<http://www.openssl.org/docs/crypto/engine.html|http://www.openssl.org/docs/crypto/engine.html>

=end original

openssl doc L<http://www.openssl.org/docs/crypto/engine.html|http://www.openssl.org/docs/crypto/engine.html>を確認します。
(TBR)

=item * ENGINE_by_id

=begin original

Get ENGINE by its identification $id.

=end original

ID$idでENGINEを取得します。
(TBR)

 my $rv = Net::SSLeay::ENGINE_by_id($id);
 # $id - (string) engine identification e.g. "dynamic"
 #
 # returns: value corresponding to openssl's ENGINE structure (0 on failure)

=begin original

Check openssl doc L<http://www.openssl.org/docs/crypto/engine.html|http://www.openssl.org/docs/crypto/engine.html>

=end original

openssl doc L<http://www.openssl.org/docs/crypto/engine.html|http://www.openssl.org/docs/crypto/engine.html>を確認します。
(TBR)

=back

=head3 Low level API: EVP_PKEY_* related functions

=over

=item * EVP_PKEY_copy_parameters

=begin original

Copies the parameters from key $from to key $to.

=end original

パラメータをkey$fromからkey$toにコピーします。
(TBR)

 my $rv = Net::SSLeay::EVP_PKEY_copy_parameters($to, $from);
 # $to - value corresponding to openssl's EVP_PKEY structure
 # $from - value corresponding to openssl's EVP_PKEY structure
 #
 # returns: 1 on success, 0 on failure

=begin original

Check openssl doc L<http://www.openssl.org/docs/crypto/EVP_PKEY_cmp.html|http://www.openssl.org/docs/crypto/EVP_PKEY_cmp.html>

=end original

openssl doc L<http://www.openssl.org/docs/crypto/EVP_PKEY_cmp.html|http://www.openssl.org/docs/crypto/EVP_PKEY_cmp.html>を確認します。
(TBR)

=item * EVP_PKEY_new

=begin original

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before

=end original

B<COMPATIBILITY:>は、Net-SSLeay-1.45以前では使用できません。
(TBR)

=begin original

Creates a new EVP_PKEY structure.

=end original

新しいEVP_PKEY構造体を作成します。
(TBR)

 my $rv = Net::SSLeay::EVP_PKEY_new();
 #
 # returns: value corresponding to openssl's EVP_PKEY structure (0 on failure)

=begin original

Check openssl doc L<http://www.openssl.org/docs/crypto/EVP_PKEY_new.html|http://www.openssl.org/docs/crypto/EVP_PKEY_new.html>

=end original

openssl doc L<http://www.openssl.org/docs/crypto/EVP_PKEY_new.html|http://www.openssl.org/docs/crypto/EVP_PKEY_new.html>を確認します。
(TBR)

=item * EVP_PKEY_free

=begin original

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before

=end original

B<COMPATIBILITY:>は、Net-SSLeay-1.45以前では使用できません。
(TBR)

=begin original

Free an allocated EVP_PKEY structure.

=end original

割り当てられたEVP_PKEY構造体を解放します。
(TBR)

 Net::SSLeay::EVP_PKEY_free($pkey);
 # $pkey - value corresponding to openssl's EVP_PKEY structure
 #
 # returns: no return value

=begin original

Check openssl doc L<http://www.openssl.org/docs/crypto/EVP_PKEY_new.html|http://www.openssl.org/docs/crypto/EVP_PKEY_new.html>

=end original

openssl doc L<http://www.openssl.org/docs/crypto/EVP_PKEY_new.html|http://www.openssl.org/docs/crypto/EVP_PKEY_new.html>を確認します。
(TBR)

=item * EVP_PKEY_assign_RSA

=begin original

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before

=end original

B<COMPATIBILITY:>は、Net-SSLeay-1.45以前では使用できません。
(TBR)

=begin original

Set the key referenced by $pkey to $key

=end original

$pkeyが参照するキーを$keyに設定します。
(TBR)

=begin original

B<NOTE:> In accordance with the OpenSSL naming convention the $key assigned
to the $pkey using the "1" functions must be freed as well as $pkey.

=end original

B<注:>OpenSSLの命名規則に従って、「1」関数を使用して$pkeyに割り当てられた$keyは、$pkeyと同様に解放する必要があります。
(TBR)

 my $rv = Net::SSLeay::EVP_PKEY_assign_RSA($pkey, $key);
 # $pkey - value corresponding to openssl's EVP_PKEY structure
 # $key - value corresponding to openssl's RSA structure
 #
 # returns: 1 on success, 0 on failure

=begin original

Check openssl doc L<http://www.openssl.org/docs/crypto/EVP_PKEY_set1_RSA.html|http://www.openssl.org/docs/crypto/EVP_PKEY_set1_RSA.html>

=end original

openssl doc Lを確認してください<http://www.openssl.org/docs/crypto/EVP_PKEY_set1_RSA.html|http://www.openssl.org/docs/crypto/EVP_PKEY_set1_RSA.html>
(TBR)

=item * EVP_PKEY_bits

=begin original

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before

=end original

B<COMPATIBILITY:>は、Net-SSLeay-1.45以前では使用できません。
(TBR)

=begin original

Returns the size of the key $pkey in bits.

=end original

キー$pkeyのサイズをビット単位で返します。
(TBR)

 my $rv = Net::SSLeay::EVP_PKEY_bits($pkey);
 # $pkey - value corresponding to openssl's EVP_PKEY structure
 #
 # returns: size in bits

=item * EVP_PKEY_size

=begin original

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before

=end original

B<COMPATIBILITY:>は、Net-SSLeay-1.45以前では使用できません。
(TBR)

=begin original

Returns the maximum size of a signature in bytes. The actual signature may be smaller.

=end original

署名の最大サイズをバイト単位で返します。
実際の署名はこれより小さくなる場合があります。
(TBR)

 my $rv = Net::SSLeay::EVP_PKEY_size($pkey);
 # $pkey - value corresponding to openssl's EVP_PKEY structure
 #
 # returns: the maximum size in bytes

=begin original

Check openssl doc L<http://www.openssl.org/docs/crypto/EVP_SignInit.html|http://www.openssl.org/docs/crypto/EVP_SignInit.html>

=end original

openssl doc L<http://www.openssl.org/docs/crypto/EVP_SignInit.html|http://www.openssl.org/docs/crypto/EVP_SignInit.html>を確認します。
(TBR)

=item * EVP_PKEY_id

=begin original

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before; requires at least openssl-1.0.0

=end original

B<COMPATIBILITY:>Net-SSLeay-1.45以前では使用できません。
少なくともopenssl-1.0.0が必要です。
(TBR)

=begin original

Returns $pkey type (integer value of corresponding NID).

=end original

$pkey type(対応するNIDの整数値)を返します。
(TBR)

 my $rv = Net::SSLeay::EVP_PKEY_id($pkey);
 # $pkey - value corresponding to openssl's EVP_PKEY structure
 #
 # returns: (integer) key type

=begin original

Example:

=end original

例:
(TBR)

 my $pubkey = Net::SSLeay::X509_get_pubkey($x509);
 my $type = Net::SSLeay::EVP_PKEY_id($pubkey);
 print Net::SSLeay::OBJ_nid2sn($type);             #prints e.g. 'rsaEncryption'

=back

=head3 Low level API: PEM_* related functions

=begin original

Check openssl doc L<http://www.openssl.org/docs/crypto/pem.html|http://www.openssl.org/docs/crypto/pem.html>

=end original

openssl doc L<http://www.openssl.org/docs/crypto/pem.html|http://www.openssl.org/docs/crypto/pem.html>を確認します。
(TBR)

=over

=item * PEM_read_bio_X509

=begin original

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before

=end original

B<COMPATIBILITY:>は、Net-SSLeay-1.45以前では使用できません。
(TBR)

=begin original

Loads PEM formated X509 certificate via given BIO structure.

=end original

指定されたBIO構造体を介して、PEM形式のX509証明書をロードします。
(TBR)

 my $rv = Net::SSLeay::PEM_read_bio_X509($bio);
 # $bio - value corresponding to openssl's BIO structure
 #
 # returns: value corresponding to openssl's X509 structure (0 on failure)

=begin original

Example:

=end original

例:
(TBR)

 my $bio = Net::SSLeay::BIO_new_file($filename, 'r');
 my $x509 = Net::SSLeay::PEM_read_bio_X509($bio);
 Net::SSLeay::BIO_free($bio);

=item * PEM_read_bio_X509_REQ

=begin original

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before

=end original

B<COMPATIBILITY:>は、Net-SSLeay-1.45以前では使用できません。
(TBR)

=begin original

Loads PEM formated X509_REQ object via given BIO structure.

=end original

指定されたBIO構造体を介して、PEM形式のX509_REQオブジェクトをロードします。
(TBR)

 my $rv = Net::SSLeay::PEM_read_bio_X509_REQ($bio, $x=NULL, $cb=NULL, $u=NULL);
 # $bio - value corresponding to openssl's BIO structure
 #
 # returns: value corresponding to openssl's X509_REQ structure (0 on failure)

=begin original

Example:

=end original

例:
(TBR)

 my $bio = Net::SSLeay::BIO_new_file($filename, 'r');
 my $x509_req = Net::SSLeay::PEM_read_bio_X509_REQ($bio);
 Net::SSLeay::BIO_free($bio);

=item * PEM_read_bio_DHparams

=begin original

Reads DH structure from BIO.

=end original

BIOからDH構造を読み取ります。
(TBR)

 my $rv = Net::SSLeay::PEM_read_bio_DHparams($bio);
 # $bio - value corresponding to openssl's BIO structure
 #
 # returns: value corresponding to openssl's DH structure (0 on failure)

=item * PEM_read_bio_X509_CRL

=begin original

Reads X509_CRL structure from BIO.

=end original

BIOからX509_CRL構造体を読み取ります。
(TBR)

 my $rv = Net::SSLeay::PEM_read_bio_X509_CRL($bio);
 # $bio - value corresponding to openssl's BIO structure
 #
 # returns: value corresponding to openssl's X509_CRL structure (0 on failure)

=item * PEM_read_bio_PrivateKey

=begin original

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before

=end original

B<COMPATIBILITY:>は、Net-SSLeay-1.45以前では使用できません。
(TBR)

=begin original

Loads PEM formated private key via given BIO structure.

=end original

指定されたBIO構造体を介してPEM形式化されたプライベートキーをロードします。
(TBR)

 my $rv = Net::SSLeay::PEM_read_bio_PrivateKey($bio, $cb, $data);
 # $bio - value corresponding to openssl's BIO structure
 # $cb - reference to perl callback function
 # $data - data that will be passed to callback function (see examples below)
 #
 # returns: value corresponding to openssl's EVP_PKEY structure (0 on failure)

=begin original

Example:

=end original

例:
(TBR)

 my $bio = Net::SSLeay::BIO_new_file($filename, 'r');
 my $privkey = Net::SSLeay::PEM_read_bio_PrivateKey($bio); #ask for password if needed
 Net::SSLeay::BIO_free($bio);

=begin original

To use password you have the following options:

=end original

パスワードを使用するには、次のオプションがあります。
(TBR)

 $privkey = Net::SSLeay::PEM_read_bio_PrivateKey($bio, \&callback_func); # use callback func for getting password
 $privkey = Net::SSLeay::PEM_read_bio_PrivateKey($bio, \&callback_func, $data); # use callback_func + pass $data to callback_func
 $privkey = Net::SSLeay::PEM_read_bio_PrivateKey($bio, undef, "secret"); # use password "secret"
 $privkey = Net::SSLeay::PEM_read_bio_PrivateKey($bio, undef, "");       # use empty password

=begin original

Callback function signature:

=end original

コールバック関数のシグネチャ:
(TBR)

 sub callback_func {
   my ($max_passwd_size, $rwflag, $data) = @_;
   # $max_passwd_size - maximum size of returned password (longer values will be discarded)
   # $rwflag - indicates whether we are loading (0) or storing (1) - for PEM_read_bio_PrivateKey always 0
   # $data - the data passed to PEM_read_bio_PrivateKey as 3rd parameter

   return "secret";
 }

=item * PEM_get_string_X509

=begin original

B<NOTE:> Does not exactly correspond to any low level API function

=end original

B<注意:>下位レベルのAPI関数には正確に対応していません
(TBR)

=begin original

Converts/exports X509 certificate to string (PEM format).

=end original

X509証明書を文字列(PEM形式)に変換/エクスポートします。
(TBR)

 Net::SSLeay::PEM_get_string_X509($x509);
 # $x509 - value corresponding to openssl's X509 structure
 #
 # returns: string with $x509 in PEM format

=item * PEM_get_string_PrivateKey

=begin original

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before

=end original

B<COMPATIBILITY:>は、Net-SSLeay-1.45以前では使用できません。
(TBR)

=begin original

Converts public key $pk into PEM formated string (optionally protected with password).

=end original

公開キー$pkをPEM形式の文字列に変換します(オプションでパスワードで保護します)。
(TBR)

 my $rv = Net::SSLeay::PEM_get_string_PrivateKey($pk, $passwd, $enc_alg);
 # $pk - value corresponding to openssl's EVP_PKEY structure
 # $passwd - [optional] (string) password to use for key encryption
 # $enc_alg - [optional] algorithm to use for key encryption (default: DES_CBC) - value corresponding to openssl's EVP_CIPHER structure
 #
 # returns: PEM formated string

=begin original

Examples:

=end original

例:
(TBR)

 $pem_privkey = Net::SSLeay::PEM_get_string_PrivateKey($pk);
 $pem_privkey = Net::SSLeay::PEM_get_string_PrivateKey($pk, "secret");
 $pem_privkey = Net::SSLeay::PEM_get_string_PrivateKey($pk, "secret", Net::SSLeay::EVP_get_cipherbyname("DES-EDE3-CBC"));

=item * PEM_get_string_X509_CRL

=begin original

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before

=end original

B<COMPATIBILITY:>は、Net-SSLeay-1.45以前では使用できません。
(TBR)

=begin original

Converts X509_CRL object $x509_crl into PEM formated string.

=end original

X509_CRLオブジェクト$X509_crlをPEM形式の文字列に変換します。
(TBR)

 Net::SSLeay::PEM_get_string_X509_CRL($x509_crl);
 # $x509_crl - value corresponding to openssl's X509_CRL structure
 #
 # returns: no return value

=item * PEM_get_string_X509_REQ

=begin original

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before

=end original

B<COMPATIBILITY:>は、Net-SSLeay-1.45以前では使用できません。
(TBR)

=begin original

Converts X509_REQ object $x509_crl into PEM formated string.

=end original

X509_REQオブジェクト$X509_crlをPEM形式の文字列に変換します。
(TBR)

 Net::SSLeay::PEM_get_string_X509_REQ($x509_req);
 # $x509_req - value corresponding to openssl's X509_REQ structure
 #
 # returns: no return value

=back

=head3 Low level API: d2i_* (DER format) related functions

=over

=item * d2i_X509_bio

=begin original

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before

=end original

B<COMPATIBILITY:>は、Net-SSLeay-1.45以前では使用できません。
(TBR)

=begin original

Loads DER formated X509 certificate via given BIO structure.

=end original

指定されたBIO構造体を介してDER形式のX509証明書をロードします。
(TBR)

 my $rv = Net::SSLeay::d2i_X509_bio($bp);
 # $bp - value corresponding to openssl's BIO structure
 #
 # returns: value corresponding to openssl's X509 structure (0 on failure)

=begin original

Example:

=end original

例:
(TBR)

 my $bio = Net::SSLeay::BIO_new_file($filename, 'rb');
 my $x509 = Net::SSLeay::d2i_X509_bio($bio);
 Net::SSLeay::BIO_free($bio);

=begin original

Check openssl doc L<http://www.openssl.org/docs/crypto/d2i_X509.html|http://www.openssl.org/docs/crypto/d2i_X509.html>

=end original

openssl doc L<http://www.openssl.org/docs/crypto/d2i_X509.html|http://www.openssl.org/docs/crypto/d2i_X509.html>を確認します。
(TBR)

=item * d2i_X509_CRL_bio

=begin original

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before

=end original

B<COMPATIBILITY:>は、Net-SSLeay-1.45以前では使用できません。
(TBR)

=begin original

Loads DER formated X509_CRL object via given BIO structure.

=end original

指定されたBIO構造体を介して、DER形式のX509_CRLオブジェクトをロードします。
(TBR)

 my $rv = Net::SSLeay::d2i_X509_CRL_bio($bp);
 # $bp - value corresponding to openssl's BIO structure
 #
 # returns: value corresponding to openssl's X509_CRL structure (0 on failure)

=begin original

Example:

=end original

例:
(TBR)

 my $bio = Net::SSLeay::BIO_new_file($filename, 'rb');
 my $x509_crl = Net::SSLeay::d2i_X509_CRL_bio($bio);
 Net::SSLeay::BIO_free($bio);

=item * d2i_X509_REQ_bio

=begin original

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before

=end original

B<COMPATIBILITY:>は、Net-SSLeay-1.45以前では使用できません。
(TBR)

=begin original

Loads DER formated X509_REQ object via given BIO structure.

=end original

指定されたBIO構造体を介してDER形式のX509_REQオブジェクトをロードします。
(TBR)

 my $rv = Net::SSLeay::d2i_X509_REQ_bio($bp);
 # $bp - value corresponding to openssl's BIO structure
 #
 # returns: value corresponding to openssl's X509_REQ structure (0 on failure)

=begin original

Example:

=end original

例:
(TBR)

 my $bio = Net::SSLeay::BIO_new_file($filename, 'rb');
 my $x509_req = Net::SSLeay::d2i_X509_REQ_bio($bio);
 Net::SSLeay::BIO_free($bio);

=back

=head3 Low level API: PKCS12 related functions

=over

=item * P_PKCS12_load_file

=begin original

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before

=end original

B<COMPATIBILITY:>は、Net-SSLeay-1.45以前では使用できません。
(TBR)

=begin original

Loads X509 certificate + private key + certificates of CA chain (if present in PKCS12 file).

=end original

X509証明書+秘密キー+CAチェーンの証明書(PKCS12ファイルに存在する場合)をロードします。
(TBR)

 my ($privkey, $cert, @cachain) = Net::SSLeay::P_PKCS12_load_file($filename, $load_chain, $password);
 # $filename - name of PKCS12 file
 # $load_chain - [optional] whether load (1) or not(0) CA chain (default: 0)
 # $password - [optional] password for private key
 #
 # returns: triplet ($privkey, $cert, @cachain)
 #          $privkey - value corresponding to openssl's EVP_PKEY structure
 #          $cert - value corresponding to openssl's X509 structure
 #          @cachain - array of values corresponding to openssl's X509 structure (empty if no CA chain in PKCS12)

=begin original

B<IMPORTANT NOTE:> after you do the job you need to call X509_free() on $privkey + all members
of @cachain and EVP_PKEY_free() on $privkey.

=end original

B<重要な注意:>ジョブを実行した後、$privkeyでX509_free()+@cachainのすべてのメンバーと$privkeyでEVP_PKEY_free()を呼び出す必要があります。
(TBR)

=begin original

Examples:

=end original

例:
(TBR)

 my ($privkey, $cert) = Net::SSLeay::P_PKCS12_load_file($filename);
 #or
 my ($privkey, $cert) = Net::SSLeay::P_PKCS12_load_file($filename, 0, $password);
 #or
 my ($privkey, $cert, @cachain) = Net::SSLeay::P_PKCS12_load_file($filename, 1);
 #or
 my ($privkey, $cert, @cachain) = Net::SSLeay::P_PKCS12_load_file($filename, 1, $password);

 #BEWARE: THIS IS WRONG - MEMORY LEAKS! (you cannot free @cachain items)
 my ($privkey, $cert) = Net::SSLeay::P_PKCS12_load_file($filename, 1, $password);

=back

=head3 Low level API: SESSION_* related functions

=over

=item * d2i_SSL_SESSION

=begin original

Transforms the external ASN1 representation of an SSL/TLS session, stored as binary data
at location pp with length length, into an SSL_SESSION object.

=end original

ロケーションppに長さlengthのバイナリーデータとして保管されているSSL/TLSセッションの外部ASN1表現をSSL_SESSIONオブジェクトに変換します。
(TBR)

=begin original

??? (does this function really work?)

=end original

(この関数は本当に動作しますか?)
(TBR)

 my $rv = Net::SSLeay::d2i_SSL_SESSION($a, $pp, $length);
 # $a - value corresponding to openssl's SSL_SESSION structure
 # $pp - pointer/buffer ???
 # $length - ???
 #
 # returns: ???

=begin original

Check openssl doc L<http://www.openssl.org/docs/ssl/d2i_SSL_SESSION.html|http://www.openssl.org/docs/ssl/d2i_SSL_SESSION.html>

=end original

openssl doc Lを確認してください<http://www.openssl.org/docs/ssl/d2i_SSL_SESSION.HTML|http://www.openssl.org/docs/ssl/d2i_SSL_SESSION.HTML>
(TBR)

=item * i2d_SSL_SESSION

=begin original

Transforms the SSL_SESSION object in into the ASN1 representation and stores it
into the memory location pointed to by pp. The length of the resulting ASN1
representation is returned.

=end original

内のSSL_SESSIONオブジェクトをASN1表現に変換し、ppが指すメモリー位置に保管します。
結果のASN1表現の長さが戻されます。
(TBR)

=begin original

??? (does this function really work?)

=end original

(この関数は本当に動作しますか?)
(TBR)

 my $rv = Net::SSLeay::i2d_SSL_SESSION($in, $pp);
 # $in - value corresponding to openssl's SSL_SESSION structure
 # $pp - pointer/data ???
 #
 # returns: 1 on success, 0

=begin original

Check openssl doc L<http://www.openssl.org/docs/ssl/d2i_SSL_SESSION.html|http://www.openssl.org/docs/ssl/d2i_SSL_SESSION.html>

=end original

openssl doc Lを確認してください<http://www.openssl.org/docs/ssl/d2i_SSL_SESSION.HTML|http://www.openssl.org/docs/ssl/d2i_SSL_SESSION.HTML>
(TBR)

=item * SESSION_new

=begin original

Creates a new SSL_SESSION structure.

=end original

新しいSSL_SESSION構造体を作成します。
(TBR)

 my $rv = Net::SSLeay::SESSION_new();
 #
 # returns: value corresponding to openssl's SSL_SESSION structure (0 on failure)

=item * SESSION_free

=begin original

Free an allocated SSL_SESSION structure.

=end original

割り当てられたSSL_SESSION構造体を解放します。
(TBR)

 Net::SSLeay::SESSION_free($ses);
 # $ses - value corresponding to openssl's SSL_SESSION structure
 #
 # returns: no return value

=begin original

Check openssl doc L<http://www.openssl.org/docs/ssl/SSL_SESSION_free.html|http://www.openssl.org/docs/ssl/SSL_SESSION_free.html>

=end original

openssl doc L<http://www.openssl.org/docs/ssl/SSL_SESSION_free.html|http://www.openssl.org/docs/ssl/SSL_SESSION_free.html>を確認します。
(TBR)

=item * SESSION_cmp

=begin original

Compare two SSL_SESSION structures.

=end original

2つのSSL_SESSION構造体を比較します。
(TBR)

 my $rv = Net::SSLeay::SESSION_cmp($sesa, $sesb);
 # $sesa - value corresponding to openssl's SSL_SESSION structure
 # $sesb - value corresponding to openssl's SSL_SESSION structure
 #
 # returns: 0 if the two structures are the same

=begin original

B<NOTE:> Not available in openssl 1.0 or later

=end original

B<注:>openssl 1.0以降では使用できません。
(TBR)

=item * SESSION_get_app_data

=begin original

Can be used to get application defined value/data.

=end original

アプリケーション定義の値/データを取得するために使用できます。
(TBR)

 my $rv = Net::SSLeay::SESSION_get_app_data($ses);
 # $ses - value corresponding to openssl's SSL_SESSION structure
 #
 # returns: string/buffer/pointer ???

=item * SESSION_set_app_data

=begin original

Can be used to set some application defined value/data.

=end original

一部のアプリケーション定義の値/データを設定するために使用できます。
(TBR)

 my $rv = Net::SSLeay::SESSION_set_app_data($s, $a);
 # $s - value corresponding to openssl's SSL_SESSION structure
 # $a - (string/buffer/pointer ???) data
 #
 # returns: ???

=item * SESSION_get_ex_data

=begin original

Is used to retrieve the information for $idx from session $ses.

=end original

セッション$sesから$idxの情報を取得するために使用されます。
(TBR)

 my $rv = Net::SSLeay::SESSION_get_ex_data($ses, $idx);
 # $ses - value corresponding to openssl's SSL_SESSION structure
 # $idx - (integer) index for application specific data
 #
 # returns: pointer to ???

=begin original

Check openssl doc L<http://www.openssl.org/docs/ssl/SSL_SESSION_get_ex_new_index.html|http://www.openssl.org/docs/ssl/SSL_SESSION_get_ex_new_index.html>

=end original

openssl doc L<http://www.openssl.org/docs/ssl/SSL_SESSION_get_ex_new_index.html|http://www.openssl.org/docs/ssl/SSL_SESSION_get_ex_new_index.html>を確認します。
(TBR)

=item * SESSION_set_ex_data

=begin original

Is used to store application data at arg for idx into the session object.

=end original

idxのargにあるアプリケーションデータをセッションオブジェクトに格納するために使用されます。
(TBR)

 my $rv = Net::SSLeay::SESSION_set_ex_data($ss, $idx, $data);
 # $ss - value corresponding to openssl's SSL_SESSION structure
 # $idx - (integer) ???
 # $data - (pointer) ???
 #
 # returns: 1 on success, 0 on failure

=begin original

Check openssl doc L<http://www.openssl.org/docs/ssl/SSL_SESSION_get_ex_new_index.html|http://www.openssl.org/docs/ssl/SSL_SESSION_get_ex_new_index.html>

=end original

openssl doc L<http://www.openssl.org/docs/ssl/SSL_SESSION_get_ex_new_index.html|http://www.openssl.org/docs/ssl/SSL_SESSION_get_ex_new_index.html>を確認します。
(TBR)

=item * SESSION_get_ex_new_index

=begin original

Is used to register a new index for application specific data.

=end original

アプリケーション固有のデータの新しいインデックスを登録するために使用されます。
(TBR)

 my $rv = Net::SSLeay::SESSION_get_ex_new_index($argl, $argp, $new_func, $dup_func, $free_func);
 # $argl - (long) ???
 # $argp - (pointer) ???
 # $new_func - function pointer ??? (CRYPTO_EX_new *)
 # $dup_func - function pointer ??? (CRYPTO_EX_dup *)
 # $free_func - function pointer ??? (CRYPTO_EX_free *)
 #
 # returns: (integer) ???

=begin original

Check openssl doc L<http://www.openssl.org/docs/ssl/SSL_SESSION_get_ex_new_index.html|http://www.openssl.org/docs/ssl/SSL_SESSION_get_ex_new_index.html>

=end original

openssl doc L<http://www.openssl.org/docs/ssl/SSL_SESSION_get_ex_new_index.html|http://www.openssl.org/docs/ssl/SSL_SESSION_get_ex_new_index.html>を確認します。
(TBR)

=item * SESSION_get_master_key

=begin original

B<NOTE:> Does not exactly correspond to any low level API function

=end original

B<注意:>下位レベルのAPI関数には正確に対応していません
(TBR)

=begin original

Returns 'master_key' value from SSL_SESSION structure $s

=end original

SSL_SESSION構造体$sから'master_key'値を返します。
(TBR)

 Net::SSLeay::SESSION_get_master_key($s);
 # $s - value corresponding to openssl's SSL_SESSION structure
 #
 # returns: master key (binary data)

=item * SESSION_set_master_key

=begin original

Sets 'master_key' value for SSL_SESSION structure $s

=end original

SSL_SESSION構造体$sの'master_key'値を設定します。
(TBR)

 Net::SSLeay::SESSION_set_master_key($s, $key);
 # $s - value corresponding to openssl's SSL_SESSION structure
 # $key - master key (binary data)
 #
 # returns: no return value

=item * SESSION_get_time

=begin original

Returns the time at which the session s was established.
The time is given in seconds since 1.1.1970.

=end original

セッションが確立された時刻を返します。
この時刻は、1.1.1970年からの秒数で指定されます。
(TBR)

 my $rv = Net::SSLeay::SESSION_get_time($s);
 # $s - value corresponding to openssl's SSL_SESSION structure
 #
 # returns: timestamp (seconds since 1.1.1970)

=begin original

Check openssl doc L<http://www.openssl.org/docs/ssl/SSL_SESSION_get_time.html|http://www.openssl.org/docs/ssl/SSL_SESSION_get_time.html>

=end original

openssl doc L<http://www.openssl.org/docs/ssl/SSL_SESSION_get_time.html|http://www.openssl.org/docs/ssl/SSL_SESSION_get_time.html>を確認します。
(TBR)

=item * get_time

=begin original

Technically the same functionality as L</SESSION_get_time>.

=end original

技術的にはL</SESSION_get_time>と同じ機能です。
(TBR)

 my $rv = Net::SSLeay::get_time($s);

=item * SESSION_get_timeout

=begin original

Returns the timeout value set for session $s in seconds.

=end original

セッション$sに設定されたタイムアウト値を秒単位で返します。
(TBR)

 my $rv = Net::SSLeay::SESSION_get_timeout($s);
 # $s - value corresponding to openssl's SSL_SESSION structure
 #
 # returns: timeout (in seconds)

=begin original

Check openssl doc L<http://www.openssl.org/docs/ssl/SSL_SESSION_get_time.html|http://www.openssl.org/docs/ssl/SSL_SESSION_get_time.html>

=end original

openssl doc L<http://www.openssl.org/docs/ssl/SSL_SESSION_get_time.html|http://www.openssl.org/docs/ssl/SSL_SESSION_get_time.html>を確認します。
(TBR)

=item * get_timeout

=begin original

Technically the same functionality as L</SESSION_get_timeout>.

=end original

技術的にはL</SESSION_get_timeout>と同じ機能です。
(TBR)

 my $rv = Net::SSLeay::get_timeout($s);

=item * SESSION_print

=begin original

B<NOTE:> Does not exactly correspond to any low level API function

=end original

B<注意:>下位レベルのAPI関数には正確に対応していません
(TBR)

=begin original

Prints session details (e.g. protocol version, ciprher, session-id ...) to BIO.

=end original

セッションの詳細(プロトコルのバージョン、セッションIDなど)をBIOに出力します。
(TBR)

 my $rv = Net::SSLeay::SESSION_print($fp, $ses);
 # $fp - value corresponding to openssl's BIO structure
 # $ses - value corresponding to openssl's SSL_SESSION structure
 #
 # returns: 1 on success, 0 on failure

=begin original

You have to use necessary BIO functions like this:

=end original

次のように、必要なBIO関数を使用する必要があります。
(TBR)

 # let us have $ssl corresponding to openssl's SSL structure
 my $ses = Net::SSLeay::get_session($ssl);
 my $bio = Net::SSLeay::BIO_new(&Net::SSLeay::BIO_s_mem);
 Net::SSLeay::SESSION_print($bio, $ses);
 print Net::SSLeay::BIO_read($bio);

=item * SESSION_print_fp

=begin original

Prints session details (e.g. protocol version, ciprher, session-id ...) to file handle.

=end original

セッションの詳細(プロトコルのバージョン、セッションIDなど)をファイルハンドルに出力します。
(TBR)

 my $rv = Net::SSLeay::SESSION_print_fp($fp, $ses);
 # $fp - perl file handle
 # $ses - value corresponding to openssl's SSL_SESSION structure
 #
 # returns: 1 on success, 0 on failure

=begin original

Example:

=end original

例:
(TBR)

 # let us have $ssl corresponding to openssl's SSL structure
 my $ses = Net::SSLeay::get_session($ssl);
 open my $fh, ">", "output.txt";
 Net::SSLeay::SESSION_print_fp($fh,$ses);

=item * SESSION_set_time

=begin original

Replaces the creation time of the session s with the chosen value $t (seconds since 1.1.1970).

=end original

セッションsの作成時刻を、選択した値$t(1.1.1970からの秒数)に置き換えます。
(TBR)

 my $rv = Net::SSLeay::SESSION_set_time($ses, $t);
 # $ses - value corresponding to openssl's SSL_SESSION structure
 # $t - time value
 #
 # returns: 1 on success

=begin original

Check openssl doc L<http://www.openssl.org/docs/ssl/SSL_SESSION_get_time.html|http://www.openssl.org/docs/ssl/SSL_SESSION_get_time.html>

=end original

openssl doc L<http://www.openssl.org/docs/ssl/SSL_SESSION_get_time.html|http://www.openssl.org/docs/ssl/SSL_SESSION_get_time.html>を確認します。
(TBR)

=item * set_time

=begin original

Technically the same functionality as L</SESSION_set_time>.

=end original

技術的にはL</SESSION_set_time>と同じ機能です。
(TBR)

 my $rv = Net::SSLeay::set_time($ses, $t);

=item * SESSION_set_timeout

=begin original

Sets the timeout value for session s in seconds to $t.

=end original

セッションsのタイムアウト値を秒単位で$tに設定します。
(TBR)

 my $rv = Net::SSLeay::SESSION_set_timeout($s, $t);
 # $s - value corresponding to openssl's SSL_SESSION structure
 # $t - timeout (in seconds)
 #
 # returns: 1 on success

=begin original

Check openssl doc L<http://www.openssl.org/docs/ssl/SSL_SESSION_get_time.html|http://www.openssl.org/docs/ssl/SSL_SESSION_get_time.html>

=end original

openssl doc L<http://www.openssl.org/docs/ssl/SSL_SESSION_get_time.html|http://www.openssl.org/docs/ssl/SSL_SESSION_get_time.html>を確認します。
(TBR)

=item * set_timeout

=begin original

Technically the same functionality as L</SESSION_set_timeout>.

=end original

技術的にはL</SESSION_set_timeout>と同じ機能です。
(TBR)

 my $rv = Net::SSLeay::set_timeout($ses, $t);

=back

=head3 Low level API: SSL_CTX_* related functions

=begin original

B<NOTE:> Please note that the function described in this chapter have "SSL_" part stripped from their original openssl names.

=end original

B<注:>この章で説明する関数では、元のopenssl名から「SSL_」の部分が削除されていることに注意してください。
(TBR)

=over

=item * CTX_add_client_CA

=begin original

Adds the CA name extracted from $cacert to the list of CAs sent to the client when requesting a client certificate for $ctx.

=end original

$ctxのクライアント証明書を要求するときにクライアントに送信されるCAのリストに、$cacertから抽出されたCA名を追加します。
(TBR)

 my $rv = Net::SSLeay::CTX_add_client_CA($ctx, $cacert);
 # $ctx - value corresponding to openssl's SSL_CTX structure
 # $cacert - value corresponding to openssl's X509 structure
 #
 # returns: 1 on success, 0 on failure

=begin original

Check openssl doc L<http://www.openssl.org/docs/ssl/SSL_CTX_set_client_CA_list.html|http://www.openssl.org/docs/ssl/SSL_CTX_set_client_CA_list.html>

=end original

openssl doc L<http://www.openssl.org/docs/ssl/SSL_CTX_set_client_CA_list.html|http://www.openssl.org/docs/ssl/SSL_CTX_set_client_CA_list.html>を確認します。
(TBR)

=item * CTX_add_extra_chain_cert

=begin original

Adds the certificate $x509 to the certificate chain presented together with the certificate. Several certificates can be added one after the other.

=end original

証明書$x509を、証明書とともに表示される証明書チェーンに追加します。
複数の証明書を1つずつ追加できます。
(TBR)

 my $rv = Net::SSLeay::CTX_add_extra_chain_cert($ctx, $x509);
 # $ctx - value corresponding to openssl's SSL_CTX structure
 # $x509 - value corresponding to openssl's X509 structure
 #
 # returns: 1 on success, check out the error stack to find out the reason for failure otherwise

=begin original

Check openssl doc L<http://www.openssl.org/docs/ssl/SSL_CTX_add_extra_chain_cert.html|http://www.openssl.org/docs/ssl/SSL_CTX_add_extra_chain_cert.html>

=end original

openssl doc L<http://www.openssl.org/docs/ssl/SSL_CTX_add_extra_chain_cert.html|http://www.openssl.org/docs/ssl/SSL_CTX_add_extra_chain_cert.html>を確認します。
(TBR)

=item * CTX_add_session

=begin original

Adds the session $ses to the context $ctx.

=end original

セッション$sesをコンテキスト$ctxに追加します。
(TBR)

 my $rv = Net::SSLeay::CTX_add_session($ctx, $ses);
 # $ctx - value corresponding to openssl's SSL_CTX structure
 # $ses - value corresponding to openssl's SSL_SESSION structure
 #
 # returns: 1 on success, 0 on failure

=begin original

Check openssl doc L<http://www.openssl.org/docs/ssl/SSL_CTX_add_session.html|http://www.openssl.org/docs/ssl/SSL_CTX_add_session.html>

=end original

openssl doc L<http://www.openssl.org/docs/ssl/SSL_CTX_add_session.html|http://www.openssl.org/docs/ssl/SSL_CTX_add_session.html>を確認します。
(TBR)

=item * CTX_callback_ctrl

=begin original

??? (more info needed)

=end original

(詳細情報が必要)
(TBR)

 my $rv = Net::SSLeay::CTX_callback_ctrl($ctx, $cmd, $fp);
 # $ctx - value corresponding to openssl's SSL_CTX structure
 # $cmd - (integer) command id
 # $fp - (function pointer) ???
 #
 # returns: ???

=begin original

Check openssl doc L<http://www.openssl.org/docs/ssl/SSL_CTX_ctrl.html|http://www.openssl.org/docs/ssl/SSL_CTX_ctrl.html>

=end original

openssl doc L<http://www.openssl.org/docs/ssl/SSL_CTX_ctrl.html|http://www.openssl.org/docs/ssl/SSL_CTX_ctrl.html>を確認します。
(TBR)

=item * CTX_check_private_key

=begin original

Checks the consistency of a private key with the corresponding certificate loaded into $ctx.

=end original

秘密鍵と、$ctxにロードされた対応する証明書との整合性をチェックします。
(TBR)

 my $rv = Net::SSLeay::CTX_check_private_key($ctx);
 # $ctx - value corresponding to openssl's SSL_CTX structure
 #
 # returns: 1 on success, otherwise check out the error stack to find out the reason

=begin original

Check openssl doc L<http://www.openssl.org/docs/ssl/SSL_CTX_use_certificate.html|http://www.openssl.org/docs/ssl/SSL_CTX_use_certificate.html>

=end original

openssl doc L<http://www.openssl.org/docs/ssl/SSL_CTX_use_certificate.html|http://www.openssl.org/docs/ssl/SSL_CTX_use_certificate.html>を確認します。
(TBR)

=item * CTX_ctrl

=begin original

Internal handling function for SSL_CTX objects.

=end original

SSL_CTXオブジェクトの内部処理関数。
(TBR)

=begin original

B<BEWARE:> openssl doc says: This function should never be called directly!

=end original

B<BEWARE:>openssl doc says:この関数を直接呼び出すべきではありません!
(TBR)

 my $rv = Net::SSLeay::CTX_ctrl($ctx, $cmd, $larg, $parg);
 # $ctx - value corresponding to openssl's SSL_CTX structure
 # $cmd - (integer) command id
 # $larg - (integer) long ???
 # $parg - (string/pointer) ???
 #
 # returns: (long) result of given command ???

 #valid $cmd values
  1 - SSL_CTRL_NEED_TMP_RSA
  2 - SSL_CTRL_SET_TMP_RSA
  3 - SSL_CTRL_SET_TMP_DH
  4 - SSL_CTRL_SET_TMP_ECDH
  5 - SSL_CTRL_SET_TMP_RSA_CB
  6 - SSL_CTRL_SET_TMP_DH_CB
  7 - SSL_CTRL_SET_TMP_ECDH_CB
  8 - SSL_CTRL_GET_SESSION_REUSED
  9 - SSL_CTRL_GET_CLIENT_CERT_REQUEST
 10 - SSL_CTRL_GET_NUM_RENEGOTIATIONS
 11 - SSL_CTRL_CLEAR_NUM_RENEGOTIATIONS
 12 - SSL_CTRL_GET_TOTAL_RENEGOTIATIONS
 13 - SSL_CTRL_GET_FLAGS
 14 - SSL_CTRL_EXTRA_CHAIN_CERT
 15 - SSL_CTRL_SET_MSG_CALLBACK
 16 - SSL_CTRL_SET_MSG_CALLBACK_ARG
 17 - SSL_CTRL_SET_MTU
 20 - SSL_CTRL_SESS_NUMBER
 21 - SSL_CTRL_SESS_CONNECT
 22 - SSL_CTRL_SESS_CONNECT_GOOD
 23 - SSL_CTRL_SESS_CONNECT_RENEGOTIATE
 24 - SSL_CTRL_SESS_ACCEPT
 25 - SSL_CTRL_SESS_ACCEPT_GOOD
 26 - SSL_CTRL_SESS_ACCEPT_RENEGOTIATE
 27 - SSL_CTRL_SESS_HIT
 28 - SSL_CTRL_SESS_CB_HIT
 29 - SSL_CTRL_SESS_MISSES
 30 - SSL_CTRL_SESS_TIMEOUTS
 31 - SSL_CTRL_SESS_CACHE_FULL
 32 - SSL_CTRL_OPTIONS
 33 - SSL_CTRL_MODE
 40 - SSL_CTRL_GET_READ_AHEAD
 41 - SSL_CTRL_SET_READ_AHEAD
 42 - SSL_CTRL_SET_SESS_CACHE_SIZE
 43 - SSL_CTRL_GET_SESS_CACHE_SIZE
 44 - SSL_CTRL_SET_SESS_CACHE_MODE
 45 - SSL_CTRL_GET_SESS_CACHE_MODE
 50 - SSL_CTRL_GET_MAX_CERT_LIST
 51 - SSL_CTRL_SET_MAX_CERT_LIST
 52 - SSL_CTRL_SET_MAX_SEND_FRAGMENT
 53 - SSL_CTRL_SET_TLSEXT_SERVERNAME_CB
 54 - SSL_CTRL_SET_TLSEXT_SERVERNAME_ARG
 55 - SSL_CTRL_SET_TLSEXT_HOSTNAME
 56 - SSL_CTRL_SET_TLSEXT_DEBUG_CB
 57 - SSL_CTRL_SET_TLSEXT_DEBUG_ARG
 58 - SSL_CTRL_GET_TLSEXT_TICKET_KEYS
 59 - SSL_CTRL_SET_TLSEXT_TICKET_KEYS
 60 - SSL_CTRL_SET_TLSEXT_OPAQUE_PRF_INPUT
 61 - SSL_CTRL_SET_TLSEXT_OPAQUE_PRF_INPUT_CB
 62 - SSL_CTRL_SET_TLSEXT_OPAQUE_PRF_INPUT_CB_ARG
 63 - SSL_CTRL_SET_TLSEXT_STATUS_REQ_CB
 64 - SSL_CTRL_SET_TLSEXT_STATUS_REQ_CB_ARG
 65 - SSL_CTRL_SET_TLSEXT_STATUS_REQ_TYPE
 66 - SSL_CTRL_GET_TLSEXT_STATUS_REQ_EXTS
 67 - SSL_CTRL_SET_TLSEXT_STATUS_REQ_EXTS
 68 - SSL_CTRL_GET_TLSEXT_STATUS_REQ_IDS
 69 - SSL_CTRL_SET_TLSEXT_STATUS_REQ_IDS
 70 - SSL_CTRL_GET_TLSEXT_STATUS_REQ_OCSP_RESP
 71 - SSL_CTRL_SET_TLSEXT_STATUS_REQ_OCSP_RESP
 72 - SSL_CTRL_SET_TLSEXT_TICKET_KEY_CB
 73 - DTLS_CTRL_GET_TIMEOUT
 74 - DTLS_CTRL_HANDLE_TIMEOUT
 75 - DTLS_CTRL_LISTEN
 76 - SSL_CTRL_GET_RI_SUPPORT
 77 - SSL_CTRL_CLEAR_OPTIONS
 78 - SSL_CTRL_CLEAR_MODE

=begin original

Check openssl doc L<http://www.openssl.org/docs/ssl/SSL_CTX_ctrl.html|http://www.openssl.org/docs/ssl/SSL_CTX_ctrl.html>

=end original

openssl doc L<http://www.openssl.org/docs/ssl/SSL_CTX_ctrl.html|http://www.openssl.org/docs/ssl/SSL_CTX_ctrl.html>を確認します。
(TBR)

=item * CTX_flush_sessions

=begin original

Causes a run through the session cache of $ctx to remove sessions expired at time $tm.

=end original

$ctxのセッションキャッシュを実行して、時間$tmに期限切れになったセッションを削除します。
(TBR)

 Net::SSLeay::CTX_flush_sessions($ctx, $tm);
 # $ctx - value corresponding to openssl's SSL_CTX structure
 # $tm - specifies the time which should be used for the expiration test (seconds since 1.1.1970)
 #
 # returns: no return value

=begin original

Check openssl doc L<http://www.openssl.org/docs/ssl/SSL_CTX_flush_sessions.html|http://www.openssl.org/docs/ssl/SSL_CTX_flush_sessions.html>

=end original

openssl doc L<http://www.openssl.org/docs/ssl/SSL_CTX_flush_sessions.html|http://www.openssl.org/docs/ssl/SSL_CTX_flush_sessions.html>を確認します。
(TBR)

=item * CTX_free

=begin original

Free an allocated SSL_CTX object.

=end original

割り当てられたSSL_CTXオブジェクトを解放します。
(TBR)

 Net::SSLeay::CTX_free($ctx);
 # $ctx - value corresponding to openssl's SSL_CTX structure
 #
 # returns: no return value

=begin original

Check openssl doc L<http://www.openssl.org/docs/ssl/SSL_CTX_free.html|http://www.openssl.org/docs/ssl/SSL_CTX_free.html>

=end original

openssl doc L<http://www.openssl.org/docs/ssl/SSL_CTX_free.html|http://www.openssl.org/docs/ssl/SSL_CTX_free.html>を確認します。
(TBR)

=item * CTX_get_app_data

=begin original

Can be used to get application defined value/data.

=end original

アプリケーション定義の値/データを取得するために使用できます。
(TBR)

 my $rv = Net::SSLeay::CTX_get_app_data($ctx);
 # $ctx - value corresponding to openssl's SSL_CTX structure
 #
 # returns: string/buffer/pointer ???

=item * CTX_set_app_data

=begin original

Can be used to set some application defined value/data.

=end original

一部のアプリケーション定義の値/データを設定するために使用できます。
(TBR)

 my $rv = Net::SSLeay::CTX_set_app_data($ctx, $arg);
 # $ctx - value corresponding to openssl's SSL_CTX structure
 # $arg - (string/buffer/pointer ???) data
 #
 # returns: ???

=item * CTX_get_cert_store

=begin original

Returns the current certificate verification storage.

=end original

現在の証明書検証ストレージを返します。
(TBR)

 my $rv = Net::SSLeay::CTX_get_cert_store($ctx);
 # $ctx - value corresponding to openssl's SSL_CTX structure
 #
 # returns: value corresponding to openssl's X509_STORE structure (0 on failure)

=begin original

Check openssl doc L<http://www.openssl.org/docs/ssl/SSL_CTX_set_cert_store.html|http://www.openssl.org/docs/ssl/SSL_CTX_set_cert_store.html>

=end original

openssl doc L<http://www.openssl.org/docs/ssl/SSL_CTX_set_cert_store.html|http://www.openssl.org/docs/ssl/SSL_CTX_set_cert_store.html>を確認します。
(TBR)

=item * CTX_get_client_CA_list

=begin original

Returns the list of client CAs explicitly set for $ctx using L</CTX_set_client_CA_list>.

=end original

L</CTX_set_client_CA_list>を使用して、$ctxに明示的に設定されたクライアントCAのリストを返します。
(TBR)

 my $rv = Net::SSLeay::CTX_get_client_CA_list($ctx);
 # $ctx - value corresponding to openssl's SSL_CTX structure
 #
 # returns: value corresponding to openssl's X509_NAME_STACK structure (0 on failure)

=begin original

Check openssl doc L<http://www.openssl.org/docs/ssl/SSL_get_client_CA_list.html|http://www.openssl.org/docs/ssl/SSL_get_client_CA_list.html>

=end original

openssl doc L<http://www.openssl.org/docs/ssl/SSL_get_client_CA_list.html|http://www.openssl.org/docs/ssl/SSL_get_client_CA_list.html>を確認します。
(TBR)

=item * CTX_get_ex_data

=begin original

Is used to retrieve the information for index $idx from $ctx.

=end original

$ctxからインデックス$idxの情報を取得するために使用されます。
(TBR)

 my $rv = Net::SSLeay::CTX_get_ex_data($ssl, $idx);
 # $ssl - value corresponding to openssl's SSL_CTX structure
 # $idx - (integer) index for application specific data
 #
 # returns: pointer to ???

=begin original

Check openssl doc L<http://www.openssl.org/docs/ssl/SSL_CTX_get_ex_new_index.html|http://www.openssl.org/docs/ssl/SSL_CTX_get_ex_new_index.html>

=end original

openssl doc L<http://www.openssl.org/docs/ssl/SSL_CTX_get_ex_new_index.html|http://www.openssl.org/docs/ssl/SSL_CTX_get_ex_new_index.html>を確認します。
(TBR)

=item * CTX_get_ex_new_index

=begin original

Is used to register a new index for application specific data.

=end original

アプリケーション固有のデータの新しいインデックスを登録するために使用されます。
(TBR)

 my $rv = Net::SSLeay::CTX_get_ex_new_index($argl, $argp, $new_func, $dup_func, $free_func);
 # $argl - (long) ???
 # $argp - (pointer) ???
 # $new_func - function pointer ??? (CRYPTO_EX_new *)
 # $dup_func - function pointer ??? (CRYPTO_EX_dup *)
 # $free_func - function pointer ??? (CRYPTO_EX_free *)
 #
 # returns: (integer) ???

=begin original

Check openssl doc L<http://www.openssl.org/docs/ssl/SSL_CTX_get_ex_new_index.html|http://www.openssl.org/docs/ssl/SSL_CTX_get_ex_new_index.html>

=end original

openssl doc L<http://www.openssl.org/docs/ssl/SSL_CTX_get_ex_new_index.html|http://www.openssl.org/docs/ssl/SSL_CTX_get_ex_new_index.html>を確認します。
(TBR)

=item * CTX_get_mode

=begin original

Returns the mode set for ctx.

=end original

ctxに設定されたモードを返します。
(TBR)

 my $rv = Net::SSLeay::CTX_get_mode($ctx);
 # $ctx - value corresponding to openssl's SSL_CTX structure
 #
 # returns: mode (bitmask)

 #to decode the return value (bitmask) use:
 0x00000001 corresponds to SSL_MODE_ENABLE_PARTIAL_WRITE
 0x00000002 corresponds to SSL_MODE_ACCEPT_MOVING_WRITE_BUFFER
 0x00000004 corresponds to SSL_MODE_AUTO_RETRY
 0x00000008 corresponds to SSL_MODE_NO_AUTO_CHAIN
 0x00000010 corresponds to SSL_MODE_RELEASE_BUFFERS
 (note: some of the bits might not be supported by older openssl versions)

=begin original

Check openssl doc L<http://www.openssl.org/docs/ssl/SSL_CTX_set_mode.html|http://www.openssl.org/docs/ssl/SSL_CTX_set_mode.html>

=end original

openssl doc L<http://www.openssl.org/docs/ssl/SSL_CTX_set_mode.html|http://www.openssl.org/docs/ssl/SSL_CTX_set_mode.html>を確認します。
(TBR)

=item * CTX_set_mode

=begin original

Adds the mode set via bitmask in $mode to $ctx. Options already set before are not cleared.

=end original

$modeのビットマスクで設定されたモードを$ctxに追加します。
以前に設定されたオプションはクリアされません。
(TBR)

 my $rv = Net::SSLeay::CTX_set_mode($ctx, $mode);
 # $ctx - value corresponding to openssl's SSL_CTX structure
 # $mode - mode bitmask
 #
 # returns: the new mode bitmask after adding $mode

=begin original

For bitmask details see L</CTX_get_mode> (above).

=end original

ビットマスクの詳細については、L</CTX_get_mode>(上記)を参照してください。
(TBR)

=begin original

Check openssl doc L<http://www.openssl.org/docs/ssl/SSL_CTX_set_mode.html|http://www.openssl.org/docs/ssl/SSL_CTX_set_mode.html>

=end original

openssl doc L<http://www.openssl.org/docs/ssl/SSL_CTX_set_mode.html|http://www.openssl.org/docs/ssl/SSL_CTX_set_mode.html>を確認します。
(TBR)

=item * CTX_get_options

=begin original

Returns the options (bitmask) set for $ctx.

=end original

$ctxに設定されているオプション(ビットマスク)を返します。
(TBR)

 my $rv = Net::SSLeay::CTX_get_options($ctx);
 # $ctx - value corresponding to openssl's SSL_CTX structure
 #
 # returns: options (bitmask)

 #to decode the return value (bitmask) use:
 0x00000001 corresponds to SSL_OP_MICROSOFT_SESS_ID_BUG
 0x00000002 corresponds to SSL_OP_NETSCAPE_CHALLENGE_BUG
 0x00000004 corresponds to SSL_OP_LEGACY_SERVER_CONNECT
 0x00000008 corresponds to SSL_OP_NETSCAPE_REUSE_CIPHER_CHANGE_BUG
 0x00000010 corresponds to SSL_OP_SSLREF2_REUSE_CERT_TYPE_BUG
 0x00000020 corresponds to SSL_OP_MICROSOFT_BIG_SSLV3_BUFFER
 0x00000040 corresponds to SSL_OP_MSIE_SSLV2_RSA_PADDING
 0x00000080 corresponds to SSL_OP_SSLEAY_080_CLIENT_DH_BUG
 0x00000100 corresponds to SSL_OP_TLS_D5_BUG
 0x00000200 corresponds to SSL_OP_TLS_BLOCK_PADDING_BUG
 0x00000800 corresponds to SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS
 0x80000FFF corresponds to SSL_OP_ALL
 0x00001000 corresponds to SSL_OP_NO_QUERY_MTU
 0x00002000 corresponds to SSL_OP_COOKIE_EXCHANGE
 0x00004000 corresponds to SSL_OP_NO_TICKET
 0x00008000 corresponds to SSL_OP_CISCO_ANYCONNECT
 0x00010000 corresponds to SSL_OP_NO_SESSION_RESUMPTION_ON_RENEGOTIATION
 0x00020000 corresponds to SSL_OP_NO_COMPRESSION
 0x00040000 corresponds to SSL_OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION
 0x00080000 corresponds to SSL_OP_SINGLE_ECDH_USE
 0x00100000 corresponds to SSL_OP_SINGLE_DH_USE
 0x00200000 corresponds to SSL_OP_EPHEMERAL_RSA
 0x00400000 corresponds to SSL_OP_CIPHER_SERVER_PREFERENCE
 0x00800000 corresponds to SSL_OP_TLS_ROLLBACK_BUG
 0x01000000 corresponds to SSL_OP_NO_SSLv2
 0x02000000 corresponds to SSL_OP_NO_SSLv3
 0x04000000 corresponds to SSL_OP_NO_TLSv1
 0x08000000 corresponds to SSL_OP_PKCS1_CHECK_1
 0x10000000 corresponds to SSL_OP_PKCS1_CHECK_2
 0x20000000 corresponds to SSL_OP_NETSCAPE_CA_DN_BUG
 0x40000000 corresponds to SSL_OP_NETSCAPE_DEMO_CIPHER_CHANGE_BUG
 0x80000000 corresponds to SSL_OP_CRYPTOPRO_TLSEXT_BUG
 (note: some of the bits might not be supported by older openssl versions)

=begin original

Check openssl doc L<http://www.openssl.org/docs/ssl/SSL_CTX_set_options.html|http://www.openssl.org/docs/ssl/SSL_CTX_set_options.html>

=end original

openssl doc L<http://www.openssl.org/docs/ssl/SSL_CTX_set_options.html|http://www.openssl.org/docs/ssl/SSL_CTX_set_options.html>を確認します。
(TBR)

=item * CTX_set_options

=begin original

Adds the options set via bitmask in $options to ctx. Options already set before are not cleared.

=end original

$optionsのbitmaskで設定されたオプションをctxに追加します。
以前に設定されたオプションはクリアされません。
(TBR)

 Net::SSLeay::CTX_set_options($ctx, $options);
 # $ctx - value corresponding to openssl's SSL_CTX structure
 # $options - options bitmask
 #
 # returns: the new options bitmask after adding $options

=begin original

For bitmask details see L</CTX_get_options> (above).

=end original

ビットマスクの詳細については、L</CTX_get_options>(上記)を参照してください。
(TBR)

=begin original

Check openssl doc L<http://www.openssl.org/docs/ssl/SSL_CTX_set_options.html|http://www.openssl.org/docs/ssl/SSL_CTX_set_options.html>

=end original

openssl doc L<http://www.openssl.org/docs/ssl/SSL_CTX_set_options.html|http://www.openssl.org/docs/ssl/SSL_CTX_set_options.html>を確認します。
(TBR)

=item * CTX_get_quiet_shutdown

=begin original

Returns the 'quiet shutdown' setting of $ctx.

=end original

$ctxの'quiet shutdown'設定を返します。
(TBR)

 my $rv = Net::SSLeay::CTX_get_quiet_shutdown($ctx);
 # $ctx - value corresponding to openssl's SSL_CTX structure
 #
 # returns: (integer) the current setting

=begin original

Check openssl doc L<http://www.openssl.org/docs/ssl/SSL_CTX_set_quiet_shutdown.html|http://www.openssl.org/docs/ssl/SSL_CTX_set_quiet_shutdown.html>

=end original

openssl doc L<http://www.openssl.org/docs/ssl/SSL_CTX_set_quiet_shutdown.html|http://www.openssl.org/docs/ssl/SSL_CTX_set_quiet_shutdown.html>を確認します。
(TBR)

=item * CTX_get_read_ahead

 my $rv = Net::SSLeay::CTX_get_read_ahead($ctx);
 # $ctx - value corresponding to openssl's SSL_CTX structure
 #
 # returns: (integer) read_ahead value

=item * CTX_get_session_cache_mode

=begin original

Returns the currently used cache mode (bitmask).

=end original

現在使用されているキャッシュモード(ビットマスク)を返します。
(TBR)

 my $rv = Net::SSLeay::CTX_get_session_cache_mode($ctx);
 # $ctx - value corresponding to openssl's SSL_CTX structure
 #
 # returns: mode (bitmask)

 #to decode the return value (bitmask) use:
 0x0000 corresponds to SSL_SESS_CACHE_OFF
 0x0001 corresponds to SSL_SESS_CACHE_CLIENT
 0x0002 corresponds to SSL_SESS_CACHE_SERVER
 0x0080 corresponds to SSL_SESS_CACHE_NO_AUTO_CLEAR
 0x0100 corresponds to SSL_SESS_CACHE_NO_INTERNAL_LOOKUP
 0x0200 corresponds to SSL_SESS_CACHE_NO_INTERNAL_STORE
 (note: some of the bits might not be supported by older openssl versions)

=begin original

Check openssl doc L<http://www.openssl.org/docs/ssl/SSL_CTX_set_session_cache_mode.html|http://www.openssl.org/docs/ssl/SSL_CTX_set_session_cache_mode.html>

=end original

openssl doc L<http://www.openssl.org/docs/ssl/SSL_CTX_set_session_cache_mode.html|http://www.openssl.org/docs/ssl/SSL_CTX_set_session_cache_mode.html>を確認します。
(TBR)

=item * CTX_set_session_cache_mode

=begin original

Enables/disables session caching by setting the operational mode for $ctx to $mode.

=end original

$ctxの操作モードを$modeに設定して、セッションのキャッシュを有効または無効にします。
(TBR)

 my $rv = Net::SSLeay::CTX_set_session_cache_mode($ctx, $mode);
 # $ctx - value corresponding to openssl's SSL_CTX structure
 # $mode - mode (bitmask)
 #
 # returns: previously set cache mode

=begin original

For bitmask details see L</CTX_get_session_cache_mode> (above).

=end original

ビットマスクの詳細については、L</CTX_get_session_cache_mode>(上記)を参照してください。
(TBR)

=begin original

Check openssl doc L<http://www.openssl.org/docs/ssl/SSL_CTX_set_session_cache_mode.html|http://www.openssl.org/docs/ssl/SSL_CTX_set_session_cache_mode.html>

=end original

openssl doc L<http://www.openssl.org/docs/ssl/SSL_CTX_set_session_cache_mode.html|http://www.openssl.org/docs/ssl/SSL_CTX_set_session_cache_mode.html>を確認します。
(TBR)

=item * CTX_get_timeout

=begin original

Returns the currently set timeout value for $ctx.

=end original

$ctxに現在設定されているタイムアウト値を返します。
(TBR)

 my $rv = Net::SSLeay::CTX_get_timeout($ctx);
 # $ctx - value corresponding to openssl's SSL_CTX structure
 #
 # returns: timeout in seconds

=begin original

Check openssl doc L<http://www.openssl.org/docs/ssl/SSL_CTX_set_timeout.html|http://www.openssl.org/docs/ssl/SSL_CTX_set_timeout.html>

=end original

openssl doc L<http://www.openssl.org/docs/ssl/SSL_CTX_set_timeout.html|http://www.openssl.org/docs/ssl/SSL_CTX_set_timeout.html>を確認します。
(TBR)

=item * CTX_get_verify_depth

=begin original

Returns the verification depth limit currently set in $ctx. If no limit has been explicitly set, -1 is returned and the default value will be used.",

=end original

$ctxに現在設定されている検証の深さの限界を戻します。
限界が明示的に設定されていない場合は、-1が戻され、デフォルト値が使用されます。
"
(TBR)

 my $rv = Net::SSLeay::CTX_get_verify_depth($ctx);
 # $ctx - value corresponding to openssl's SSL_CTX structure
 #
 # returns: depth limit currently set in $ctx, -1 if no limit has been explicitly set

=begin original

Check openssl doc L<http://www.openssl.org/docs/ssl/SSL_CTX_get_verify_mode.html|http://www.openssl.org/docs/ssl/SSL_CTX_get_verify_mode.html>

=end original

openssl doc L<http://www.openssl.org/docs/ssl/SSL_CTX_get_verify_mode.html|http://www.openssl.org/docs/ssl/SSL_CTX_get_verify_mode.html>を確認します。
(TBR)

=item * CTX_get_verify_mode

=begin original

Returns the verification mode (bitmask) currently set in $ctx.

=end original

$ctxで現在設定されている検証モード(ビットマスク)を返します。
(TBR)

 my $rv = Net::SSLeay::CTX_get_verify_mode($ctx);
 # $ctx - value corresponding to openssl's SSL_CTX structure
 #
 # returns: mode (bitmask)

 #to decode the return value (bitmask) use:
 0x00 corresponds to SSL_VERIFY_NONE
 0x01 corresponds to SSL_VERIFY_PEER
 0x02 corresponds to SSL_VERIFY_FAIL_IF_NO_PEER_CERT
 0x04 corresponds to SSL_VERIFY_CLIENT_ONCE
 (note: some of the bits might not be supported by older openssl versions)

=begin original

Check openssl doc L<http://www.openssl.org/docs/ssl/SSL_CTX_get_verify_mode.html|http://www.openssl.org/docs/ssl/SSL_CTX_get_verify_mode.html>

=end original

openssl doc L<http://www.openssl.org/docs/ssl/SSL_CTX_get_verify_mode.html|http://www.openssl.org/docs/ssl/SSL_CTX_get_verify_mode.html>を確認します。
(TBR)

=item * CTX_set_verify

=begin original

Sets the verification flags for $ctx to be $mode and specifies the verify_callback function to be used.

=end original

$ctxの検証フラグを$modeに設定し、使用するverify_callback関数を指定します。
(TBR)

 Net::SSLeay::CTX_set_verify($ctx, $mode, $callback);
 # $ctx - value corresponding to openssl's SSL_CTX structure
 # $mode - mode (bitmask)
 # $callback - [optional] reference to perl callback function
 #
 # returns: no return value

=begin original

For bitmask details see L</CTX_get_verify_mode> (above).

=end original

ビットマスクの詳細については、L</CTX_get_verify_mode>(上記)を参照してください。
(TBR)

=begin original

Check openssl doc L<http://www.openssl.org/docs/ssl/SSL_CTX_set_verify.html|http://www.openssl.org/docs/ssl/SSL_CTX_set_verify.html>

=end original

openssl doc L<http://www.openssl.org/docs/ssl/SSL_CTX_set_verify.html|http://www.openssl.org/docs/ssl/SSL_CTX_set_verify.html>を確認します。
(TBR)

=item * CTX_load_verify_locations

=begin original

Specifies the locations for $ctx, at which CA certificates for verification purposes are located. The certificates available via $CAfile and $CApath are trusted.

=end original

$ctxの場所を指定します。
この場所に、検証目的のCA証明書が配置されます。
$CAfileおよび$CApathを介して使用可能な証明書は信頼されます。
(TBR)

 my $rv = Net::SSLeay::CTX_load_verify_locations($ctx, $CAfile, $CApath);
 # $ctx - value corresponding to openssl's SSL_CTX structure
 # $CAfile - (string) file of CA certificates in PEM format, the file can contain several CA certificates (or '')
 # $CApath - (string) directory containing CA certificates in PEM format (or '')
 #
 # returns: 1 on success, 0 on failure (check the error stack to find out the reason)

=begin original

Check openssl doc L<http://www.openssl.org/docs/ssl/SSL_CTX_load_verify_locations.html|http://www.openssl.org/docs/ssl/SSL_CTX_load_verify_locations.html>

=end original

openssl doc L<http://www.openssl.org/docs/ssl/SSL_CTX_load_verify_locations.html|http://www.openssl.org/docs/ssl/SSL_CTX_load_verify_locations.html>を確認します。
(TBR)

=item * CTX_need_tmp_RSA

=begin original

Return the result of C<SSL_CTX_ctrl(ctx,SSL_CTRL_NEED_TMP_RSA,0,NULL)>

=end original

C<SSL_CTX_ctrl(ctx,SSL_CTRL_NEED_TMP_RSA,0,NULL)>の結果を返します。
(TBR)

 my $rv = Net::SSLeay::CTX_need_tmp_RSA($ctx);
 # $ctx - value corresponding to openssl's SSL_CTX structure
 #
 # returns: result of SSL_CTRL_NEED_TMP_RSA command

=item * CTX_new

=begin original

The same as L</CTX_v23_new>

=end original

L</CTX_v23_new>と同じ
(TBR)

 my $rv = Net::SSLeay::CTX_new();
 #
 # returns: value corresponding to openssl's SSL_CTX structure (0 on failure)

=begin original

Check openssl doc L<http://www.openssl.org/docs/ssl/SSL_CTX_new.html|http://www.openssl.org/docs/ssl/SSL_CTX_new.html>

=end original

openssl doc L<http://www.openssl.org/docs/ssl/SSL_CTX_new.html|http://www.openssl.org/docs/ssl/SSL_CTX_new.html>を確認します。
(TBR)

=item * CTX_v2_new

=begin original

Creates a new SSL_CTX object - based on SSLv2_method() - as framework to establish TLS/SSL enabled connections.

=end original

SSLv2_method()に基づいて、TLS/SSL対応の接続を確立するためのフレームワークとして、新しいSSL_CTXオブジェクトを作成します。
(TBR)

 my $rv = Net::SSLeay::CTX_v2_new();
 #
 # returns: value corresponding to openssl's SSL_CTX structure (0 on failure)

=item * CTX_v23_new

=begin original

Creates a new SSL_CTX object - based on SSLv23_method() - as framework to establish TLS/SSL enabled connections.

=end original

SSLv23_method()に基づいて、TLS/SSL対応の接続を確立するためのフレームワークとして、新しいSSL_CTXオブジェクトを作成します。
(TBR)

 my $rv = Net::SSLeay::CTX_v23_new();
 #
 # returns: value corresponding to openssl's SSL_CTX structure (0 on failure)

=item * CTX_v3_new

=begin original

Creates a new SSL_CTX object - based on SSLv3_method() - as framework to establish TLS/SSL enabled connections.

=end original

SSLv3_method()に基づいて、TLS/SSL対応の接続を確立するためのフレームワークとして、新しいSSL_CTXオブジェクトを作成します。
(TBR)

 my $rv = Net::SSLeay::CTX_v3_new();
 #
 # returns: value corresponding to openssl's SSL_CTX structure (0 on failure)

=item * CTX_tlsv1_new

=begin original

Creates a new SSL_CTX object - based on TLSv1_method() - as framework to establish TLS/SSL enabled connections.

=end original

TLS/SSL対応の接続を確立するためのフレームワークとして、TLSv1_method()に基づいて新しいSSL_CTXオブジェクトを作成します。
(TBR)

 my $rv = Net::SSLeay::CTX_tlsv1_new();
 #
 # returns: value corresponding to openssl's SSL_CTX structure (0 on failure)

=item * CTX_new_with_method

=begin original

Creates a new SSL_CTX object based on $meth method

=end original

$methメソッドに基づいて新しいSSL_CTXオブジェクトを作成します。
(TBR)

 my $rv = Net::SSLeay::CTX_new_with_method($meth);
 # $meth - value corresponding to openssl's SSL_METHOD structure
 #
 # returns: value corresponding to openssl's SSL_CTX structure (0 on failure)

 #example
 my $ctx = Net::SSLeay::CTX_new_with_method(&Net::SSLeay::TLSv1_method);

=begin original

Check openssl doc L<http://www.openssl.org/docs/ssl/SSL_CTX_new.html|http://www.openssl.org/docs/ssl/SSL_CTX_new.html>

=end original

openssl doc L<http://www.openssl.org/docs/ssl/SSL_CTX_new.html|http://www.openssl.org/docs/ssl/SSL_CTX_new.html>を確認します。
(TBR)

=item * CTX_remove_session

=begin original

Removes the session $ses from the context $ctx.

=end original

コンテキスト$ctxからセッション$sesを削除します。
(TBR)

 my $rv = Net::SSLeay::CTX_remove_session($ctx, $ses);
 # $ctx - value corresponding to openssl's SSL_CTX structure
 # $ses - value corresponding to openssl's SSL_SESSION structure
 #
 # returns: 1 on success, 0 on failure

=begin original

Check openssl doc L<http://www.openssl.org/docs/ssl/SSL_CTX_add_session.html|http://www.openssl.org/docs/ssl/SSL_CTX_add_session.html>

=end original

openssl doc L<http://www.openssl.org/docs/ssl/SSL_CTX_add_session.html|http://www.openssl.org/docs/ssl/SSL_CTX_add_session.html>を確認します。
(TBR)

=item * CTX_sess_accept

 my $rv = Net::SSLeay::CTX_sess_accept($ctx);
 # $ctx - value corresponding to openssl's SSL_CTX structure
 #
 # returns: number of started SSL/TLS handshakes in server mode

=begin original

Check openssl doc L<http://www.openssl.org/docs/ssl/SSL_CTX_sess_number.html|http://www.openssl.org/docs/ssl/SSL_CTX_sess_number.html>

=end original

openssl doc L<http://www.openssl.org/docs/ssl/SSL_CTX_sess_number.html|http://www.openssl.org/docs/ssl/SSL_CTX_sess_number.html>を確認します。
(TBR)

=item * CTX_sess_accept_good

 my $rv = Net::SSLeay::CTX_sess_accept_good($ctx);
 # $ctx - value corresponding to openssl's SSL_CTX structure
 #
 # returns: number of successfully established SSL/TLS sessions in server mode

=begin original

Check openssl doc L<http://www.openssl.org/docs/ssl/SSL_CTX_sess_number.html|http://www.openssl.org/docs/ssl/SSL_CTX_sess_number.html>

=end original

openssl doc L<http://www.openssl.org/docs/ssl/SSL_CTX_sess_number.html|http://www.openssl.org/docs/ssl/SSL_CTX_sess_number.html>を確認します。
(TBR)

=item * CTX_sess_accept_renegotiate

 my $rv = Net::SSLeay::CTX_sess_accept_renegotiate($ctx);
 # $ctx - value corresponding to openssl's SSL_CTX structure
 #
 # returns: number of start renegotiations in server mode

=begin original

Check openssl doc L<http://www.openssl.org/docs/ssl/SSL_CTX_sess_number.html|http://www.openssl.org/docs/ssl/SSL_CTX_sess_number.html>

=end original

openssl doc L<http://www.openssl.org/docs/ssl/SSL_CTX_sess_number.html|http://www.openssl.org/docs/ssl/SSL_CTX_sess_number.html>を確認します。
(TBR)

=item * CTX_sess_cache_full

 my $rv = Net::SSLeay::CTX_sess_cache_full($ctx);
 # $ctx - value corresponding to openssl's SSL_CTX structure
 #
 # returns: number of sessions that were removed because the maximum session cache size was exceeded

=begin original

Check openssl doc L<http://www.openssl.org/docs/ssl/SSL_CTX_sess_number.html|http://www.openssl.org/docs/ssl/SSL_CTX_sess_number.html>

=end original

openssl doc L<http://www.openssl.org/docs/ssl/SSL_CTX_sess_number.html|http://www.openssl.org/docs/ssl/SSL_CTX_sess_number.html>を確認します。
(TBR)

=item * CTX_sess_cb_hits

 my $rv = Net::SSLeay::CTX_sess_cb_hits($ctx);
 # $ctx - value corresponding to openssl's SSL_CTX structure
 #
 # returns: number of successfully retrieved sessions from the external session cache in server mode

=begin original

Check openssl doc L<http://www.openssl.org/docs/ssl/SSL_CTX_sess_number.html|http://www.openssl.org/docs/ssl/SSL_CTX_sess_number.html>

=end original

openssl doc L<http://www.openssl.org/docs/ssl/SSL_CTX_sess_number.html|http://www.openssl.org/docs/ssl/SSL_CTX_sess_number.html>を確認します。
(TBR)

=item * CTX_sess_connect

 my $rv = Net::SSLeay::CTX_sess_connect($ctx);
 # $ctx - value corresponding to openssl's SSL_CTX structure
 #
 # returns: number of started SSL/TLS handshakes in client mode

=begin original

Check openssl doc L<http://www.openssl.org/docs/ssl/SSL_CTX_sess_number.html|http://www.openssl.org/docs/ssl/SSL_CTX_sess_number.html>

=end original

openssl doc L<http://www.openssl.org/docs/ssl/SSL_CTX_sess_number.html|http://www.openssl.org/docs/ssl/SSL_CTX_sess_number.html>を確認します。
(TBR)

=item * CTX_sess_connect_good

 my $rv = Net::SSLeay::CTX_sess_connect_good($ctx);
 # $ctx - value corresponding to openssl's SSL_CTX structure
 #
 # returns: number of successfully established SSL/TLS sessions in client mode

=begin original

Check openssl doc L<http://www.openssl.org/docs/ssl/SSL_CTX_sess_number.html|http://www.openssl.org/docs/ssl/SSL_CTX_sess_number.html>

=end original

openssl doc L<http://www.openssl.org/docs/ssl/SSL_CTX_sess_number.html|http://www.openssl.org/docs/ssl/SSL_CTX_sess_number.html>を確認します。
(TBR)

=item * CTX_sess_connect_renegotiate

 my $rv = Net::SSLeay::CTX_sess_connect_renegotiate($ctx);
 # $ctx - value corresponding to openssl's SSL_CTX structure
 #
 # returns: number of start renegotiations in client mode

=begin original

Check openssl doc L<http://www.openssl.org/docs/ssl/SSL_CTX_sess_number.html|http://www.openssl.org/docs/ssl/SSL_CTX_sess_number.html>

=end original

openssl doc L<http://www.openssl.org/docs/ssl/SSL_CTX_sess_number.html|http://www.openssl.org/docs/ssl/SSL_CTX_sess_number.html>を確認します。
(TBR)

=item * CTX_sess_get_cache_size

=begin original

Returns the currently valid session cache size.

=end original

現在有効なセッションキャッシュサイズを返します。
(TBR)

 my $rv = Net::SSLeay::CTX_sess_get_cache_size($ctx);
 # $ctx - value corresponding to openssl's SSL_CTX structure
 #
 # returns: current size

=begin original

Check openssl doc L<http://www.openssl.org/docs/ssl/SSL_CTX_sess_set_cache_size.html|http://www.openssl.org/docs/ssl/SSL_CTX_sess_set_cache_size.html>

=end original

openssl doc L<http://www.openssl.org/docs/ssl/SSL_CTX_sess_set_cache_size.html|http://www.openssl.org/docs/ssl/SSL_CTX_sess_set_cache_size.html>を確認します。
(TBR)

=item * CTX_sess_hits

 my $rv = Net::SSLeay::CTX_sess_hits($ctx);
 # $ctx - value corresponding to openssl's SSL_CTX structure
 #
 # returns: number of successfully reused sessions

=begin original

Check openssl doc L<http://www.openssl.org/docs/ssl/SSL_CTX_sess_number.html|http://www.openssl.org/docs/ssl/SSL_CTX_sess_number.html>

=end original

openssl doc L<http://www.openssl.org/docs/ssl/SSL_CTX_sess_number.html|http://www.openssl.org/docs/ssl/SSL_CTX_sess_number.html>を確認します。
(TBR)

=item * CTX_sess_misses

 my $rv = Net::SSLeay::CTX_sess_misses($ctx);
 # $ctx - value corresponding to openssl's SSL_CTX structure
 #
 # returns: number of sessions proposed by clients that were not found in the internal session cache in server mode

=begin original

Check openssl doc L<http://www.openssl.org/docs/ssl/SSL_CTX_sess_number.html|http://www.openssl.org/docs/ssl/SSL_CTX_sess_number.html>

=end original

openssl doc L<http://www.openssl.org/docs/ssl/SSL_CTX_sess_number.html|http://www.openssl.org/docs/ssl/SSL_CTX_sess_number.html>を確認します。
(TBR)

=item * CTX_sess_number

 my $rv = Net::SSLeay::CTX_sess_number($ctx);
 # $ctx - value corresponding to openssl's SSL_CTX structure
 #
 # returns: current number of sessions in the internal session cache

=begin original

Check openssl doc L<http://www.openssl.org/docs/ssl/SSL_CTX_sess_number.html|http://www.openssl.org/docs/ssl/SSL_CTX_sess_number.html>

=end original

openssl doc L<http://www.openssl.org/docs/ssl/SSL_CTX_sess_number.html|http://www.openssl.org/docs/ssl/SSL_CTX_sess_number.html>を確認します。
(TBR)

=item * CTX_sess_set_cache_size

=begin original

Sets the size of the internal session cache of context $ctx to $size.

=end original

コンテキスト$ctxの内部セッションキャッシュのサイズを$sizeに設定します。
(TBR)

 Net::SSLeay::CTX_sess_set_cache_size($ctx, $size);
 # $ctx - value corresponding to openssl's SSL_CTX structure
 # $size - cache size (0 = unlimited)
 #
 # returns: previously valid size

=begin original

Check openssl doc L<http://www.openssl.org/docs/ssl/SSL_CTX_sess_set_cache_size.html|http://www.openssl.org/docs/ssl/SSL_CTX_sess_set_cache_size.html>

=end original

openssl doc L<http://www.openssl.org/docs/ssl/SSL_CTX_sess_set_cache_size.html|http://www.openssl.org/docs/ssl/SSL_CTX_sess_set_cache_size.html>を確認します。
(TBR)

=item * CTX_sess_timeouts

=begin original

Returns the number of sessions proposed by clients and either found in the internal or external session cache in
server mode, but that were invalid due to timeout. These sessions are not included in the SSL_CTX_sess_hits count.

=end original

クライアントによって提案され、サーバーモードの内部または外部セッションキャッシュで検出されたが、タイムアウトのために無効であったセッションの数を戻します。
これらのセッションは、SSL_CTX_sess_hitsカウントには含まれません。
(TBR)

 my $rv = Net::SSLeay::CTX_sess_timeouts($ctx);
 # $ctx - value corresponding to openssl's SSL_CTX structure
 #
 # returns: number of sessions

=begin original

Check openssl doc L<http://www.openssl.org/docs/ssl/SSL_CTX_sess_number.html|http://www.openssl.org/docs/ssl/SSL_CTX_sess_number.html>

=end original

openssl doc L<http://www.openssl.org/docs/ssl/SSL_CTX_sess_number.html|http://www.openssl.org/docs/ssl/SSL_CTX_sess_number.html>を確認します。
(TBR)

=item * CTX_sessions

=begin original

Returns a pointer to the lhash databases containing the internal session cache for ctx.

=end original

ctxの内部セッションキャッシュを含むlhashデータベースへのポインタを戻します。
(TBR)

 my $rv = Net::SSLeay::CTX_sessions($ctx);
 # $ctx - value corresponding to openssl's SSL_CTX structure
 #
 # returns: value corresponding to openssl's LHASH structure (0 on failure)

=begin original

Check openssl doc L<http://www.openssl.org/docs/ssl/SSL_CTX_sessions.html|http://www.openssl.org/docs/ssl/SSL_CTX_sessions.html>

=end original

openssl doc L<http://www.openssl.org/docs/ssl/SSL_CTX_sessions.html|http://www.openssl.org/docs/ssl/SSL_CTX_sessions.html>を確認します。
(TBR)

=item * CTX_set1_param

=begin original

Applies X509 verification parameters $vpm on $ctx

=end original

X509検証パラメータ$vpmを$ctxに適用します
(TBR)

 my $rv = Net::SSLeay::CTX_set1_param($ctx, $vpm);
 # $ctx - value corresponding to openssl's SSL_CTX structure
 # $vpm - value corresponding to openssl's X509_VERIFY_PARAM structure
 #
 # returns: 1 on success, 0 on failure

=item * CTX_set_cert_store

=begin original

Sets/replaces the certificate verification storage of $ctx to/with $store.

=end original

$ctxの証明書検証ストレージを$storeに設定/置換します。
(TBR)

 Net::SSLeay::CTX_set_cert_store($ctx, $store);
 # $ctx - value corresponding to openssl's SSL_CTX structure
 # $store - value corresponding to openssl's X509_STORE structure
 #
 # returns: no return value

=begin original

Check openssl doc L<http://www.openssl.org/docs/ssl/SSL_CTX_set_cert_store.html|http://www.openssl.org/docs/ssl/SSL_CTX_set_cert_store.html>

=end original

openssl doc L<http://www.openssl.org/docs/ssl/SSL_CTX_set_cert_store.html|http://www.openssl.org/docs/ssl/SSL_CTX_set_cert_store.html>を確認します。
(TBR)

=item * CTX_set_cert_verify_callback

=begin original

Sets the verification callback function for $ctx. SSL objects that are created from $ctx
inherit the setting valid at the time when C<Net::SSLeay::new($ctx)> is called.

=end original

$ctxの検証コールバック関数を設定します。
$ctxから作成されたSSLオブジェクトは、C<Net::SSLeay::new($ctx)>が呼び出された時点で有効な設定を継承します。
(TBR)

 Net::SSLeay::CTX_set_cert_verify_callback($ctx, $func, $data);
 # $ctx - value corresponding to openssl's SSL_CTX structure
 # $func - perl reference to callback function
 # $data - [optional] data that will be passed to callback function when invoked
 #
 # returns: no return value

=begin original

Check openssl doc L<http://www.openssl.org/docs/ssl/SSL_CTX_set_cert_verify_callback.html|http://www.openssl.org/docs/ssl/SSL_CTX_set_cert_verify_callback.html>

=end original

openssl doc L<http://www.openssl.org/docs/ssl/SSL_CTX_set_cert_verify_callback.html|http://www.openssl.org/docs/ssl/SSL_CTX_set_cert_verify_callback.html>を確認します。
(TBR)

=item * CTX_set_cipher_list

=begin original

Sets the list of available ciphers for $ctx using the control string $str.
The list of ciphers is inherited by all ssl objects created from $ctx.

=end original

制御文字列$strを使用して、$ctxで使用可能な暗号のリストを設定します。
暗号のリストは、$ctxから作成されたすべてのsslオブジェクトによって継承されます。
(TBR)

 my $rv = Net::SSLeay::CTX_set_cipher_list($s, $str);
 # $s - value corresponding to openssl's SSL_CTX structure
 # $str - (string) cipher list e.g. '3DES:+RSA'
 #
 # returns: 1 if any cipher could be selected and 0 on complete failure

=begin original

The format of $str is described in L<http://www.openssl.org/docs/apps/ciphers.html|http://www.openssl.org/docs/apps/ciphers.html>

=end original

$strの形式については、L<http://www.openssl.org/docs/apps/ciphers.html|http://www.openssl.org/docs/apps/ciphers.html>を参照してください。
(TBR)

=begin original

Check openssl doc L<http://www.openssl.org/docs/ssl/SSL_CTX_set_cipher_list.html|http://www.openssl.org/docs/ssl/SSL_CTX_set_cipher_list.html>

=end original

openssl doc L<http://www.openssl.org/docs/ssl/SSL_CTX_set_cipher_list.html|http://www.openssl.org/docs/ssl/SSL_CTX_set_cipher_list.html>を確認します。
(TBR)

=item * CTX_set_client_CA_list

=begin original

Sets the list of CAs sent to the client when requesting a client certificate for $ctx.

=end original

$ctxのクライアント証明書を要求するときにクライアントに送信されるCAのリストを設定します。
(TBR)

 Net::SSLeay::CTX_set_client_CA_list($ctx, $list);
 # $ctx - value corresponding to openssl's SSL_CTX structure
 # $list - value corresponding to openssl's X509_NAME_STACK structure
 #
 # returns: no return value

=begin original

Check openssl doc L<http://www.openssl.org/docs/ssl/SSL_CTX_set_client_CA_list.html|http://www.openssl.org/docs/ssl/SSL_CTX_set_client_CA_list.html>

=end original

openssl doc L<http://www.openssl.org/docs/ssl/SSL_CTX_set_client_CA_list.html|http://www.openssl.org/docs/ssl/SSL_CTX_set_client_CA_list.html>を確認します。
(TBR)

=item * CTX_set_default_passwd_cb

=begin original

Sets the default password callback called when loading/storing a PEM certificate with encryption.

=end original

暗号化されたPEM証明書をロードまたは保存するときに呼び出されるデフォルトのパスワードコールバックを設定します。
(TBR)

 Net::SSLeay::CTX_set_default_passwd_cb($ctx, $func);
 # $ctx - value corresponding to openssl's SSL_CTX structure
 # $func - perl reference to callback function
 #
 # returns: no return value

=begin original

Check openssl doc L<http://www.openssl.org/docs/ssl/SSL_CTX_set_default_passwd_cb.html|http://www.openssl.org/docs/ssl/SSL_CTX_set_default_passwd_cb.html>

=end original

openssl doc L<http://www.openssl.org/docs/ssl/SSL_CTX_set_default_passwd_cb.html|http://www.openssl.org/docs/ssl/SSL_CTX_set_default_passwd_cb.html>を確認します。
(TBR)

=item * CTX_set_default_passwd_cb_userdata

=begin original

Sets a pointer to userdata which will be provided to the password callback on invocation.

=end original

起動時にパスワードコールバックに提供されるuserdataへのポインタを設定します。
(TBR)

 Net::SSLeay::CTX_set_default_passwd_cb_userdata($ctx, $userdata);
 # $ctx - value corresponding to openssl's SSL_CTX structure
 # $userdata - data that will be passed to callback function when invoked
 #
 # returns: no return value

=begin original

Check openssl doc L<http://www.openssl.org/docs/ssl/SSL_CTX_set_default_passwd_cb.html|http://www.openssl.org/docs/ssl/SSL_CTX_set_default_passwd_cb.html>

=end original

openssl doc L<http://www.openssl.org/docs/ssl/SSL_CTX_set_default_passwd_cb.html|http://www.openssl.org/docs/ssl/SSL_CTX_set_default_passwd_cb.html>を確認します。
(TBR)

=item * CTX_set_default_verify_paths

=begin original

??? (more info needed)

=end original

(詳細情報が必要)
(TBR)

 my $rv = Net::SSLeay::CTX_set_default_verify_paths($ctx);
 # $ctx - value corresponding to openssl's SSL_CTX structure
 #
 # returns: 1 on success, 0 on failure

=item * CTX_set_ex_data

=begin original

Is used to store application data at $data for $idx into the $ctx object.

=end original

$data for$idxにあるアプリケーションデータを$ctxオブジェクトに格納するために使用されます。
(TBR)

 my $rv = Net::SSLeay::CTX_set_ex_data($ssl, $idx, $data);
 # $ssl - value corresponding to openssl's SSL_CTX structure
 # $idx - (integer) ???
 # $data - (pointer) ???
 #
 # returns: 1 on success, 0 on failure

=begin original

Check openssl doc L<http://www.openssl.org/docs/ssl/SSL_CTX_get_ex_new_index.html|http://www.openssl.org/docs/ssl/SSL_CTX_get_ex_new_index.html>

=end original

openssl doc L<http://www.openssl.org/docs/ssl/SSL_CTX_get_ex_new_index.html|http://www.openssl.org/docs/ssl/SSL_CTX_get_ex_new_index.html>を確認します。
(TBR)

=item * CTX_set_purpose

 my $rv = Net::SSLeay::CTX_set_purpose($s, $purpose);
 # $s - value corresponding to openssl's SSL_CTX structure
 # $purpose - (integer) purpose identifier
 #
 # returns: 1 on success, 0 on failure

 #avainable purpose identifier
 1 - X509_PURPOSE_SSL_CLIENT
 2 - X509_PURPOSE_SSL_SERVER
 3 - X509_PURPOSE_NS_SSL_SERVER
 4 - X509_PURPOSE_SMIME_SIGN
 5 - X509_PURPOSE_SMIME_ENCRYPT
 6 - X509_PURPOSE_CRL_SIGN
 7 - X509_PURPOSE_ANY
 8 - X509_PURPOSE_OCSP_HELPER
 9 - X509_PURPOSE_TIMESTAMP_SIGN

 #or use corresponding constants
 $purpose = &Net::SSLeay::X509_PURPOSE_SSL_CLIENT;
 ...
 $purpose = &Net::SSLeay::X509_PURPOSE_TIMESTAMP_SIGN;

=item * CTX_set_quiet_shutdown

=begin original

Sets the 'quiet shutdown' flag for $ctx to be mode. SSL objects created from $ctx inherit the mode valid at the time C<Net::SSLeay::new($ctx)> is called.

=end original

$ctxの'quiet shutdown'フラグをmodeに設定します。
$ctxから作成されたSSLオブジェクトは、C<Net::SSLeay::new($ctx)>が呼び出された時点で有効なモードを継承します。
(TBR)

 Net::SSLeay::CTX_set_quiet_shutdown($ctx, $mode);
 # $ctx - value corresponding to openssl's SSL_CTX structure
 # $mode - 0 or 1
 #
 # returns: no return value

=begin original

Check openssl doc L<http://www.openssl.org/docs/ssl/SSL_CTX_set_quiet_shutdown.html|http://www.openssl.org/docs/ssl/SSL_CTX_set_quiet_shutdown.html>

=end original

openssl doc L<http://www.openssl.org/docs/ssl/SSL_CTX_set_quiet_shutdown.html|http://www.openssl.org/docs/ssl/SSL_CTX_set_quiet_shutdown.html>を確認します。
(TBR)

=item * CTX_set_read_ahead

 my $rv = Net::SSLeay::CTX_set_read_ahead($ctx, $val);
 # $ctx - value corresponding to openssl's SSL_CTX structure
 # $val - read_ahead value to be set
 #
 # returns: the original read_ahead value

=item * CTX_set_session_id_context

=begin original

Sets the context $sid_ctx of length $sid_ctx_len within which a session can be reused for the $ctx object.

=end original

$ctxオブジェクトのセッションを再利用できる長さ$sid_ctx_lenのコンテキスト$sid_ctxを設定します。
(TBR)

 my $rv = Net::SSLeay::CTX_set_session_id_context($ctx, $sid_ctx, $sid_ctx_len);
 # $ctx - value corresponding to openssl's SSL_CTX structure
 # $sid_ctx - data buffer
 # $sid_ctx_len - length of data in $sid_ctx
 #
 # returns: 1 on success, 0 on failure (the error is logged to the error stack)

=begin original

Check openssl doc L<http://www.openssl.org/docs/ssl/SSL_CTX_set_session_id_context.html|http://www.openssl.org/docs/ssl/SSL_CTX_set_session_id_context.html>

=end original

openssl doc L<http://www.openssl.org/docs/ssl/SSL_CTX_set_session_id_context.html|http://www.openssl.org/docs/ssl/SSL_CTX_set_session_id_context.html>を確認します。
(TBR)

=item * CTX_set_ssl_version

=begin original

Sets a new default TLS/SSL method for SSL objects newly created from this $ctx.
SSL objects already created with C<Net::SSLeay::new($ctx)> are not
affected, except when C<Net::SSLeay:clear($ssl)> is being called.

=end original

この$ctxから新しく作成されたSSLオブジェクトの新しいデフォルトのTLS/SSL方式を設定します。
C<Net::SSLeay::new($ctx)>ですでに作成されているSSLオブジェクトは、C<Net::SSLeay:clear($ssl)>が呼び出されている場合を除き、影響を受けません。
(TBR)

 my $rv = Net::SSLeay::CTX_set_ssl_version($ctx, $meth);
 # $ctx - value corresponding to openssl's SSL_CTX structure
 # $meth - value corresponding to openssl's SSL_METHOD structure
 #
 # returns: 1 on success, 0 on failure

=begin original

Check openssl doc L<http://www.openssl.org/docs/ssl/SSL_CTX_set_ssl_version.html|http://www.openssl.org/docs/ssl/SSL_CTX_set_ssl_version.html>

=end original

openssl doc L<http://www.openssl.org/docs/ssl/SSL_CTX_set_ssl_version.html|http://www.openssl.org/docs/ssl/SSL_CTX_set_ssl_version.html>を確認します。
(TBR)

=item * CTX_set_timeout

=begin original

Sets the timeout for newly created sessions for $ctx to $t. The timeout value $t must be given in seconds.

=end original

$ctxに対して新しく作成されたセッションのタイムアウトを$tに設定します。
タイムアウト値$tは秒単位で指定する必要があります。
(TBR)

 my $rv = Net::SSLeay::CTX_set_timeout($ctx, $t);
 # $ctx - value corresponding to openssl's SSL_CTX structure
 # $t - timeout in seconds
 #
 # returns: previously set timeout value

=begin original

Check openssl doc L<http://www.openssl.org/docs/ssl/SSL_CTX_set_timeout.html|http://www.openssl.org/docs/ssl/SSL_CTX_set_timeout.html>

=end original

openssl doc L<http://www.openssl.org/docs/ssl/SSL_CTX_set_timeout.html|http://www.openssl.org/docs/ssl/SSL_CTX_set_timeout.html>を確認します。
(TBR)

=item * CTX_set_tmp_dh

=begin original

Sets DH parameters to be used to be $dh. The key is inherited by all ssl objects created from $ctx.

=end original

使用するDHパラメータを$dhに設定します。
キーは、$ctxから作成されたすべてのsslオブジェクトによって継承されます。
(TBR)

 my $rv = Net::SSLeay::CTX_set_tmp_dh($ctx, $dh);
 # $ctx - value corresponding to openssl's SSL_CTX structure
 # $dh - value corresponding to openssl's DH structure
 #
 # returns: 1 on success, 0 on failure

=begin original

Check openssl doc L<http://www.openssl.org/docs/ssl/SSL_CTX_set_tmp_dh_callback.html|http://www.openssl.org/docs/ssl/SSL_CTX_set_tmp_dh_callback.html>

=end original

openssl doc L<http://www.openssl.org/docs/ssl/SSL_CTX_set_tmp_dh_callback.html|http://www.openssl.org/docs/ssl/SSL_CTX_set_tmp_dh_callback.html>を確認します。
(TBR)

=item * CTX_set_tmp_dh_callback

=begin original

Sets the callback function for $ctx to be used when a DH parameters are required to $tmp_dh_callback.

=end original

$tmp_dh_callbackにDHパラメータが必要な場合に使用される$ctxのコールバック関数を設定します。
(TBR)

 Net::SSLeay::CTX_set_tmp_dh_callback($ctx, $tmp_dh_callback);
 # $ctx - value corresponding to openssl's SSL_CTX structure
 # tmp_dh_callback - (function pointer) ???
 #
 # returns: no return value

=begin original

Check openssl doc L<http://www.openssl.org/docs/ssl/SSL_CTX_set_tmp_dh_callback.html|http://www.openssl.org/docs/ssl/SSL_CTX_set_tmp_dh_callback.html>

=end original

openssl doc L<http://www.openssl.org/docs/ssl/SSL_CTX_set_tmp_dh_callback.html|http://www.openssl.org/docs/ssl/SSL_CTX_set_tmp_dh_callback.html>を確認します。
(TBR)

=item * CTX_set_tmp_rsa

=begin original

Sets the temporary/ephemeral RSA key to be used to be $rsa.

=end original

使用する一時/一時的なRSAキーを$rsaに設定します。
(TBR)

 my $rv = Net::SSLeay::CTX_set_tmp_rsa($ctx, $rsa);
 # $ctx - value corresponding to openssl's SSL_CTX structure
 # $rsa - value corresponding to openssl's RSA structure
 #
 # returns: 1 on success, 0 on failure

=begin original

Check openssl doc L<http://www.openssl.org/docs/ssl/SSL_CTX_set_tmp_rsa_callback.html|http://www.openssl.org/docs/ssl/SSL_CTX_set_tmp_rsa_callback.html>

=end original

openssl doc L<http://www.openssl.org/docs/ssl/SSL_CTX_set_tmp_rsa_callback.html|http://www.openssl.org/docs/ssl/SSL_CTX_set_tmp_rsa_callback.html>を確認します。
(TBR)

=item * CTX_set_tmp_rsa_callback

=begin original

Sets the callback function for ctx to be used when a temporary/ephemeral RSA key is required to $tmp_rsa_callback.

=end original

$tmp_rsa_callbackに一時的/一時的なRSAキーが必要な場合に使用されるctxのコールバック関数を設定します。
(TBR)

=begin original

??? (does this function really work?)

=end original

(この関数は本当に動作しますか?)
(TBR)

 Net::SSLeay::CTX_set_tmp_rsa_callback($ctx, $tmp_rsa_callback);
 # $ctx - value corresponding to openssl's SSL_CTX structure
 # $tmp_rsa_callback - (function pointer) ???
 #
 # returns: no return value

=begin original

Check openssl doc L<http://www.openssl.org/docs/ssl/SSL_CTX_set_tmp_rsa_callback.html|http://www.openssl.org/docs/ssl/SSL_CTX_set_tmp_rsa_callback.html>

=end original

openssl doc L<http://www.openssl.org/docs/ssl/SSL_CTX_set_tmp_rsa_callback.html|http://www.openssl.org/docs/ssl/SSL_CTX_set_tmp_rsa_callback.html>を確認します。
(TBR)

=item * CTX_set_trust

 my $rv = Net::SSLeay::CTX_set_trust($s, $trust);
 # $s - value corresponding to openssl's SSL_CTX structure
 # $trust - (integer) trust identifier
 #
 # returns: the original value

 #available trust identifiers
 1 - X509_TRUST_COMPAT
 2 - X509_TRUST_SSL_CLIENT
 3 - X509_TRUST_SSL_SERVER
 4 - X509_TRUST_EMAIL
 5 - X509_TRUST_OBJECT_SIGN
 6 - X509_TRUST_OCSP_SIGN
 7 - X509_TRUST_OCSP_REQUEST
 8 - X509_TRUST_TSA

 #or use corresponding constants
 $trust = &Net::SSLeay::X509_TRUST_COMPAT;
 ...
 $trust = &Net::SSLeay::X509_TRUST_TSA;

=item * CTX_set_verify_depth

=begin original

Sets the maximum depth for the certificate chain verification that shall be allowed for ctx.

=end original

ctxに許可される証明書チェーン検証の最大深さを設定します。
(TBR)

 Net::SSLeay::CTX_set_verify_depth($ctx, $depth);
 # $ctx - value corresponding to openssl's SSL_CTX structure
 # $depth - max. depth
 #
 # returns: no return value

=begin original

Check openssl doc L<http://www.openssl.org/docs/ssl/SSL_CTX_set_verify.html|http://www.openssl.org/docs/ssl/SSL_CTX_set_verify.html>

=end original

openssl doc L<http://www.openssl.org/docs/ssl/SSL_CTX_set_verify.html|http://www.openssl.org/docs/ssl/SSL_CTX_set_verify.html>を確認します。
(TBR)

=item * CTX_use_PKCS12_file

=begin original

Adds the certificate and private key from PKCS12 file $p12filename to $ctx.

=end original

PKCS12ファイル$p12filenameの証明書と秘密キーを$ctxに追加します。
(TBR)

 my $rv = Net::SSLeay::CTX_use_PKCS12_file($ctx, $p12filename, $password);
 # $ctx - value corresponding to openssl's SSL_CTX structure
 # $p12filename - (string) filename
 # $password - (string) password to decrypt private key
 #
 # returns: 1 on success, 0 on failure

=item * CTX_use_PrivateKey

=begin original

Adds the private key $pkey to $ctx.

=end original

プライベートキー$pkeyを$ctxに追加します。
(TBR)

 my $rv = Net::SSLeay::CTX_use_PrivateKey($ctx, $pkey);
 # $ctx - value corresponding to openssl's SSL_CTX structure
 # $pkey - value corresponding to openssl's EVP_PKEY structure
 #
 # returns: 1 on success, otherwise check out the error stack to find out the reason

=begin original

Check openssl doc L<http://www.openssl.org/docs/ssl/SSL_CTX_use_certificate.html|http://www.openssl.org/docs/ssl/SSL_CTX_use_certificate.html>

=end original

openssl doc L<http://www.openssl.org/docs/ssl/SSL_CTX_use_certificate.html|http://www.openssl.org/docs/ssl/SSL_CTX_use_certificate.html>を確認します。
(TBR)

=item * CTX_use_PrivateKey_file

=begin original

Adds the first private key found in $file to $ctx.

=end original

$fileで見つかった最初のプライベートキーを$ctxに追加します。
(TBR)

 my $rv = Net::SSLeay::CTX_use_PrivateKey_file($ctx, $file, $type);
 # $ctx - value corresponding to openssl's SSL_CTX structure
 # $file - (string) file name
 # $type - (integer) type - use constants &Net::SSLeay::FILETYPE_PEM or &Net::SSLeay::FILETYPE_ASN1
 #
 # returns: 1 on success, otherwise check out the error stack to find out the reason

=begin original

Check openssl doc L<http://www.openssl.org/docs/ssl/SSL_CTX_use_certificate.html|http://www.openssl.org/docs/ssl/SSL_CTX_use_certificate.html>

=end original

openssl doc L<http://www.openssl.org/docs/ssl/SSL_CTX_use_certificate.html|http://www.openssl.org/docs/ssl/SSL_CTX_use_certificate.html>を確認します。
(TBR)

=item * CTX_use_RSAPrivateKey

=begin original

Adds the RSA private key $rsa to $ctx.

=end original

RSA秘密キー$rsaを$ctxに追加します。
(TBR)

 my $rv = Net::SSLeay::CTX_use_RSAPrivateKey($ctx, $rsa);
 # $ctx - value corresponding to openssl's SSL_CTX structure
 # $rsa - value corresponding to openssl's RSA structure
 #
 # returns: 1 on success, otherwise check out the error stack to find out the reason

=begin original

Check openssl doc L<http://www.openssl.org/docs/ssl/SSL_CTX_use_certificate.html|http://www.openssl.org/docs/ssl/SSL_CTX_use_certificate.html>

=end original

openssl doc L<http://www.openssl.org/docs/ssl/SSL_CTX_use_certificate.html|http://www.openssl.org/docs/ssl/SSL_CTX_use_certificate.html>を確認します。
(TBR)

=item * CTX_use_RSAPrivateKey_file

=begin original

Adds the first RSA private key found in $file to $ctx.

=end original

$fileで見つかった最初のRSA秘密キーを$ctxに追加します。
(TBR)

 my $rv = Net::SSLeay::CTX_use_RSAPrivateKey_file($ctx, $file, $type);
 # $ctx - value corresponding to openssl's SSL_CTX structure
 # $file - (string) file name
 # $type - (integer) type - use constants &Net::SSLeay::FILETYPE_PEM or &Net::SSLeay::FILETYPE_ASN1
 #
 # returns: 1 on success, otherwise check out the error stack to find out the reason

=item * CTX_use_certificate

=begin original

Loads the certificate $x into $ctx

=end original

証明書$xを$ctxにロードします。
(TBR)

 my $rv = Net::SSLeay::CTX_use_certificate($ctx, $x);
 # $ctx - value corresponding to openssl's SSL_CTX structure
 # $x - value corresponding to openssl's X509 structure
 #
 # returns: 1 on success, otherwise check out the error stack to find out the reason

=begin original

Check openssl doc L<http://www.openssl.org/docs/ssl/SSL_CTX_use_certificate.html|http://www.openssl.org/docs/ssl/SSL_CTX_use_certificate.html>

=end original

openssl doc L<http://www.openssl.org/docs/ssl/SSL_CTX_use_certificate.html|http://www.openssl.org/docs/ssl/SSL_CTX_use_certificate.html>を確認します。
(TBR)

=item * CTX_use_certificate_chain_file

=begin original

Loads a certificate chain from $file into $ctx. The certificates must be in PEM format and must be sorted
starting with the subject's certificate (actual client or server certificate), followed by intermediate
CA certificates if applicable, and ending at the highest level (root) CA.

=end original

$fileから$ctxに証明書チェーンをロードします。
証明書はPEM形式である必要があり、サブジェクトの証明書(実際のクライアントまたはサーバー証明書)、中間CA証明書(該当する場合)、最上位(ルート)CAの順にソートされている必要があります。
(TBR)

 my $rv = Net::SSLeay::CTX_use_certificate_chain_file($ctx, $file);
 # $ctx - value corresponding to openssl's SSL_CTX structure
 # $file - (string) file name
 #
 # returns: 1 on success, otherwise check out the error stack to find out the reason

=begin original

Check openssl doc L<http://www.openssl.org/docs/ssl/SSL_CTX_use_certificate.html|http://www.openssl.org/docs/ssl/SSL_CTX_use_certificate.html>

=end original

openssl doc L<http://www.openssl.org/docs/ssl/SSL_CTX_use_certificate.html|http://www.openssl.org/docs/ssl/SSL_CTX_use_certificate.html>を確認します。
(TBR)

=item * CTX_use_certificate_file

=begin original

Loads the first certificate stored in $file into $ctx.

=end original

$fileに保存されている最初の証明書を$ctxにロードします。
(TBR)

 my $rv = Net::SSLeay::CTX_use_certificate_file($ctx, $file, $type);
 # $ctx - value corresponding to openssl's SSL_CTX structure
 # $file - (string) file name
 # $type - (integer) type - use constants &Net::SSLeay::FILETYPE_PEM or &Net::SSLeay::FILETYPE_ASN1
 #
 # returns: 1 on success, otherwise check out the error stack to find out the reason

=begin original

Check openssl doc L<http://www.openssl.org/docs/ssl/SSL_CTX_use_certificate.html|http://www.openssl.org/docs/ssl/SSL_CTX_use_certificate.html>

=end original

openssl doc L<http://www.openssl.org/docs/ssl/SSL_CTX_use_certificate.html|http://www.openssl.org/docs/ssl/SSL_CTX_use_certificate.html>を確認します。
(TBR)

=back

=head3 Low level API: SSL_* related functions

=begin original

B<NOTE:> Please note that the function described in this chapter have "SSL_" part stripped from their original openssl names.

=end original

B<注:>この章で説明する関数では、元のopenssl名から「SSL_」の部分が削除されていることに注意してください。
(TBR)

=over

=item * new

=begin original

Creates a new SSL structure which is needed to hold the data for a TLS/SSL connection.
The new structure inherits the settings of the underlying context $ctx: connection
method (SSLv2/v3/TLSv1), options, verification settings, timeout settings.

=end original

TLS/SSL接続のデータを保持するために必要な新しいSSL構造を作成します。
新しい構造は、基礎となるコンテキスト$ctx:接続方法(SSLv2/v3/TLSv1)、オプション、検証設定、タイムアウト設定の設定を継承します。
(TBR)

 my $rv = Net::SSLeay::new($ctx);
 # $ctx - value corresponding to openssl's SSL_CTX structure
 #
 # returns: value corresponding to openssl's SSL structure (0 on failure)

=begin original

Check openssl doc L<http://www.openssl.org/docs/ssl/SSL_new.html|http://www.openssl.org/docs/ssl/SSL_new.html>

=end original

openssl doc L<http://www.openssl.org/docs/ssl/SSL_new.html|http://www.openssl.org/docs/ssl/SSL_new.html>を確認します。
(TBR)

=item * accept

=begin original

Waits for a TLS/SSL client to initiate the TLS/SSL handshake. The communication
channel must already have been set and assigned to the ssl by setting an underlying BIO.

=end original

TLS/SSLクライアントがTLS/SSLハンドシェイクを開始するのを待機します。
基礎となるBIOを設定することにより、通信チャネルがすでに設定され、sslに割り当てられている必要があります。
(TBR)

 my $rv = Net::SSLeay::accept($ssl);
 # $ssl - value corresponding to openssl's SSL structure
 #
 # returns: 1 = success, 0 = handshake not successfull, <0 = fatal error during handshake

=begin original

Check openssl doc L<http://www.openssl.org/docs/ssl/SSL_accept.html|http://www.openssl.org/docs/ssl/SSL_accept.html>

=end original

openssl doc L<http://www.openssl.org/docs/ssl/SSL_accept.html|http://www.openssl.org/docs/ssl/SSL_accept.html>を確認します。
(TBR)

=item * add_client_CA

=begin original

Adds the CA name extracted from cacert to the list of CAs sent to the client
when requesting a client certificate for the chosen ssl, overriding the setting
valid for ssl's SSL_CTX object.

=end original

選択したsslのクライアント証明書を要求するときにクライアントに送信されるCAのリストにcacertから抽出されたCA名を追加し、sslのSSL_CTXオブジェクトに有効な設定を上書きします。
(TBR)

 my $rv = Net::SSLeay::add_client_CA($ssl, $x);
 # $ssl - value corresponding to openssl's SSL structure
 # $x - value corresponding to openssl's X509 structure
 #
 # returns: 1 on success, 0 on failure

=begin original

Check openssl doc L<http://www.openssl.org/docs/ssl/SSL_CTX_set_client_CA_list.html|http://www.openssl.org/docs/ssl/SSL_CTX_set_client_CA_list.html>

=end original

openssl doc L<http://www.openssl.org/docs/ssl/SSL_CTX_set_client_CA_list.html|http://www.openssl.org/docs/ssl/SSL_CTX_set_client_CA_list.html>を確認します。
(TBR)

=item * callback_ctrl

=begin original

??? (more info needed)

=end original

(詳細情報が必要)
(TBR)

 my $rv = Net::SSLeay::callback_ctrl($ssl, $cmd, $fp);
 # $ssl - value corresponding to openssl's SSL structure
 # $cmd - (integer) command id
 # $fp - (function pointer) ???
 #
 # returns: ???

=begin original

Check openssl doc L<http://www.openssl.org/docs/ssl/SSL_CTX_ctrl.html|http://www.openssl.org/docs/ssl/SSL_CTX_ctrl.html>

=end original

openssl doc L<http://www.openssl.org/docs/ssl/SSL_CTX_ctrl.html|http://www.openssl.org/docs/ssl/SSL_CTX_ctrl.html>を確認します。
(TBR)

=item * check_private_key

=begin original

Checks the consistency of a private key with the corresponding certificate loaded into $ssl

=end original

秘密鍵と、$sslにロードされた対応する証明書との整合性をチェックします。
(TBR)

 my $rv = Net::SSLeay::check_private_key($ssl);
 # $ssl - value corresponding to openssl's SSL structure
 #
 # returns: 1 on success, otherwise check out the error stack to find out the reason

=begin original

Check openssl doc L<http://www.openssl.org/docs/ssl/SSL_CTX_use_certificate.html|http://www.openssl.org/docs/ssl/SSL_CTX_use_certificate.html>

=end original

openssl doc L<http://www.openssl.org/docs/ssl/SSL_CTX_use_certificate.html|http://www.openssl.org/docs/ssl/SSL_CTX_use_certificate.html>を確認します。
(TBR)

=item * clear

=begin original

Reset SSL object to allow another connection.

=end original

SSLオブジェクトをリセットして、別の接続を許可します。
(TBR)

 Net::SSLeay::clear($ssl);
 # $ssl - value corresponding to openssl's SSL structure
 #
 # returns: no return value

=begin original

Check openssl doc L<http://www.openssl.org/docs/ssl/SSL_clear.html|http://www.openssl.org/docs/ssl/SSL_clear.html>

=end original

openssl doc L<http://www.openssl.org/docs/ssl/SSL_clear.html|http://www.openssl.org/docs/ssl/SSL_clear.html>を確認します。
(TBR)

=item * connect

=begin original

Initiate the TLS/SSL handshake with an TLS/SSL server.

=end original

TLS/SSLサーバとのTLS/SSLハンドシェイクを開始します。
(TBR)

 my $rv = Net::SSLeay::connect($ssl);
 # $ssl - value corresponding to openssl's SSL structure
 #
 # returns: 1 = success, 0 = handshake not successfull, <0 = fatal error during handshake

=begin original

Check openssl doc L<http://www.openssl.org/docs/ssl/SSL_connect.html|http://www.openssl.org/docs/ssl/SSL_connect.html>

=end original

openssl doc L<http://www.openssl.org/docs/ssl/SSL_connect.html|http://www.openssl.org/docs/ssl/SSL_connect.html>を確認します。
(TBR)

=item * copy_session_id

=begin original

Copies the session structure fro $from to $to (+ also the private key and certificate associated with $from).

=end original

$fromのセッション構造を$toにコピーします($fromに関連付けられた秘密鍵と証明書もコピーします)。
(TBR)

 Net::SSLeay::copy_session_id($to, $from);
 # $to - value corresponding to openssl's SSL structure
 # $from - value corresponding to openssl's SSL structure
 #
 # returns: no return value

=item * ctrl

=begin original

Internal handling function for SSL objects.

=end original

SSLオブジェクトの内部処理関数。
(TBR)

=begin original

B<BEWARE:> openssl doc says: This function should never be called directly!

=end original

B<BEWARE:>openssl doc says:この関数を直接呼び出すべきではありません!
(TBR)

 my $rv = Net::SSLeay::ctrl($ssl, $cmd, $larg, $parg);
 # $ssl - value corresponding to openssl's SSL structure
 # $cmd - (integer) command id
 # $larg - (integer) long ???
 # $parg - (string/pointer) ???
 #
 # returns: (long) result of given command ???

=begin original

For more details about valid $cmd values check L</CTX_ctrl>.

=end original

有効な$cmd値の詳細については、L</CTX_ctrl>を確認してください。
(TBR)

=begin original

Check openssl doc L<http://www.openssl.org/docs/ssl/SSL_CTX_ctrl.html|http://www.openssl.org/docs/ssl/SSL_CTX_ctrl.html>

=end original

openssl doc L<http://www.openssl.org/docs/ssl/SSL_CTX_ctrl.html|http://www.openssl.org/docs/ssl/SSL_CTX_ctrl.html>を確認します。
(TBR)

=item * do_handshake

=begin original

Will wait for a SSL/TLS handshake to take place. If the connection is in client
mode, the handshake will be started. The handshake routines may have to be
explicitly set in advance using either SSL_set_connect_state or SSL_set_accept_state(3).

=end original

SSL/TLSハンドシェイクが行われるのを待ちます。
接続がクライアントモードの場合、ハンドシェイクが開始されます。
ハンドシェイクルーチンは、SSL_set_connect_stateまたはSSL_set_accept_state(3)を使用して事前に明示的に設定する必要がある場合があります。
(TBR)

 my $rv = Net::SSLeay::do_handshake($ssl);
 # $ssl - value corresponding to openssl's SSL structure
 #
 # returns: 1 = success, 0 = handshake not successfull, <0 = fatal error during handshake

=begin original

Check openssl doc L<http://www.openssl.org/docs/ssl/SSL_do_handshake.html|http://www.openssl.org/docs/ssl/SSL_do_handshake.html>

=end original

openssl doc L<http://www.openssl.org/docs/ssl/SSL_do_handshake.html|http://www.openssl.org/docs/ssl/SSL_do_handshake.html>を確認します。
(TBR)

=item * dup

=begin original

Returns a duplicate of $ssl.

=end original

$sslの複製を返します。
(TBR)

 my $rv = Net::SSLeay::dup($ssl);
 # $ssl - value corresponding to openssl's SSL structure
 #
 # returns: value corresponding to openssl's SSL structure (0 on failure)

=item * free

=begin original

Free an allocated SSL structure.

=end original

割り当てられたSSL構造体を解放します。
(TBR)

 Net::SSLeay::free($ssl);
 # $ssl - value corresponding to openssl's SSL structure
 #
 # returns: no return value

=begin original

Check openssl doc L<http://www.openssl.org/docs/ssl/SSL_free.html|http://www.openssl.org/docs/ssl/SSL_free.html>

=end original

openssl doc L<http://www.openssl.org/docs/ssl/SSL_free.html|http://www.openssl.org/docs/ssl/SSL_free.html>を確認します。
(TBR)

=item * get_SSL_CTX

=begin original

Returns a pointer to the SSL_CTX object, from which $ssl was created with Net::SSLeay::new.

=end original

Net::SSLeay::newで$sslが作成されたSSL_CTXオブジェクトへのポインタを返します。
(TBR)

 my $rv = Net::SSLeay::get_SSL_CTX($ssl);
 # $ssl - value corresponding to openssl's SSL structure
 #
 # returns: value corresponding to openssl's SSL_CTX structure (0 on failure)

=begin original

Check openssl doc L<http://www.openssl.org/docs/ssl/SSL_get_SSL_CTX.html|http://www.openssl.org/docs/ssl/SSL_get_SSL_CTX.html>

=end original

openssl doc L<http://www.openssl.org/docs/ssl/SSL_get_SSL_CTX.html|http://www.openssl.org/docs/ssl/SSL_get_SSL_CTX.html>を確認します。
(TBR)

=item * get_app_data

=begin original

Can be used to get application defined value/data.

=end original

アプリケーション定義の値/データを取得するために使用できます。
(TBR)

 my $rv = Net::SSLeay::get_app_data($ssl);
 # $ssl - value corresponding to openssl's SSL structure
 #
 # returns: string/buffer/pointer ???

=item * set_app_data

=begin original

Can be used to set some application defined value/data.

=end original

一部のアプリケーション定義の値/データを設定するために使用できます。
(TBR)

 my $rv = Net::SSLeay::set_app_data($ssl, $arg);
 # $ssl - value corresponding to openssl's SSL structure
 # $arg - (string/buffer/pointer ???) data
 #
 # returns: ???

=item * get_certificate

=begin original

Gets X509 certificate from an established SSL connection.

=end original

確立されたSSL接続からX509証明書を取得します。
(TBR)

 my $rv = Net::SSLeay::get_certificate($ssl);
 # $ssl - value corresponding to openssl's SSL structure
 #
 # returns: value corresponding to openssl's X509 structure (0 on failure)

=item * get_cipher

=begin original

Obtains the name of the currently used cipher.

=end original

現在使用されている暗号の名前を取得します。
(TBR)

 my $rv = Net::SSLeay::get_cipher($ssl);
 # $ssl - value corresponding to openssl's SSL structure
 #
 # returns: (string) cipher name e.g. 'DHE-RSA-AES256-SHA' or '', when no session has been established.

=begin original

Check openssl doc L<http://www.openssl.org/docs/ssl/SSL_get_current_cipher.html|http://www.openssl.org/docs/ssl/SSL_get_current_cipher.html>

=end original

openssl doc L<http://www.openssl.org/docs/ssl/SSL_get_current_cipher.html|http://www.openssl.org/docs/ssl/SSL_get_current_cipher.html>を確認します。
(TBR)

=item * get_cipher_bits

=begin original

Obtain the number of secret/algorithm bits used.

=end original

使用された秘密/アルゴリズムビットの数を取得する。
(TBR)

 my $rv = Net::SSLeay::get_cipher_bits($ssl);
 # $ssl - value corresponding to openssl's SSL structure
 #
 # returns: number of secret bits used by current cipher

=begin original

Check openssl doc L<http://www.openssl.org/docs/ssl/SSL_get_current_cipher.html|http://www.openssl.org/docs/ssl/SSL_get_current_cipher.html>
and L<http://www.openssl.org/docs/ssl/SSL_CIPHER_get_name.html|http://www.openssl.org/docs/ssl/SSL_CIPHER_get_name.html>

=end original

openssl doc L<http://www.openssl.org/docs/ssl/SSL_get_current_cipher.html|http://www.openssl.org/docs/ssl/SSL_get_current_cipher.html>およびL<http://www.openssl.org/docs/ssl/SSL_CIPHER_get_name.html|http://www.openssl.org/docs/ssl/SSL_CIPHER_get_name.html>を確認します。
(TBR)

=item * get_cipher_list

=begin original

Returns the name (string) of the SSL_CIPHER listed for $ssl with priority $n.

=end original

優先順位$nの$sslに対してリストされたSSL_CIPHERの名前(文字列)を戻します。
(TBR)

 my $rv = Net::SSLeay::get_cipher_list($ssl, $n);
 # $ssl - value corresponding to openssl's SSL structure
 # $n - (integer) priority
 #
 # returns: (string) cipher name e.g. 'EDH-DSS-DES-CBC3-SHA' or '' in case of error

=begin original

Call Net::SSLeay::get_cipher_list with priority starting from 0 to obtain
the sorted list of available ciphers, until '' is returned:

=end original

「」が返されるまで、0から始まる優先順位でNet::SSLeay::get_cipher_listを呼び出して、使用可能な暗号のソートされたリストを取得します。
(TBR)

 my $priority = 0;
 while (my $c = Net::SSLeay::get_cipher_list($ssl, $priority)) {
   print "cipher[$priority] = $c\n";
   $priority++;
 }

=begin original

Check openssl doc L<http://www.openssl.org/docs/ssl/SSL_get_ciphers.html|http://www.openssl.org/docs/ssl/SSL_get_ciphers.html>

=end original

openssl doc L<http://www.openssl.org/docs/ssl/SSL_get_ciphers.html|http://www.openssl.org/docs/ssl/SSL_get_ciphers.html>を確認します。
(TBR)

=item * get_client_CA_list

=begin original

Returns the list of client CAs explicitly set for $ssl using C<Net::SSleay::set_client_CA_list>
or $ssl's SSL_CTX object with C<Net::SSLeay::CTX_set_client_CA_list>, when in server mode.

=end original

サーバモードの場合、C<Net::SSleay::set_client_CA_list>を使用して$ssl用に明示的に設定されたクライアントCAのリスト、またはC<Net::SSLeay::CTX_set_client_CA_list>を使用して$sslのSSL_CTXオブジェクトを返します。
(TBR)

=begin original

In client mode, returns the list of client CAs sent from the server, if any.

=end original

クライアントモードでは、サーバから送信されたクライアントCAのリストを返します(存在する場合)。
(TBR)

 my $rv = Net::SSLeay::get_client_CA_list($ssl);
 # $ssl - value corresponding to openssl's SSL structure
 #
 # returns: value corresponding to openssl's STACK_OF(X509_NAME) structure (0 on failure)

=begin original

Check openssl doc L<http://www.openssl.org/docs/ssl/SSL_get_client_CA_list.html|http://www.openssl.org/docs/ssl/SSL_get_client_CA_list.html>

=end original

openssl doc L<http://www.openssl.org/docs/ssl/SSL_get_client_CA_list.html|http://www.openssl.org/docs/ssl/SSL_get_client_CA_list.html>を確認します。
(TBR)

=item * get_current_cipher

=begin original

Returns the cipher actually used.

=end original

実際に使用された暗号を返します。
(TBR)

 my $rv = Net::SSLeay::get_current_cipher($ssl);
 # $ssl - value corresponding to openssl's SSL structure
 #
 # returns: value corresponding to openssl's SSL_CIPHER structure (0 on failure)

=begin original

Check openssl doc L<http://www.openssl.org/docs/ssl/SSL_get_current_cipher.html|http://www.openssl.org/docs/ssl/SSL_get_current_cipher.html>

=end original

openssl doc L<http://www.openssl.org/docs/ssl/SSL_get_current_cipher.html|http://www.openssl.org/docs/ssl/SSL_get_current_cipher.html>を確認します。
(TBR)

=item * get_default_timeout

=begin original

Returns the default timeout value assigned to SSL_SESSION objects negotiated for the protocol valid for $ssl.

=end original

$sslで有効なプロトコルに対してネゴシエートされたSSL_SESSIONオブジェクトに割り当てられたデフォルトのタイムアウト値を返します。
(TBR)

 my $rv = Net::SSLeay::get_default_timeout($ssl);
 # $ssl - value corresponding to openssl's SSL structure
 #
 # returns: (long) timeout in seconds

=begin original

Check openssl doc L<http://www.openssl.org/docs/ssl/SSL_get_default_timeout.html|http://www.openssl.org/docs/ssl/SSL_get_default_timeout.html>

=end original

openssl doc L<http://www.openssl.org/docs/ssl/SSL_get_default_timeout.html|http://www.openssl.org/docs/ssl/SSL_get_default_timeout.html>を確認します。
(TBR)

=item * get_error

=begin original

Returns a result code for a preceding call to C<connect>, C<accept>, C<do_handshake>, C<read>, C<peek> or C<write> on $ssl.

=end original

$ssl上のC<connect>、C<accept>、C<do_handshake>、C<read>、C<peek>、またはC<write>への先行コールの結果コードを返します。
(TBR)

 my $rv = Net::SSLeay::get_error($ssl, $ret);
 # $ssl - value corresponding to openssl's SSL structure
 # $ret - return value of preceding TLS/SSL I/O operation
 #
 # returns: result code, which is one of the following values:
 #  0 - SSL_ERROR_NONE
 #  1 - SSL_ERROR_SSL
 #  2 - SSL_ERROR_WANT_READ
 #  3 - SSL_ERROR_WANT_WRITE
 #  4 - SSL_ERROR_WANT_X509_LOOKUP
 #  5 - SSL_ERROR_SYSCALL
 #  6 - SSL_ERROR_ZERO_RETURN
 #  7 - SSL_ERROR_WANT_CONNECT
 #  8 - SSL_ERROR_WANT_ACCEPT

=begin original

Check openssl doc L<http://www.openssl.org/docs/ssl/SSL_get_error.html|http://www.openssl.org/docs/ssl/SSL_get_error.html>

=end original

openssl doc L<http://www.openssl.org/docs/ssl/SSL_get_error.html|http://www.openssl.org/docs/ssl/SSL_get_error.html>を確認します。
(TBR)

=item * get_ex_data

=begin original

Is used to retrieve the information for $idx from $ssl.

=end original

$idxの情報を$sslから取得するために使用されます。
(TBR)

 my $rv = Net::SSLeay::get_ex_data($ssl, $idx);
 # $ssl - value corresponding to openssl's SSL structure
 # $idx - (integer) index for application specific data
 #
 # returns: pointer to ???

=begin original

Check openssl doc L<http://www.openssl.org/docs/ssl/SSL_get_ex_new_index.html|http://www.openssl.org/docs/ssl/SSL_get_ex_new_index.html>

=end original

openssl doc L<http://www.openssl.org/docs/ssl/SSL_get_ex_new_index.html|http://www.openssl.org/docs/ssl/SSL_get_ex_new_index.html>を確認します。
(TBR)

=item * set_ex_data

=begin original

Is used to store application data at $data for $idx into the $ssl object.

=end original

$idxの$dataにあるアプリケーションデータを$sslオブジェクトに格納するために使用されます。
(TBR)

 my $rv = Net::SSLeay::set_ex_data($ssl, $idx, $data);
 # $ssl - value corresponding to openssl's SSL structure
 # $idx - (integer) ???
 # $data - (pointer) ???
 #
 # returns: 1 on success, 0 on failure

=begin original

Check openssl doc L<http://www.openssl.org/docs/ssl/SSL_get_ex_new_index.html|http://www.openssl.org/docs/ssl/SSL_get_ex_new_index.html>

=end original

openssl doc L<http://www.openssl.org/docs/ssl/SSL_get_ex_new_index.html|http://www.openssl.org/docs/ssl/SSL_get_ex_new_index.html>を確認します。
(TBR)

=item * get_ex_new_index

=begin original

Is used to register a new index for application specific data.

=end original

アプリケーション固有のデータの新しいインデックスを登録するために使用されます。
(TBR)

 my $rv = Net::SSLeay::get_ex_new_index($argl, $argp, $new_func, $dup_func, $free_func);
 # $argl - (long) ???
 # $argp - (pointer) ???
 # $new_func - function pointer ??? (CRYPTO_EX_new *)
 # $dup_func - function pointer ??? (CRYPTO_EX_dup *)
 # $free_func - function pointer ??? (CRYPTO_EX_free *)
 #
 # returns: (integer) ???

=begin original

Check openssl doc L<http://www.openssl.org/docs/ssl/SSL_get_ex_new_index.html|http://www.openssl.org/docs/ssl/SSL_get_ex_new_index.html>

=end original

openssl doc L<http://www.openssl.org/docs/ssl/SSL_get_ex_new_index.html|http://www.openssl.org/docs/ssl/SSL_get_ex_new_index.html>を確認します。
(TBR)

=item * get_fd

=begin original

Returns the file descriptor which is linked to $ssl.

=end original

$sslにリンクされているファイル記述子を返します。
(TBR)

 my $rv = Net::SSLeay::get_fd($ssl);
 # $ssl - value corresponding to openssl's SSL structure
 #
 # returns: file descriptor (>=0) or -1 on failure

=begin original

Check openssl doc L<http://www.openssl.org/docs/ssl/SSL_get_fd.html|http://www.openssl.org/docs/ssl/SSL_get_fd.html>

=end original

openssl doc L<http://www.openssl.org/docs/ssl/SSL_get_fd.html|http://www.openssl.org/docs/ssl/SSL_get_fd.html>を確認します。
(TBR)

=item * get_finished

=begin original

Obtains the latest 'Finished' message sent to the peer.

=end original

ピアに送信された最新の「Finished」メッセージを取得します。
(TBR)

=begin original

??? (does this function really work?)

=end original

(この関数は本当に動作しますか?)
(TBR)

 my $rv = Net::SSLeay::get_finished($ssl, $buf, $count);
 # $ssl - value corresponding to openssl's SSL structure
 # $buf - buffer where the returned data will be stored (pointer ???, pre-allocated ???)
 # $count - max. size of return data
 #
 # returns: actual size of the returned data in $buf

=item * get_peer_finished

=begin original

Obtains the latest 'Finished' message expected from the peer.

=end original

ピアから予想される最新の「Finished」メッセージを取得します。
(TBR)

=begin original

??? (does this function really work?)

=end original

(この関数は本当に動作しますか?)
(TBR)

 my $rv = Net::SSLeay::get_peer_finished($ssl, $buf, $count);
 # $ssl - value corresponding to openssl's SSL structure
 # $buf - buffer where the returned data will be stored (pointer ???, pre-allocated ???)
 # $count - max. size of the return data
 #
 # returns: actual size of the returned data in $buf

=item * get_keyblock_size

=begin original

B<NOTE:> Does not exactly correspond to any low level API function.

=end original

B<注意:>下位レベルのAPI関数に正確に対応していません。
(TBR)

=begin original

??? (more info needed)

=end original

(詳細情報が必要)
(TBR)

 my $rv = Net::SSLeay::get_keyblock_size($ssl);
 # $ssl - value corresponding to openssl's SSL structure
 #
 # returns: keyblock size, -1 on error

=item * get_mode

=begin original

Returns the mode (bitmask) set for $ssl.

=end original

$sslに設定されているモード(ビットマスク)を返します。
(TBR)

 my $rv = Net::SSLeay::get_mode($ssl);
 # $ssl - value corresponding to openssl's SSL structure
 #
 # returns: mode (bitmask)

=begin original

To decode the return value (bitmask) see documentation for L</CTX_get_mode>.

=end original

戻り値(ビットマスク)をデコードするには、L</CTX_get_mode>のマニュアルを参照してください。
(TBR)

=begin original

Check openssl doc L<http://www.openssl.org/docs/ssl/SSL_CTX_set_mode.html|http://www.openssl.org/docs/ssl/SSL_CTX_set_mode.html>

=end original

openssl doc L<http://www.openssl.org/docs/ssl/SSL_CTX_set_mode.html|http://www.openssl.org/docs/ssl/SSL_CTX_set_mode.html>を確認します。
(TBR)

=item * set_mode

=begin original

Adds the mode set via bitmask in $mode to $ssl. Options already set before are not cleared.

=end original

$modeのビットマスクによって設定されたモードを$sslに追加します。
以前に設定されたオプションはクリアされません。
(TBR)

 my $rv = Net::SSLeay::set_mode($ssl, $mode);
 # $ssl - value corresponding to openssl's SSL structure
 # $mode - mode (bitmask)
 #
 # returns: the new mode bitmask after adding $mode

=begin original

For $mode bitmask details see L</CTX_get_mode>.

=end original

$modeビットマスクの詳細については、L</CTX_get_mode>を参照してください。
(TBR)

=begin original

Check openssl doc L<http://www.openssl.org/docs/ssl/SSL_CTX_set_mode.html|http://www.openssl.org/docs/ssl/SSL_CTX_set_mode.html>

=end original

openssl doc L<http://www.openssl.org/docs/ssl/SSL_CTX_set_mode.html|http://www.openssl.org/docs/ssl/SSL_CTX_set_mode.html>を確認します。
(TBR)

=item * get_options

=begin original

Returns the options (bitmask) set for $ssl.

=end original

$sslに設定されているオプション(ビットマスク)を返します。
(TBR)

 my $rv = Net::SSLeay::get_options($ssl);
 # $ssl - value corresponding to openssl's SSL structure
 #
 # returns: options (bitmask)

=begin original

To decode the return value (bitmask) see documentation for L</CTX_get_options>.

=end original

戻り値(ビットマスク)をデコードするには、L</CTX_get_options>のマニュアルを参照してください。
(TBR)

=begin original

Check openssl doc L<http://www.openssl.org/docs/ssl/SSL_CTX_set_options.html|http://www.openssl.org/docs/ssl/SSL_CTX_set_options.html>

=end original

openssl doc L<http://www.openssl.org/docs/ssl/SSL_CTX_set_options.html|http://www.openssl.org/docs/ssl/SSL_CTX_set_options.html>を確認します。
(TBR)

=item * set_options

=begin original

Adds the options set via bitmask in $options to $ssl. Options already set before are not cleared!

=end original

$optionsのビットマスクを介して設定されたオプションを$sslに追加します。
以前に設定されたオプションはクリアされません!
(TBR)

 Net::SSLeay::set_options($ssl, $options);
 # $ssl - value corresponding to openssl's SSL structure
 # $options - options (bitmask)
 #
 # returns: the new options bitmask after adding $options

=begin original

For $options bitmask details see L</CTX_get_options>.

=end original

$optionsビットマスクの詳細については、L</CTX_get_options>を参照してください。
(TBR)

=begin original

Check openssl doc L<http://www.openssl.org/docs/ssl/SSL_CTX_set_options.html|http://www.openssl.org/docs/ssl/SSL_CTX_set_options.html>

=end original

openssl doc L<http://www.openssl.org/docs/ssl/SSL_CTX_set_options.html|http://www.openssl.org/docs/ssl/SSL_CTX_set_options.html>を確認します。
(TBR)

=item * get_peer_certificate

=begin original

Get the X509 certificate of the peer.

=end original

ピアのX509証明書を取得します。
(TBR)

 my $rv = Net::SSLeay::get_peer_certificate($ssl);
 # $ssl - value corresponding to openssl's SSL structure
 #
 # returns: value corresponding to openssl's X509 structure (0 on failure)

=begin original

Check openssl doc L<http://www.openssl.org/docs/ssl/SSL_get_peer_certificate.html|http://www.openssl.org/docs/ssl/SSL_get_peer_certificate.html>

=end original

openssl doc L<http://www.openssl.org/docs/ssl/SSL_get_peer_certificate.html|http://www.openssl.org/docs/ssl/SSL_get_peer_certificate.html>を確認します。
(TBR)

=item * get_quiet_shutdown

=begin original

Returns the 'quiet shutdown' setting of ssl.

=end original

sslの'quiet shutdown'設定を返します。
(TBR)

 my $rv = Net::SSLeay::get_quiet_shutdown($ssl);
 # $ssl - value corresponding to openssl's SSL structure
 #
 # returns: (integer) current 'quiet shutdown' value

=begin original

Check openssl doc L<http://www.openssl.org/docs/ssl/SSL_CTX_set_quiet_shutdown.html|http://www.openssl.org/docs/ssl/SSL_CTX_set_quiet_shutdown.html>

=end original

openssl doc L<http://www.openssl.org/docs/ssl/SSL_CTX_set_quiet_shutdown.html|http://www.openssl.org/docs/ssl/SSL_CTX_set_quiet_shutdown.html>を確認します。
(TBR)

=item * get_rbio

=begin original

Get 'read' BIO linked to an SSL object $ssl.

=end original

SSLオブジェクト$sslにリンクされた'read'BIOを取得します。
(TBR)

 my $rv = Net::SSLeay::get_rbio($ssl);
 # $ssl - value corresponding to openssl's SSL structure
 #
 # returns: value corresponding to openssl's BIO structure (0 on failure)

=begin original

Check openssl doc L<http://www.openssl.org/docs/ssl/SSL_get_rbio.html|http://www.openssl.org/docs/ssl/SSL_get_rbio.html>

=end original

openssl doc L<http://www.openssl.org/docs/ssl/SSL_get_rbio.html|http://www.openssl.org/docs/ssl/SSL_get_rbio.html>を確認します。
(TBR)

=item * get_read_ahead

 my $rv = Net::SSLeay::get_read_ahead($ssl);
 # $ssl - value corresponding to openssl's SSL structure
 #
 # returns: (integer) read_ahead value

=item * set_read_ahead

 Net::SSLeay::set_read_ahead($ssl, $val);
 # $ssl - value corresponding to openssl's SSL structure
 # $val - read_ahead value to be set
 #
 # returns: the original read_ahead value

=item * get_server_random

=begin original

Returns internal SSLv3 server_random value.

=end original

内部SSLv3 server_random値を返します。
(TBR)

 Net::SSLeay::get_server_random($ssl);
 # $ssl - value corresponding to openssl's SSL structure
 #
 # returns: server_random value (binary data)

=item * get_client_random

=begin original

B<NOTE:> Does not exactly correspond to any low level API function

=end original

B<注意:>下位レベルのAPI関数には正確に対応していません
(TBR)

=begin original

Returns internal SSLv3 client_random value.

=end original

内部SSLv3 client_random値を返します。
(TBR)

 Net::SSLeay::get_client_random($ssl);
 # $ssl - value corresponding to openssl's SSL structure
 #
 # returns: client_random value (binary data)

=item * get_session

=begin original

Retrieve TLS/SSL session data used in $ssl. The reference count of the SSL_SESSION is NOT incremented.

=end original

$sslで使用されるTLS/SSLセッションデータを取得します。
SSL_SESSIONの参照カウントは増分されません。
(TBR)

 my $rv = Net::SSLeay::get_session($ssl);
 # $ssl - value corresponding to openssl's SSL structure
 #
 # returns: value corresponding to openssl's SSL_SESSION structure (0 on failure)

=begin original

Check openssl doc L<http://www.openssl.org/docs/ssl/SSL_get_session.html|http://www.openssl.org/docs/ssl/SSL_get_session.html>

=end original

openssl doc L<http://www.openssl.org/docs/ssl/SSL_get_session.html|http://www.openssl.org/docs/ssl/SSL_get_session.html>を確認します。
(TBR)

=item * SSL_get0_session

=begin original

The alias for L</get_session> (note that the name is C<SSL_get0_session> NOT C<get0_session>).

=end original

L</get_session>のエイリアス(名前はC<SSL_get0_session>であり、C<get0_session>ではないことに注意してください)。
(TBR)

 my $rv = Net::SSLeay::SSL_get0_session();

=item * get1_session

=begin original

Returns a pointer to the SSL_SESSION actually used in $ssl. The reference count of the SSL_SESSION is incremented by 1.

=end original

$sslで実際に使用されているSSL_SESSIONへのポインタを戻します。
SSL_SESSIONの参照カウントは1ずつ増分されます。
(TBR)

 my $rv = Net::SSLeay::get1_session($ssl);
 # $ssl - value corresponding to openssl's SSL structure
 #
 # returns: value corresponding to openssl's SSL_SESSION structure (0 on failure)

=begin original

Check openssl doc L<http://www.openssl.org/docs/ssl/SSL_get_session.html|http://www.openssl.org/docs/ssl/SSL_get_session.html>

=end original

openssl doc L<http://www.openssl.org/docs/ssl/SSL_get_session.html|http://www.openssl.org/docs/ssl/SSL_get_session.html>を確認します。
(TBR)

=item * get_shared_ciphers

=begin original

Returns string with a list (colon ':' separated) of ciphers shared between client and server
within SSL session $ssl.

=end original

SSLセッション$ssl内でクライアントとサーバの間で共有される暗号のリスト(コロン':'区切り)を含む文字列を返します。
(TBR)

 my $rv = Net::SSLeay::get_shared_ciphers()
 #
 # returns: string like 'ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES256-SHA:DHE-DSS-AES256-SHA:...'

=item * get_shutdown

=begin original

Returns the shutdown mode of $ssl.

=end original

$sslのシャットダウンモードを返します。
(TBR)

 my $rv = Net::SSLeay::get_shutdown($ssl);
 # $ssl - value corresponding to openssl's SSL structure
 #
 # returns: shutdown mode (bitmask) of ssl

 #to decode the return value (bitmask) use:
 0 - No shutdown setting, yet
 1 - SSL_SENT_SHUTDOWN
 2 - SSL_RECEIVED_SHUTDOWN

=begin original

Check openssl doc L<http://www.openssl.org/docs/ssl/SSL_set_shutdown.html|http://www.openssl.org/docs/ssl/SSL_set_shutdown.html>

=end original

openssl doc L<http://www.openssl.org/docs/ssl/SSL_set_shutdown.html|http://www.openssl.org/docs/ssl/SSL_set_shutdown.html>を確認します。
(TBR)

=item * get_ssl_method

=begin original

Returns a function pointer to the TLS/SSL method set in $ssl.

=end original

$sslに設定されているTLS/SSLメソッドへの関数ポインタを返します。
(TBR)

 my $rv = Net::SSLeay::get_ssl_method($ssl);
 # $ssl - value corresponding to openssl's SSL structure
 #
 # returns: value corresponding to openssl's SSL_METHOD structure (0 on failure)

=begin original

Check openssl doc L<http://www.openssl.org/docs/ssl/SSL_CTX_set_ssl_version.html|http://www.openssl.org/docs/ssl/SSL_CTX_set_ssl_version.html>

=end original

openssl doc L<http://www.openssl.org/docs/ssl/SSL_CTX_set_ssl_version.html|http://www.openssl.org/docs/ssl/SSL_CTX_set_ssl_version.html>を確認します。
(TBR)

=item * get_state

=begin original

Returns the SSL connection state.

=end original

SSL接続の状態を返します。
(TBR)

 my $rv = Net::SSLeay::get_state($ssl);
 # $ssl - value corresponding to openssl's SSL structure
 #
 # returns: (integer) state value
 #          to decode the returned state check:
 #          SSL_ST_* constants in openssl/ssl.h
 #          SSL2_ST_* constants in openssl/ssl2.h
 #          SSL23_ST_* constants in openssl/ssl23.h
 #          SSL3_ST_* + DTLS1_ST_* constants in openssl/ssl3.h

=item * state

=begin original

Exactly the same as L</get_state>.

=end original

L</get_state>とまったく同じです。
(TBR)

 my $rv = Net::SSLeay::state($ssl);

=item * get_verify_depth

=begin original

Returns the verification depth limit currently set in $ssl.

=end original

$sslに現在設定されている検証の深さの制限を返します。
(TBR)

 my $rv = Net::SSLeay::get_verify_depth($ssl);
 # $ssl - value corresponding to openssl's SSL structure
 #
 # returns: current depth or -1 if no limit has been explicitly set

=begin original

Check openssl doc L<http://www.openssl.org/docs/ssl/SSL_CTX_get_verify_mode.html|http://www.openssl.org/docs/ssl/SSL_CTX_get_verify_mode.html>

=end original

openssl doc L<http://www.openssl.org/docs/ssl/SSL_CTX_get_verify_mode.html|http://www.openssl.org/docs/ssl/SSL_CTX_get_verify_mode.html>を確認します。
(TBR)

=item * set_verify_depth

=begin original

Sets the maximum depth for the certificate chain verification that shall be allowed for $ssl.

=end original

$sslで許可される証明書チェーン検証の最大深さを設定します。
(TBR)

 Net::SSLeay::set_verify_depth($ssl, $depth);
 # $ssl - value corresponding to openssl's SSL structure
 # $depth - (integer) depth
 #
 # returns: no return value

=begin original

Check openssl doc L<http://www.openssl.org/docs/ssl/SSL_CTX_set_verify.html|http://www.openssl.org/docs/ssl/SSL_CTX_set_verify.html>

=end original

openssl doc L<http://www.openssl.org/docs/ssl/SSL_CTX_set_verify.html|http://www.openssl.org/docs/ssl/SSL_CTX_set_verify.html>を確認します。
(TBR)

=item * get_verify_mode

=begin original

Returns the verification mode (bitmask) currently set in $ssl.

=end original

$sslで現在設定されている検証モード(ビットマスク)を返します。
(TBR)

 my $rv = Net::SSLeay::get_verify_mode($ssl);
 # $ssl - value corresponding to openssl's SSL structure
 #
 # returns: mode (bitmask)

=begin original

To decode the return value (bitmask) see documentation for L</CTX_get_verify_mode>.

=end original

戻り値(ビットマスク)をデコードするには、L</CTX_get_verify_mode>のマニュアルを参照してください。
(TBR)

=begin original

Check openssl doc L<http://www.openssl.org/docs/ssl/SSL_CTX_get_verify_mode.html|http://www.openssl.org/docs/ssl/SSL_CTX_get_verify_mode.html>

=end original

openssl doc L<http://www.openssl.org/docs/ssl/SSL_CTX_get_verify_mode.html|http://www.openssl.org/docs/ssl/SSL_CTX_get_verify_mode.html>を確認します。
(TBR)

=item * set_verify

=begin original

Sets the verification flags for $ssl to be $mode and specifies the $verify_callback function to be used.

=end original

$sslの検証フラグを$modeに設定し、使用する$verify_callback関数を指定します。
(TBR)

 Net::SSLeay::set_verify($ssl, $mode, $callback);
 # $ssl - value corresponding to openssl's SSL structure
 # $mode - mode (bitmask)
 # $callback - [optional] reference to perl callback function
 #
 # returns: no return value

=begin original

For $mode bitmask details see L</CTX_get_verify_mode>.

=end original

$modeビットマスクの詳細については、L</CTX_get_verify_mode>を参照してください。
(TBR)

=begin original

Check openssl doc L<http://www.openssl.org/docs/ssl/SSL_CTX_set_verify.html|http://www.openssl.org/docs/ssl/SSL_CTX_set_verify.html>

=end original

openssl doc L<http://www.openssl.org/docs/ssl/SSL_CTX_set_verify.html|http://www.openssl.org/docs/ssl/SSL_CTX_set_verify.html>を確認します。
(TBR)

=item * get_verify_result

=begin original

Returns the result of the verification of the X509 certificate presented by the peer, if any.

=end original

ピアによって提示されたX509証明書の検証結果を返します(存在する場合)。
(TBR)

 my $rv = Net::SSLeay::get_verify_result($ssl);
 # $ssl - value corresponding to openssl's SSL structure
 #
 # returns: (integer)
 #      0 - X509_V_OK: ok
 #      2 - X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT: unable to get issuer certificate
 #      3 - X509_V_ERR_UNABLE_TO_GET_CRL: unable to get certificate CRL
 #      4 - X509_V_ERR_UNABLE_TO_DECRYPT_CERT_SIGNATURE: unable to decrypt certificate's signature
 #      5 - X509_V_ERR_UNABLE_TO_DECRYPT_CRL_SIGNATURE: unable to decrypt CRL's signature
 #      6 - X509_V_ERR_UNABLE_TO_DECODE_ISSUER_PUBLIC_KEY: unable to decode issuer public key
 #      7 - X509_V_ERR_CERT_SIGNATURE_FAILURE: certificate signature failure
 #      8 - X509_V_ERR_CRL_SIGNATURE_FAILURE: CRL signature failure
 #      9 - X509_V_ERR_CERT_NOT_YET_VALID: certificate is not yet valid
 #     10 - X509_V_ERR_CERT_HAS_EXPIRED: certificate has expired
 #     11 - X509_V_ERR_CRL_NOT_YET_VALID: CRL is not yet valid
 #     12 - X509_V_ERR_CRL_HAS_EXPIRED: CRL has expired
 #     13 - X509_V_ERR_ERROR_IN_CERT_NOT_BEFORE_FIELD: format error in certificate's notBefore field
 #     14 - X509_V_ERR_ERROR_IN_CERT_NOT_AFTER_FIELD: format error in certificate's notAfter field
 #     15 - X509_V_ERR_ERROR_IN_CRL_LAST_UPDATE_FIELD: format error in CRL's lastUpdate field
 #     16 - X509_V_ERR_ERROR_IN_CRL_NEXT_UPDATE_FIELD: format error in CRL's nextUpdate field
 #     17 - X509_V_ERR_OUT_OF_MEM: out of memory
 #     18 - X509_V_ERR_DEPTH_ZERO_SELF_SIGNED_CERT: self signed certificate
 #     19 - X509_V_ERR_SELF_SIGNED_CERT_IN_CHAIN: self signed certificate in certificate chain
 #     20 - X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT_LOCALLY: unable to get local issuer certificate
 #     21 - X509_V_ERR_UNABLE_TO_VERIFY_LEAF_SIGNATURE: unable to verify the first certificate
 #     22 - X509_V_ERR_CERT_CHAIN_TOO_LONG: certificate chain too long
 #     23 - X509_V_ERR_CERT_REVOKED: certificate revoked
 #     24 - X509_V_ERR_INVALID_CA: invalid CA certificate
 #     25 - X509_V_ERR_PATH_LENGTH_EXCEEDED: path length constraint exceeded
 #     26 - X509_V_ERR_INVALID_PURPOSE: unsupported certificate purpose
 #     27 - X509_V_ERR_CERT_UNTRUSTED: certificate not trusted
 #     28 - X509_V_ERR_CERT_REJECTED: certificate rejected
 #     29 - X509_V_ERR_SUBJECT_ISSUER_MISMATCH: subject issuer mismatch
 #     30 - X509_V_ERR_AKID_SKID_MISMATCH: authority and subject key identifier mismatch
 #     31 - X509_V_ERR_AKID_ISSUER_SERIAL_MISMATCH: authority and issuer serial number mismatch
 #     32 - X509_V_ERR_KEYUSAGE_NO_CERTSIGN:key usage does not include certificate signing
 #     50 - X509_V_ERR_APPLICATION_VERIFICATION: application verification failure

=begin original

Check openssl doc L<http://www.openssl.org/docs/ssl/SSL_get_verify_result.html|http://www.openssl.org/docs/ssl/SSL_get_verify_result.html>

=end original

openssl doc L<http://www.openssl.org/docs/ssl/SSL_get_verify_result.html|http://www.openssl.org/docs/ssl/SSL_get_verify_result.html>を確認します。
(TBR)

=item * set_verify_result

=begin original

Override result of peer certificate verification.

=end original

ピア証明書検証の結果を上書きします。
(TBR)

 Net::SSLeay::set_verify_result($ssl, $v);
 # $ssl - value corresponding to openssl's SSL structure
 # $v - (integer) result value
 #
 # returns: no return value

=begin original

For more info about valid return values see L</get_verify_result>

=end original

有効な戻り値の詳細については、L</get_verify_result>を参照してください。
(TBR)

=begin original

Check openssl doc L<http://www.openssl.org/docs/ssl/SSL_set_verify_result.html|http://www.openssl.org/docs/ssl/SSL_set_verify_result.html>

=end original

openssl doc L<http://www.openssl.org/docs/ssl/SSL_set_verify_result.html|http://www.openssl.org/docs/ssl/SSL_set_verify_result.html>を確認します。
(TBR)

=item * get_wbio

=begin original

Get 'write' BIO linked to an SSL object $ssl.

=end original

SSLオブジェクト$sslにリンクされた'write'BIOを取得します。
(TBR)

 my $rv = Net::SSLeay::get_wbio($ssl);
 # $ssl - value corresponding to openssl's SSL structure
 #
 # returns: value corresponding to openssl's BIO structure (0 on failure)

=begin original

Check openssl doc L<http://www.openssl.org/docs/ssl/SSL_get_rbio.html|http://www.openssl.org/docs/ssl/SSL_get_rbio.html>

=end original

openssl doc L<http://www.openssl.org/docs/ssl/SSL_get_rbio.html|http://www.openssl.org/docs/ssl/SSL_get_rbio.html>を確認します。
(TBR)

=item * load_client_CA_file

=begin original

Load X509 certificates from file (PEM formated).

=end original

ファイルからX509証明書をロードします(PEM形式)。
(TBR)

 my $rv = Net::SSLeay::load_client_CA_file($file);
 # $file - (string) file name
 #
 # returns: value corresponding to openssl's STACK_OF(X509_NAME) structure (0 on failure)

=begin original

Check openssl doc L<http://www.openssl.org/docs/ssl/SSL_load_client_CA_file.html|http://www.openssl.org/docs/ssl/SSL_load_client_CA_file.html>

=end original

openssl doc L<http://www.openssl.org/docs/ssl/SSL_load_client_CA_file.html|http://www.openssl.org/docs/ssl/SSL_load_client_CA_file.html>を確認します。
(TBR)

=item * clear_num_renegotiations

=begin original

Executes SSL_CTRL_CLEAR_NUM_RENEGOTIATIONS command on $ssl.

=end original

$sslに対してSSL_CTRL_CLEAR_NUM_RENEGOTIATIONコマンドを実行します。
(TBR)

 my $rv = Net::SSLeay::clear_num_renegotiations($ssl);
 # $ssl - value corresponding to openssl's SSL structure
 #
 # returns: command result

=item * need_tmp_RSA

=begin original

Executes SSL_CTRL_NEED_TMP_RSA command on $ssl.

=end original

$sslに対してSSL_CTRL_NEED_TMP_RSAコマンドを実行します。
(TBR)

 my $rv = Net::SSLeay::need_tmp_RSA($ssl);
 # $ssl - value corresponding to openssl's SSL structure
 #
 # returns: command result

=item * num_renegotiations

=begin original

Executes SSL_CTRL_GET_NUM_RENEGOTIATIONS command on $ssl.

=end original

$sslに対してSSL_CTRL_GET_NUM_RENEGOTIATIONコマンドを実行します。
(TBR)

 my $rv = Net::SSLeay::num_renegotiations($ssl);
 # $ssl - value corresponding to openssl's SSL structure
 #
 # returns: command result

=item * total_renegotiations

=begin original

Executes SSL_CTRL_GET_TOTAL_RENEGOTIATIONS command on $ssl.

=end original

$sslに対してSSL_CTRL_GET_TOTAL_RENEGOTIATIONコマンドを実行します。
(TBR)

 my $rv = Net::SSLeay::total_renegotiations($ssl);
 # $ssl - value corresponding to openssl's SSL structure
 #
 # returns: command result

=item * peek

=begin original

Copies $max bytes from the specified $ssl into the returned value.
In constrast to the C<Net::SSLeay::read()> function, the data in the SSL
buffer is unmodified after the SSL_peek() operation.

=end original

指定された$sslから$maxバイトを戻り値にコピーします。
Cの<Net::SSLeay::read()>関数とは対照的に、SSLバッファ内のデータはSSL_peek()操作後に変更されません。
(TBR)

 Net::SSLeay::peek($ssl, $max);
 # $ssl - value corresponding to openssl's SSL structure
 # $max - [optional] max bytes to peek (integer) - default is 32768
 #
 # returns: read data, undef on error

=item * pending

=begin original

Obtain number of readable bytes buffered in $ssl object.

=end original

$sslオブジェクトにバッファーされている読み取り可能なバイト数を取得します。
(TBR)

 my $rv = Net::SSLeay::pending($ssl);
 # $ssl - value corresponding to openssl's SSL structure
 #
 # returns: the number of bytes pending

=begin original

Check openssl doc L<http://www.openssl.org/docs/ssl/SSL_pending.html|http://www.openssl.org/docs/ssl/SSL_pending.html>

=end original

openssl doc L<http://www.openssl.org/docs/ssl/SSL_pending.html|http://www.openssl.org/docs/ssl/SSL_pending.html>を確認します。
(TBR)

=item * read

=begin original

Tries to read $max bytes from the specified $ssl.

=end original

指定された$sslから$maxバイトを読み取ろうとします。
(TBR)

 my $rv = Net::SSLeay::read($ssl, $max);
 # $ssl - value corresponding to openssl's SSL structure
 # $max - [optional] max bytes to read (integer) - default is 32768
 #
 # returns: data read from a TLS/SSL connection, undef on error

=begin original

Check openssl doc L<http://www.openssl.org/docs/ssl/SSL_read.html|http://www.openssl.org/docs/ssl/SSL_read.html>

=end original

openssl doc L<http://www.openssl.org/docs/ssl/SSL_read.html|http://www.openssl.org/docs/ssl/SSL_read.html>を確認します。
(TBR)

=item * renegotiate

=begin original

Turn on flags for renegotiation so that renegotiation will happen

=end original

再ネゴシエーションが行われるように再ネゴシエーションのフラグをオンにします。
(TBR)

 my $rv = Net::SSLeay::renegotiate($ssl);
 # $ssl - value corresponding to openssl's SSL structure
 #
 # returns: 1 on success, 0 on failure

=item * rstate_string

=begin original

Returns a 2 letter string indicating the current read state of the SSL object $ssl.

=end original

SSLオブジェクト$sslの現在の読み取り状態を示す2文字の文字列を返します。
(TBR)

 my $rv = Net::SSLeay::rstate_string($ssl);
 # $ssl - value corresponding to openssl's SSL structure
 #
 # returns: 2-letter string

=begin original

Check openssl doc L<http://www.openssl.org/docs/ssl/SSL_rstate_string.html|http://www.openssl.org/docs/ssl/SSL_rstate_string.html>

=end original

openssl doc L<http://www.openssl.org/docs/ssl/SSL_rstate_string.html|http://www.openssl.org/docs/ssl/SSL_rstate_string.html>を確認します。
(TBR)

=item * rstate_string_long

=begin original

Returns a string indicating the current read state of the SSL object ssl.

=end original

SSLオブジェクトsslの現在の読み取り状態を示す文字列を返します。
(TBR)

 my $rv = Net::SSLeay::rstate_string_long($ssl);
 # $ssl - value corresponding to openssl's SSL structure
 #
 # returns: string with current state

=begin original

Check openssl doc L<http://www.openssl.org/docs/ssl/SSL_rstate_string.html|http://www.openssl.org/docs/ssl/SSL_rstate_string.html>

=end original

openssl doc L<http://www.openssl.org/docs/ssl/SSL_rstate_string.html|http://www.openssl.org/docs/ssl/SSL_rstate_string.html>を確認します。
(TBR)

=item * session_reused

=begin original

Query whether a reused session was negotiated during handshake.

=end original

再利用されたセッションがハンドシェイク中にネゴシエートされたかどうかを問い合わせます。
(TBR)

 my $rv = Net::SSLeay::session_reused($ssl);
 # $ssl - value corresponding to openssl's SSL structure
 #
 # returns: 0 - new session was negotiated; 1 - session was reused.

=begin original

Check openssl doc L<http://www.openssl.org/docs/ssl/SSL_session_reused.html|http://www.openssl.org/docs/ssl/SSL_session_reused.html>

=end original

openssl doc L<http://www.openssl.org/docs/ssl/SSL_session_reused.html|http://www.openssl.org/docs/ssl/SSL_session_reused.html>を確認します。
(TBR)

=item * set1_param

=begin original

Applies X509 verification parameters $vpm on $ssl

=end original

X509検証パラメータ$vpmを$sslに適用します
(TBR)

 my $rv = Net::SSLeay::set1_param($ssl, $vpm);
 # $ssl - value corresponding to openssl's SSL structure
 # $vpm - value corresponding to openssl's X509_VERIFY_PARAM structure
 #
 # returns: 1 on success, 0 on failure

=item * set_accept_state

=begin original

Sets $ssl to work in server mode.

=end original

$sslをサーバモードで動作するように設定します。
(TBR)

 Net::SSLeay::set_accept_state($ssl);
 # $ssl - value corresponding to openssl's SSL structure
 #
 # returns: no return value

=begin original

Check openssl doc L<http://www.openssl.org/docs/ssl/SSL_set_connect_state.html|http://www.openssl.org/docs/ssl/SSL_set_connect_state.html>

=end original

openssl doc L<http://www.openssl.org/docs/ssl/SSL_set_connect_state.html|http://www.openssl.org/docs/ssl/SSL_set_connect_state.html>を確認します。
(TBR)

=item * set_bio

=begin original

Connects the BIOs $rbio and $wbio for the read and write operations of the TLS/SSL (encrypted) side of $ssl.

=end original

$sslのTLS/SSL(暗号化)側の読み取りおよび書き込み操作のために、BIOs$rbioと$wbioを接続します。
(TBR)

 Net::SSLeay::set_bio($ssl, $rbio, $wbio);
 # $ssl - value corresponding to openssl's SSL structure
 # $rbio - value corresponding to openssl's BIO structure
 # $wbio - value corresponding to openssl's BIO structure
 #
 # returns: no return value

=begin original

Check openssl doc L<http://www.openssl.org/docs/ssl/SSL_set_bio.html|http://www.openssl.org/docs/ssl/SSL_set_bio.html>

=end original

openssl doc L<http://www.openssl.org/docs/ssl/SSL_set_bio.html|http://www.openssl.org/docs/ssl/SSL_set_bio.html>を確認します。
(TBR)

=item * set_cipher_list

=begin original

Sets the list of ciphers only for ssl.

=end original

ssl専用の暗号リストを設定します。
(TBR)

 my $rv = Net::SSLeay::set_cipher_list($ssl, $str);
 # $ssl - value corresponding to openssl's SSL structure
 # $str - (string) cipher list e.g. '3DES:+RSA'
 #
 # returns: 1 if any cipher could be selected and 0 on complete failure

=begin original

Check openssl doc L<http://www.openssl.org/docs/ssl/SSL_CTX_set_cipher_list.html|http://www.openssl.org/docs/ssl/SSL_CTX_set_cipher_list.html>

=end original

openssl doc L<http://www.openssl.org/docs/ssl/SSL_CTX_set_cipher_list.html|http://www.openssl.org/docs/ssl/SSL_CTX_set_cipher_list.html>を確認します。
(TBR)

=item * set_client_CA_list

=begin original

Sets the list of CAs sent to the client when requesting a client certificate
for the chosen $ssl, overriding the setting valid for $ssl's SSL_CTX object.

=end original

$sslのSSL_CTXオブジェクトの有効な設定を上書きして、選択した$sslのクライアント証明書を要求するときにクライアントに送信されるCAのリストを設定します。
(TBR)

 my $rv = Net::SSLeay::set_client_CA_list($ssl, $list);
 # $ssl - value corresponding to openssl's SSL structure
 # $list - value corresponding to openssl's STACK_OF(X509_NAME) structure
 #
 # returns: no return value

=begin original

Check openssl doc L<http://www.openssl.org/docs/ssl/SSL_CTX_set_client_CA_list.html|http://www.openssl.org/docs/ssl/SSL_CTX_set_client_CA_list.html>

=end original

openssl doc L<http://www.openssl.org/docs/ssl/SSL_CTX_set_client_CA_list.html|http://www.openssl.org/docs/ssl/SSL_CTX_set_client_CA_list.html>を確認します。
(TBR)

=item * set_connect_state

=begin original

Sets $ssl to work in client mode.

=end original

$sslをクライアントモードで動作するように設定します。
(TBR)

 Net::SSLeay::set_connect_state($ssl);
 # $ssl - value corresponding to openssl's SSL structure
 #
 # returns: no return value

=begin original

Check openssl doc L<http://www.openssl.org/docs/ssl/SSL_set_connect_state.html|http://www.openssl.org/docs/ssl/SSL_set_connect_state.html>

=end original

openssl doc L<http://www.openssl.org/docs/ssl/SSL_set_connect_state.html|http://www.openssl.org/docs/ssl/SSL_set_connect_state.html>を確認します。
(TBR)

=item * set_fd

=begin original

Sets the file descriptor $fd as the input/output facility for the TLS/SSL (encrypted)
side of $ssl, $fd will typically be the socket file descriptor of a network connection.

=end original

ファイル記述子$fdを$sslのTLS/SSL(暗号化)側の入出力機能として設定します。
$fdは通常、ネットワーク接続のソケットファイル記述子です。
(TBR)

 my $rv = Net::SSLeay::set_fd($ssl, $fd);
 # $ssl - value corresponding to openssl's SSL structure
 # $fd - (integer) file handle (got via perl's fileno)
 #
 # returns: 1 on success, 0 on failure

=begin original

Check openssl doc L<http://www.openssl.org/docs/ssl/SSL_set_fd.html|http://www.openssl.org/docs/ssl/SSL_set_fd.html>

=end original

openssl doc L<http://www.openssl.org/docs/ssl/SSL_set_fd.html|http://www.openssl.org/docs/ssl/SSL_set_fd.html>を確認します。
(TBR)

=item * set_rfd

=begin original

Sets the file descriptor $fd as the input (read) facility for the TLS/SSL (encrypted) side of $ssl.

=end original

$sslのTLS/SSL(暗号化)側の入力(読み取り)ファシリティとして、ファイル記述子$fdを設定します。
(TBR)

 my $rv = Net::SSLeay::set_rfd($ssl, $fd);
 # $ssl - value corresponding to openssl's SSL structure
 # $fd - (integer) file handle (got via perl's fileno)
 #
 # returns: 1 on success, 0 on failure

=begin original

Check openssl doc L<http://www.openssl.org/docs/ssl/SSL_set_fd.html|http://www.openssl.org/docs/ssl/SSL_set_fd.html>

=end original

openssl doc L<http://www.openssl.org/docs/ssl/SSL_set_fd.html|http://www.openssl.org/docs/ssl/SSL_set_fd.html>を確認します。
(TBR)

=item * set_wfd

 my $rv = Net::SSLeay::set_wfd($ssl, $fd);
 # $ssl - value corresponding to openssl's SSL structure
 # $fd - (integer) file handle (got via perl's fileno)
 #
 # returns: 1 on success, 0 on failure

=begin original

Check openssl doc L<http://www.openssl.org/docs/ssl/SSL_set_fd.html|http://www.openssl.org/docs/ssl/SSL_set_fd.html>

=end original

openssl doc L<http://www.openssl.org/docs/ssl/SSL_set_fd.html|http://www.openssl.org/docs/ssl/SSL_set_fd.html>を確認します。
(TBR)

=item * set_info_callback

=begin original

Sets the callback function, that can be used to obtain state information for $ssl during connection setup and use.
When callback is 0 (NULL), the callback setting currently valid for ctx is used.

=end original

接続の設定および使用時に$sslの状態情報を取得するために使用できるコールバック関数を設定します。
callbackが0(NULL)の場合、ctxに対して現在有効なコールバック設定が使用されます。
(TBR)

=begin original

??? (does this function really work?)

=end original

(この関数は本当に動作しますか?)
(TBR)

 Net::SSLeay::set_info_callback($ssl, $cb);
 # $ssl - value corresponding to openssl's SSL structure
 # $cb - pointer to function ???
 #
 # returns: no return value

=begin original

Check openssl doc L<http://www.openssl.org/docs/ssl/SSL_CTX_set_info_callback.html|http://www.openssl.org/docs/ssl/SSL_CTX_set_info_callback.html>

=end original

openssl doc L<http://www.openssl.org/docs/ssl/SSL_CTX_set_info_callback.html|http://www.openssl.org/docs/ssl/SSL_CTX_set_info_callback.html>を確認します。
(TBR)

=item * set_pref_cipher

=begin original

Sets the list of available ciphers for $ssl using the control string $str.

=end original

制御文字列$strを使用して、$sslで使用可能な暗号のリストを設定します。
(TBR)

 my $rv = Net::SSLeay::set_pref_cipher($ssl, $str);
 # $ssl - value corresponding to openssl's SSL structure
 # $str - (string) cipher list e.g. '3DES:+RSA'
 #
 # returns: 1 if any cipher could be selected and 0 on complete failure

=begin original

Check openssl doc L<http://www.openssl.org/docs/ssl/SSL_CTX_set_cipher_list.html|http://www.openssl.org/docs/ssl/SSL_CTX_set_cipher_list.html>

=end original

openssl doc L<http://www.openssl.org/docs/ssl/SSL_CTX_set_cipher_list.html|http://www.openssl.org/docs/ssl/SSL_CTX_set_cipher_list.html>を確認します。
(TBR)

=item * set_purpose

 my $rv = Net::SSLeay::set_purpose($ssl, $purpose);
 # $ssl - value corresponding to openssl's SSL structure
 # $purpose - (integer) purpose identifier
 #
 # returns: 1 on success, 0 on failure

=begin original

For more info about available $purpose identifiers see L</CTX_set_purpose>.

=end original

使用可能な$purpose識別子の詳細については、L</CTX_set_purpose>を参照してください。
(TBR)

=item * set_quiet_shutdown

=begin original

Sets the 'quiet shutdown' flag for $ssl to be $mode.

=end original

$sslの'quiet shutdown'フラグを$modeに設定します。
(TBR)

 Net::SSLeay::set_quiet_shutdown($ssl, $mode);
 # $ssl - value corresponding to openssl's SSL structure
 # $mode - 0 or 1
 #
 # returns: no return value

=begin original

Check openssl doc L<http://www.openssl.org/docs/ssl/SSL_CTX_set_quiet_shutdown.html|http://www.openssl.org/docs/ssl/SSL_CTX_set_quiet_shutdown.html>

=end original

openssl doc L<http://www.openssl.org/docs/ssl/SSL_CTX_set_quiet_shutdown.html|http://www.openssl.org/docs/ssl/SSL_CTX_set_quiet_shutdown.html>を確認します。
(TBR)

=item * set_session

=begin original

Set a TLS/SSL session to be used during TLS/SSL connect.

=end original

TLS/SSL通信時に使用するTLS/SSL通信を設定します。
(TBR)

 my $rv = Net::SSLeay::set_session($to, $ses);
 # $to - value corresponding to openssl's SSL structure
 # $ses - value corresponding to openssl's SSL_SESSION structure
 #
 # returns: 1 on success, 0 on failure

=begin original

Check openssl doc L<http://www.openssl.org/docs/ssl/SSL_set_session.html|http://www.openssl.org/docs/ssl/SSL_set_session.html>

=end original

openssl doc L<http://www.openssl.org/docs/ssl/SSL_set_session.html|http://www.openssl.org/docs/ssl/SSL_set_session.html>を確認します。
(TBR)

=item * set_session_id_context

=begin original

Sets the context $sid_ctx of length $sid_ctx_len within which a session can be reused for the $ssl object.

=end original

$sslオブジェクトのセッションを再利用できる長さ$sid_ctx_lenのコンテキスト$sid_ctxを設定します。
(TBR)

 my $rv = Net::SSLeay::set_session_id_context($ssl, $sid_ctx, $sid_ctx_len);
 # $ssl - value corresponding to openssl's SSL structure
 # $sid_ctx - data buffer
 # $sid_ctx_len - length of data in $sid_ctx
 #
 # returns: 1 on success, 0 on failure

=begin original

Check openssl doc L<http://www.openssl.org/docs/ssl/SSL_CTX_set_session_id_context.html|http://www.openssl.org/docs/ssl/SSL_CTX_set_session_id_context.html>

=end original

openssl doc L<http://www.openssl.org/docs/ssl/SSL_CTX_set_session_id_context.html|http://www.openssl.org/docs/ssl/SSL_CTX_set_session_id_context.html>を確認します。
(TBR)

=item * set_session_secret_cb

=begin original

Setup pre-shared secret session resumption function.

=end original

事前共有秘密セッション再開機能をセットアップします。
(TBR)

 Net::SSLeay::set_session_secret_cb($ssl, $func, $data);
 # $ssl - value corresponding to openssl's SSL structure
 # $func - perl reference to callback function
 # $data - [optional] data that will be passed to callback function when invoked
 #
 # returns: no return value

=item * set_shutdown

=begin original

Sets the shutdown state of $ssl to $mode.

=end original

$sslのシャットダウン状態を$modeに設定します。
(TBR)

 Net::SSLeay::set_shutdown($ssl, $mode);
 # $ssl - value corresponding to openssl's SSL structure
 # $mode - (integer) shutdown mode:
 #         0 - No shutdown
 #         1 - SSL_SENT_SHUTDOWN
 #         2 - SSL_RECEIVED_SHUTDOWN
 #         3 - SSL_RECEIVED_SHUTDOWN+SSL_SENT_SHUTDOWN
 #
 # returns: no return value

=begin original

Check openssl doc L<http://www.openssl.org/docs/ssl/SSL_set_shutdown.html|http://www.openssl.org/docs/ssl/SSL_set_shutdown.html>

=end original

openssl doc L<http://www.openssl.org/docs/ssl/SSL_set_shutdown.html|http://www.openssl.org/docs/ssl/SSL_set_shutdown.html>を確認します。
(TBR)

=item * set_ssl_method

=begin original

Sets a new TLS/SSL method for a particular $ssl object.

=end original

特定の$sslオブジェクトの新しいTLS/SSLメソッドを設定します。
(TBR)

 my $rv = Net::SSLeay::set_ssl_method($ssl, $method);
 # $ssl - value corresponding to openssl's SSL structure
 # $method - value corresponding to openssl's SSL_METHOD structure
 #
 # returns: 1 on success, 0 on failure

=begin original

Check openssl doc L<http://www.openssl.org/docs/ssl/SSL_CTX_set_ssl_version.html|http://www.openssl.org/docs/ssl/SSL_CTX_set_ssl_version.html>

=end original

openssl doc L<http://www.openssl.org/docs/ssl/SSL_CTX_set_ssl_version.html|http://www.openssl.org/docs/ssl/SSL_CTX_set_ssl_version.html>を確認します。
(TBR)

=item * set_tmp_dh

=begin original

Sets DH parameters to be used to be $dh.

=end original

使用するDHパラメータを$dhに設定します。
(TBR)

 my $rv = Net::SSLeay::set_tmp_dh($ssl, $dh);
 # $ssl - value corresponding to openssl's SSL structure
 # $dh - value corresponding to openssl's DH structure
 #
 # returns: 1 on success, 0 on failure

=begin original

Check openssl doc L<http://www.openssl.org/docs/ssl/SSL_CTX_set_tmp_dh_callback.html|http://www.openssl.org/docs/ssl/SSL_CTX_set_tmp_dh_callback.html>

=end original

openssl doc L<http://www.openssl.org/docs/ssl/SSL_CTX_set_tmp_dh_callback.html|http://www.openssl.org/docs/ssl/SSL_CTX_set_tmp_dh_callback.html>を確認します。
(TBR)

=item * set_tmp_dh_callback

=begin original

Sets the callback function for $ssl to be used when a DH parameters are required to $dh_cb.

=end original

$dh_cbにDHパラメータが必要な場合に使用される$sslのコールバック関数を設定します。
(TBR)

=begin original

??? (does this function really work?)

=end original

(この関数は本当に動作しますか?)
(TBR)

 Net::SSLeay::set_tmp_dh_callback($ssl, $dh);
 # $ssl - value corresponding to openssl's SSL structure
 # $dh_cb - pointer to function ???
 #
 # returns: no return value

=begin original

Check openssl doc L<http://www.openssl.org/docs/ssl/SSL_CTX_set_tmp_dh_callback.html|http://www.openssl.org/docs/ssl/SSL_CTX_set_tmp_dh_callback.html>

=end original

openssl doc L<http://www.openssl.org/docs/ssl/SSL_CTX_set_tmp_dh_callback.html|http://www.openssl.org/docs/ssl/SSL_CTX_set_tmp_dh_callback.html>を確認します。
(TBR)

=item * set_tmp_rsa

=begin original

Sets the temporary/ephemeral RSA key to be used in $ssl to be $rsa.

=end original

$sslで使用する一時/一時的なRSAキーを$rsaに設定します。
(TBR)

 my $rv = Net::SSLeay::set_tmp_rsa($ssl, $rsa);
 # $ssl - value corresponding to openssl's SSL structure
 # $rsa - value corresponding to openssl's RSA structure
 #
 # returns: 1 on success, 0 on failure

=begin original

Example:

=end original

例:
(TBR)

 $rsakey = Net::SSLeay::RSA_generate_key();
 Net::SSLeay::set_tmp_rsa($ssl, $rsakey);
 Net::SSLeay::RSA_free($rsakey);

=begin original

Check openssl doc L<http://www.openssl.org/docs/ssl/SSL_CTX_set_tmp_rsa_callback.html|http://www.openssl.org/docs/ssl/SSL_CTX_set_tmp_rsa_callback.html>

=end original

openssl doc L<http://www.openssl.org/docs/ssl/SSL_CTX_set_tmp_rsa_callback.html|http://www.openssl.org/docs/ssl/SSL_CTX_set_tmp_rsa_callback.html>を確認します。
(TBR)

=item * set_tmp_rsa_callback

=begin original

Sets the callback function for $ssl to be used when a temporary/ephemeral RSA key is required to $tmp_rsa_callback.

=end original

$tmp_rsa_callbackに一時的/一時的なRSAキーが必要な場合に使用される$sslのコールバック関数を設定します。
(TBR)

=begin original

??? (does this function really work?)

=end original

(この関数は本当に動作しますか?)
(TBR)

 Net::SSLeay::set_tmp_rsa_callback($ssl, $tmp_rsa_callback);
 # $ssl - value corresponding to openssl's SSL structure
 # $tmp_rsa_callback - (function pointer) ???
 #
 # returns: no return value

=begin original

Check openssl doc L<http://www.openssl.org/docs/ssl/SSL_CTX_set_tmp_rsa_callback.html|http://www.openssl.org/docs/ssl/SSL_CTX_set_tmp_rsa_callback.html>

=end original

openssl doc L<http://www.openssl.org/docs/ssl/SSL_CTX_set_tmp_rsa_callback.html|http://www.openssl.org/docs/ssl/SSL_CTX_set_tmp_rsa_callback.html>を確認します。
(TBR)

=item * set_trust

 my $rv = Net::SSLeay::set_trust($ssl, $trust);
 # $ssl - value corresponding to openssl's SSL structure
 # $trust - (integer) trust identifier
 #
 # returns: the original value

=begin original

For more details about $trust values see L</CTX_set_trust>.

=end original

$trust値の詳細については、L</CTX_set_trust>を参照してください。
(TBR)

=item * shutdown

=begin original

Shuts down an active TLS/SSL connection. It sends the 'close notify' shutdown alert to the peer.

=end original

アクティブなTLS/SSL接続をシャットダウンします。
'close notify'シャットダウンアラートをピアに送信します。
(TBR)

 my $rv = Net::SSLeay::shutdown($ssl);
 # $ssl - value corresponding to openssl's SSL structure
 #
 # returns: 1 - shutdown was successfully completed
 #          0 - shutdown is not yet finished,
 #         -1 - shutdown was not successful

=begin original

Check openssl doc L<http://www.openssl.org/docs/ssl/SSL_shutdown.html|http://www.openssl.org/docs/ssl/SSL_shutdown.html>

=end original

openssl doc L<http://www.openssl.org/docs/ssl/SSL_shutdown.html|http://www.openssl.org/docs/ssl/SSL_shutdown.html>を確認します。
(TBR)

=item * state_string

=begin original

Returns a 6 letter string indicating the current state of the SSL object $ssl.

=end original

SSLオブジェクト$sslの現在の状態を示す6文字の文字列を返します。
(TBR)

 my $rv = Net::SSLeay::state_string($ssl);
 # $ssl - value corresponding to openssl's SSL structure
 #
 # returns: 6-letter string

=begin original

Check openssl doc L<http://www.openssl.org/docs/ssl/SSL_state_string.html|http://www.openssl.org/docs/ssl/SSL_state_string.html>

=end original

openssl doc L<http://www.openssl.org/docs/ssl/SSL_state_string.html|http://www.openssl.org/docs/ssl/SSL_state_string.html>を確認します。
(TBR)

=item * state_string_long

=begin original

Returns a string indicating the current state of the SSL object $ssl.

=end original

SSLオブジェクト$sslの現在の状態を示す文字列を返します。
(TBR)

 my $rv = Net::SSLeay::state_string_long($ssl);
 # $ssl - value corresponding to openssl's SSL structure
 #
 # returns: state strings

=begin original

Check openssl doc L<http://www.openssl.org/docs/ssl/SSL_state_string.html|http://www.openssl.org/docs/ssl/SSL_state_string.html>

=end original

openssl doc L<http://www.openssl.org/docs/ssl/SSL_state_string.html|http://www.openssl.org/docs/ssl/SSL_state_string.html>を確認します。
(TBR)

=item * use_PrivateKey

=begin original

Adds $pkey as private key to $ssl.

=end original

$pkeyをプライベートキーとして$sslに追加します。
(TBR)

 my $rv = Net::SSLeay::use_PrivateKey($ssl, $pkey);
 # $ssl - value corresponding to openssl's SSL structure
 # $pkey - value corresponding to openssl's EVP_PKEY structure
 #
 # returns: 1 on success, otherwise check out the error stack to find out the reason

=begin original

Check openssl doc L<http://www.openssl.org/docs/ssl/SSL_CTX_use_certificate.html|http://www.openssl.org/docs/ssl/SSL_CTX_use_certificate.html>

=end original

openssl doc L<http://www.openssl.org/docs/ssl/SSL_CTX_use_certificate.html|http://www.openssl.org/docs/ssl/SSL_CTX_use_certificate.html>を確認します。
(TBR)

=item * use_PrivateKey_ASN1

=begin original

Adds the private key of type $pk stored in $data to $ssl.

=end original

$dataに保存されている$pk型の秘密鍵を$sslに追加します。
(TBR)

 my $rv = Net::SSLeay::use_PrivateKey_ASN1($pk, $ssl, $d, $len);
 # $pk - (integer) key type, NID of corresponding algorithm
 # $ssl - value corresponding to openssl's SSL structure
 # $data - key data (binary)
 # $len - length of $data
 #
 # returns: 1 on success, otherwise check out the error stack to find out the reason

=begin original

Check openssl doc L<http://www.openssl.org/docs/ssl/SSL_CTX_use_certificate.html|http://www.openssl.org/docs/ssl/SSL_CTX_use_certificate.html>

=end original

openssl doc L<http://www.openssl.org/docs/ssl/SSL_CTX_use_certificate.html|http://www.openssl.org/docs/ssl/SSL_CTX_use_certificate.html>を確認します。
(TBR)

=item * use_PrivateKey_file

=begin original

Adds the first private key found in $file to $ssl.

=end original

$fileで見つかった最初の秘密鍵を$sslに追加します。
(TBR)

 my $rv = Net::SSLeay::use_PrivateKey_file($ssl, $file, $type);
 # $ssl - value corresponding to openssl's SSL structure
 # $file - (string) file name
 # $type - (integer) type - use constants &Net::SSLeay::FILETYPE_PEM or &Net::SSLeay::FILETYPE_ASN1
 #
 # returns: 1 on success, otherwise check out the error stack to find out the reason

=begin original

Check openssl doc L<http://www.openssl.org/docs/ssl/SSL_CTX_use_certificate.html|http://www.openssl.org/docs/ssl/SSL_CTX_use_certificate.html>

=end original

openssl doc L<http://www.openssl.org/docs/ssl/SSL_CTX_use_certificate.html|http://www.openssl.org/docs/ssl/SSL_CTX_use_certificate.html>を確認します。
(TBR)

=item * use_RSAPrivateKey

=begin original

Adds $rsa as RSA private key to $ssl.

=end original

$rsaをRSA秘密キーとして$sslに追加します。
(TBR)

 my $rv = Net::SSLeay::use_RSAPrivateKey($ssl, $rsa);
 # $ssl - value corresponding to openssl's SSL structure
 # $rsa - value corresponding to openssl's RSA structure
 #
 # returns: 1 on success, otherwise check out the error stack to find out the reason

=begin original

Check openssl doc L<http://www.openssl.org/docs/ssl/SSL_CTX_use_certificate.html|http://www.openssl.org/docs/ssl/SSL_CTX_use_certificate.html>

=end original

openssl doc L<http://www.openssl.org/docs/ssl/SSL_CTX_use_certificate.html|http://www.openssl.org/docs/ssl/SSL_CTX_use_certificate.html>を確認します。
(TBR)

=item * use_RSAPrivateKey_ASN1

=begin original

Adds RSA private key stored in $data to $ssl.

=end original

$dataに保存されているRSA秘密キーを$sslに追加します。
(TBR)

 my $rv = Net::SSLeay::use_RSAPrivateKey_ASN1($ssl, $data, $len);
 # $ssl - value corresponding to openssl's SSL structure
 # $data - key data (binary)
 # $len - length of $data
 #
 # returns: 1 on success, otherwise check out the error stack to find out the reason

=begin original

Check openssl doc L<http://www.openssl.org/docs/ssl/SSL_CTX_use_certificate.html|http://www.openssl.org/docs/ssl/SSL_CTX_use_certificate.html>

=end original

openssl doc L<http://www.openssl.org/docs/ssl/SSL_CTX_use_certificate.html|http://www.openssl.org/docs/ssl/SSL_CTX_use_certificate.html>を確認します。
(TBR)

=item * use_RSAPrivateKey_file

=begin original

Adds the first RSA private key found in $file to $ssl.

=end original

$fileで見つかった最初のRSA秘密キーを$sslに追加します。
(TBR)

 my $rv = Net::SSLeay::use_RSAPrivateKey_file($ssl, $file, $type);
 # $ssl - value corresponding to openssl's SSL structure
 # $file - (string) file name
 # $type - (integer) type - use constants &Net::SSLeay::FILETYPE_PEM or &Net::SSLeay::FILETYPE_ASN1
 #
 # returns: 1 on success, otherwise check out the error stack to find out the reason

=begin original

Check openssl doc L<http://www.openssl.org/docs/ssl/SSL_CTX_use_certificate.html|http://www.openssl.org/docs/ssl/SSL_CTX_use_certificate.html>

=end original

openssl doc L<http://www.openssl.org/docs/ssl/SSL_CTX_use_certificate.html|http://www.openssl.org/docs/ssl/SSL_CTX_use_certificate.html>を確認します。
(TBR)

=item * use_certificate

=begin original

Loads the certificate $x into $ssl.

=end original

証明書$xを$sslにロードします。
(TBR)

 my $rv = Net::SSLeay::use_certificate($ssl, $x);
 # $ssl - value corresponding to openssl's SSL structure
 # $x - value corresponding to openssl's X509 structure
 #
 # returns: 1 on success, otherwise check out the error stack to find out the reason

=begin original

Check openssl doc L<http://www.openssl.org/docs/ssl/SSL_CTX_use_certificate.html|http://www.openssl.org/docs/ssl/SSL_CTX_use_certificate.html>

=end original

openssl doc L<http://www.openssl.org/docs/ssl/SSL_CTX_use_certificate.html|http://www.openssl.org/docs/ssl/SSL_CTX_use_certificate.html>を確認します。
(TBR)

=item * use_certificate_ASN1

=begin original

Loads the ASN1 encoded certificate from $data to $ssl.

=end original

ASN1エンコード証明書を$dataから$sslにロードします。
(TBR)

 my $rv = Net::SSLeay::use_certificate_ASN1($ssl, $data, $len);
 # $ssl - value corresponding to openssl's SSL structure
 # $data - certificate data (binary)
 # $len - length of $data
 #
 # returns: 1 on success, otherwise check out the error stack to find out the reason

=begin original

Check openssl doc L<http://www.openssl.org/docs/ssl/SSL_CTX_use_certificate.html|http://www.openssl.org/docs/ssl/SSL_CTX_use_certificate.html>

=end original

openssl doc L<http://www.openssl.org/docs/ssl/SSL_CTX_use_certificate.html|http://www.openssl.org/docs/ssl/SSL_CTX_use_certificate.html>を確認します。
(TBR)

=item * use_certificate_file

=begin original

Loads the first certificate stored in $file into $ssl.

=end original

$fileに保存されている最初の証明書を$sslにロードします。
(TBR)

 my $rv = Net::SSLeay::use_certificate_file($ssl, $file, $type);
 # $ssl - value corresponding to openssl's SSL structure
 # $file - (string) file name
 # $type - (integer) type - use constants &Net::SSLeay::FILETYPE_PEM or &Net::SSLeay::FILETYPE_ASN1
 #
 # returns: 1 on success, otherwise check out the error stack to find out the reason

=begin original

Check openssl doc L<http://www.openssl.org/docs/ssl/SSL_CTX_use_certificate.html|http://www.openssl.org/docs/ssl/SSL_CTX_use_certificate.html>

=end original

openssl doc L<http://www.openssl.org/docs/ssl/SSL_CTX_use_certificate.html|http://www.openssl.org/docs/ssl/SSL_CTX_use_certificate.html>を確認します。
(TBR)

=item * version

=begin original

Returns SSL/TLS protocol version

=end original

SSL/TLSプロトコルのバージョンを返します。
(TBR)

 my $rv = Net::SSLeay::version($ssl);
 # $ssl - value corresponding to openssl's SSL structure
 #
 # returns: (integer) protocol version
 #          0x0002 - SSL2_VERSION  (SSLv2)
 #          0x0300 - SSL3_VERSION  (SSLv3)
 #          0x0301 - TLS1_VERSION  (TLSv1)
 #          0xFEFF - DTLS1_VERSION (DTLSv1)

=item * want

=begin original

Returns state information for the SSL object $ssl.

=end original

SSLオブジェクト$sslの状態情報を返します。
(TBR)

 my $rv = Net::SSLeay::want($ssl);
 # $ssl - value corresponding to openssl's SSL structure
 #
 # returns: state
 #          1 - SSL_NOTHING
 #          2 - SSL_WRITING
 #          3 - SSL_READING
 #          4 - SSL_X509_LOOKUP

=begin original

Check openssl doc L<http://www.openssl.org/docs/ssl/SSL_want.html|http://www.openssl.org/docs/ssl/SSL_want.html>

=end original

openssl doc L<http://www.openssl.org/docs/ssl/SSL_want.html|http://www.openssl.org/docs/ssl/SSL_want.html>を確認します。
(TBR)

=item * write

=begin original

Writes data from the buffer $data into the specified $ssl connection.

=end original

バッファ$dataから指定された$ssl接続にデータを書き込みます。
(TBR)

 my $rv = Net::SSLeay::write($ssl, $data);
 # $ssl - value corresponding to openssl's SSL structure
 # $data - data to be written
 #
 # returns: >0 - (success) number of bytes actually written to the TLS/SSL connection
 #           0 - write not successful, probably the underlying connection was closed
 #          <0 - error

=begin original

Check openssl doc L<http://www.openssl.org/docs/ssl/SSL_write.html|http://www.openssl.org/docs/ssl/SSL_write.html>

=end original

openssl doc L<http://www.openssl.org/docs/ssl/SSL_write.html|http://www.openssl.org/docs/ssl/SSL_write.html>を確認します。
(TBR)

=item * write_partial

=begin original

B<NOTE:> Does not exactly correspond to any low level API function

=end original

B<注意:>下位レベルのAPI関数には正確に対応していません
(TBR)

=begin original

Writes a fragment of data data from the buffer $data into the specified $ssl connection.

=end original

バッファ$dataから指定された$ssl接続にデータdataのフラグメントを書き込みます。
(TBR)

 my $rv = Net::SSLeay::write_partial($ssl, $from, $count, $data);
 # $ssl - value corresponding to openssl's SSL structure
 # $from - (integer) offset from the beginning of $data
 # $count - (integer) length of data to be written
 # $data - data buffer
 #
 # returns: >0 - (success) number of bytes actually written to the TLS/SSL connection
 #           0 - write not successful, probably the underlying connection was closed
 #          <0 - error

=item * set_tlsext_host_name

=begin original

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before; requires at least openssl-0.9.8f

=end original

B<COMPATIBILITY:>Net-SSLeay-1.45以前では使用できません。
少なくともopenssl-0.9.8fが必要です。
(TBR)

=begin original

Sets TLS servername extension on SLL object $ssl to value $name.

=end original

SLLオブジェクト$sslのTLSサーバ名拡張を値$nameに設定します。
(TBR)

 my $rv = set_tlsext_host_name($ssl, $name);
 # $ssl - value corresponding to openssl's SSL structure
 # $name - (string) name to be set
 #
 # returns: 1 on success, 0 on failure

=back

=head3 Low level API: RAND_* related functions

=begin original

Check openssl doc related to RAND stuff L<http://www.openssl.org/docs/crypto/rand.html|http://www.openssl.org/docs/crypto/rand.html>

=end original

RAND関連のopenssl docをチェックしてください。
<http://www.openssl.org/docs/crypto/rand.html|http://www.openssl.org/docs/crypto/rand.html>
(TBR)

=over

=item * RAND_add

=begin original

Mixes the $num bytes at $buf into the PRNG state.

=end original

$bufの$numバイトをPRNG状態に混合します。
(TBR)

 Net::SSLeay::RAND_add($buf, $num, $entropy);
 # $buf - buffer with data to be mixed into the PRNG state
 # $num - number of bytes in $buf
 # $entropy - estimate of how much randomness is contained in $buf (in bytes)
 #
 # returns: no return value

=begin original

Check openssl doc L<http://www.openssl.org/docs/crypto/RAND_add.html|http://www.openssl.org/docs/crypto/RAND_add.html>

=end original

openssl doc L<http://www.openssl.org/docs/crypto/RAND_add.html|http://www.openssl.org/docs/crypto/RAND_add.html>を確認します。
(TBR)

=item * RAND_seed

=begin original

Equivalent to L</RAND_add> when $num == $entropy.

=end original

$num==$entropyのときはL</RAND_add>と同じです。
(TBR)

 Net::SSLeay::RAND_seed($buf);   # Perlishly figures out buf size
 # $buf - buffer with data to be mixed into the PRNG state
 # $num - number of bytes in $buf
 #
 # returns: no return value

=begin original

Check openssl doc L<http://www.openssl.org/docs/crypto/RAND_add.html|http://www.openssl.org/docs/crypto/RAND_add.html>

=end original

openssl doc L<http://www.openssl.org/docs/crypto/RAND_add.html|http://www.openssl.org/docs/crypto/RAND_add.html>を確認します。
(TBR)

=item * RAND_status

=begin original

Gives PRNG status (seeded enough or not).

=end original

PRNGステータス(十分にシードされているかどうか)を示します。
(TBR)

 my $rv = Net::SSLeay::RAND_status();
 #returns: 1 if the PRNG has been seeded with enough data, 0 otherwise

=begin original

Check openssl doc L<http://www.openssl.org/docs/crypto/RAND_add.html|http://www.openssl.org/docs/crypto/RAND_add.html>

=end original

openssl doc L<http://www.openssl.org/docs/crypto/RAND_add.html|http://www.openssl.org/docs/crypto/RAND_add.html>を確認します。
(TBR)

=item * RAND_bytes

=begin original

Puts $num cryptographically strong pseudo-random bytes into $buf.

=end original

暗号的に強力な擬似ランダムバイト$numを$bufに格納します。
(TBR)

 my $rv = Net::SSLeay::RAND_bytes($buf, $num);
 # $buf - buffer where the random data will be stored
 # $num - the size (in bytes) of requested random data
 #
 # returns: 1 on success, 0 otherwise

=begin original

Check openssl doc L<http://www.openssl.org/docs/crypto/RAND_bytes.html|http://www.openssl.org/docs/crypto/RAND_bytes.html>

=end original

openssl doc L<http://www.openssl.org/docs/crypto/RAND_bytes.html|http://www.openssl.org/docs/crypto/RAND_bytes.html>を確認します。
(TBR)

=item * RAND_pseudo_bytes

=begin original

Puts $num pseudo-random (not necessarily unpredictable) bytes into $buf.

=end original

$numの疑似乱数(必ずしも予測不能ではない)バイトを$bufに格納します。
(TBR)

 my $rv = Net::SSLeay::RAND_pseudo_bytes($buf, $num);
 # $buf - buffer where the random data will be stored
 # $num - the size (in bytes) of requested random data
 #
 # returns: 1 if the bytes generated are cryptographically strong, 0 otherwise

=begin original

Check openssl doc L<http://www.openssl.org/docs/crypto/RAND_bytes.html|http://www.openssl.org/docs/crypto/RAND_bytes.html>

=end original

openssl doc L<http://www.openssl.org/docs/crypto/RAND_bytes.html|http://www.openssl.org/docs/crypto/RAND_bytes.html>を確認します。
(TBR)

=item * RAND_cleanup

=begin original

Erase the PRNG state.

=end original

PRNG状態を消去します。
(TBR)

 Net::SSLeay::RAND_cleanup();
 # no args, no return value

=begin original

Check openssl doc L<http://www.openssl.org/docs/crypto/RAND_cleanup.html|http://www.openssl.org/docs/crypto/RAND_cleanup.html>

=end original

openssl doc L<http://www.openssl.org/docs/crypto/RAND_cleanup.html|http://www.openssl.org/docs/crypto/RAND_cleanup.html>を確認します。
(TBR)

=item * RAND_egd

=begin original

Queries the entropy gathering daemon EGD on socket $path for 255 bytes.

=end original

エントロピー収集デーモンEGDにsocket$pathで255バイトを問い合わせます。
(TBR)

 my $rv = Net::SSLeay::RAND_egd($path);
 # $path - path to a socket of entropy gathering daemon EGD
 #
 # returns: the number of bytes read from the daemon on success, and -1 on failure

=begin original

Check openssl doc L<http://www.openssl.org/docs/crypto/RAND_egd.html|http://www.openssl.org/docs/crypto/RAND_egd.html>

=end original

openssl doc L<http://www.openssl.org/docs/crypto/RAND_egd.html|http://www.openssl.org/docs/crypto/RAND_egd.html>を確認します。
(TBR)

=item * RAND_egd_bytes

=begin original

Queries the entropy gathering daemon EGD on socket $path for $bytes bytes.

=end original

ソケット$path上のエントロピー収集デーモンEGDに$bytesバイトを問い合わせる。
(TBR)

 my $rv = Net::SSLeay::RAND_egd_bytes($path, $bytes);
 # $path - path to a socket of entropy gathering daemon EGD
 # $bytes - number of bytes we want from EGD
 #
 # returns: the number of bytes read from the daemon on success, and -1 on failure

=begin original

Check openssl doc L<http://www.openssl.org/docs/crypto/RAND_egd.html|http://www.openssl.org/docs/crypto/RAND_egd.html>

=end original

openssl doc L<http://www.openssl.org/docs/crypto/RAND_egd.html|http://www.openssl.org/docs/crypto/RAND_egd.html>を確認します。
(TBR)

=item * RAND_file_name

=begin original

Generates a default path for the random seed file.

=end original

ランダムシードファイルの既定のパスを生成します。
(TBR)

 my $file = Net::SSLeay::RAND_file_name($num);
 # $num - maximum size of returned file name
 #
 # returns: string with file name on success, '' (empty string) on failure

=begin original

Check openssl doc L<http://www.openssl.org/docs/crypto/RAND_load_file.html|http://www.openssl.org/docs/crypto/RAND_load_file.html>

=end original

openssl doc L<http://www.openssl.org/docs/crypto/RAND_load_file.html|http://www.openssl.org/docs/crypto/RAND_load_file.html>を確認します。
(TBR)

=item * RAND_load_file

=begin original

Reads $max_bytes of bytes from $file_name and adds them to the PRNG.

=end original

$file_nameから$max_bytesのバイトを読み取り、PRNGに追加します。
(TBR)

 my $rv = Net::SSLeay::RAND_load_file($file_name, $max_bytes);
 # $file_name - the name of file
 # $max_bytes - bytes to read from $file_name; -1 => the complete file is read
 #
 # returns: the number of bytes read

=begin original

Check openssl doc L<http://www.openssl.org/docs/crypto/RAND_load_file.html|http://www.openssl.org/docs/crypto/RAND_load_file.html>

=end original

openssl doc L<http://www.openssl.org/docs/crypto/RAND_load_file.html|http://www.openssl.org/docs/crypto/RAND_load_file.html>を確認します。
(TBR)

=item * RAND_write_file

=begin original

Writes 1024 random bytes to $file_name which can be used to initialize the PRNG by calling L</RAND_load_file> in a later session.

=end original

後のセッションでL</RAND_load_file>を呼び出してPRNGを初期化するために使用できる1024のランダムバイトを$file_nameに書き込みます。
(TBR)

 my $rv = Net::SSLeay::RAND_write_file($file_name);
 # $file_name - the name of file
 #
 # returns: the number of bytes written, and -1 if the bytes written were generated without appropriate seed

=begin original

Check openssl doc L<http://www.openssl.org/docs/crypto/RAND_load_file.html|http://www.openssl.org/docs/crypto/RAND_load_file.html>

=end original

openssl doc L<http://www.openssl.org/docs/crypto/RAND_load_file.html|http://www.openssl.org/docs/crypto/RAND_load_file.html>を確認します。
(TBR)

=item * RAND_poll

=begin original

Collects some entropy from operating system and adds it to the PRNG.

=end original

オペレーティングシステムからエントロピーを収集し、それをPRNGに追加します。
(TBR)

 my $rv = Net::SSLeay::RAND_poll();
 # returns: 1 on success, 0 on failure (unable to gather reasonable entropy)

=back

=head3 Low level API: OBJ_* related functions

=over

=item * OBJ_cmp

=begin original

Compares ASN1_OBJECT $a to ASN1_OBJECT $b.

=end original

ASN1_OBJECT$aをASN1_OBJECT$bと比較します。
(TBR)

 my $rv = Net::SSLeay::OBJ_cmp($a, $b);
 # $a - value corresponding to openssl's ASN1_OBJECT structure
 # $b - value corresponding to openssl's ASN1_OBJECT structure
 #
 # returns: if the two are identical 0 is returned

=begin original

Check openssl doc L<http://www.openssl.org/docs/crypto/OBJ_nid2obj.html|http://www.openssl.org/docs/crypto/OBJ_nid2obj.html>

=end original

openssl doc L<http://www.openssl.org/docs/crypto/OBJ_nid2obj.html|http://www.openssl.org/docs/crypto/OBJ_nid2obj.html>を確認します。
(TBR)

=item * OBJ_dup

=begin original

Returns a copy/duplicate of $o.

=end original

$oのコピー/複製を返します。
(TBR)

 my $rv = Net::SSLeay::OBJ_dup($o);
 # $o - value corresponding to openssl's ASN1_OBJECT structure
 #
 # returns: value corresponding to openssl's ASN1_OBJECT structure (0 on failure)

=begin original

Check openssl doc L<http://www.openssl.org/docs/crypto/OBJ_nid2obj.html|http://www.openssl.org/docs/crypto/OBJ_nid2obj.html>

=end original

openssl doc L<http://www.openssl.org/docs/crypto/OBJ_nid2obj.html|http://www.openssl.org/docs/crypto/OBJ_nid2obj.html>を確認します。
(TBR)

=item * OBJ_nid2ln

=begin original

Returns long name for given NID $n.

=end original

指定されたNID$nのロングネームを返します。
(TBR)

 my $rv = Net::SSLeay::OBJ_nid2ln($n);
 # $n - (integer) NID
 #
 # returns: (string) long name e.g. 'commonName'

=begin original

Check openssl doc L<http://www.openssl.org/docs/crypto/OBJ_nid2obj.html|http://www.openssl.org/docs/crypto/OBJ_nid2obj.html>

=end original

openssl doc L<http://www.openssl.org/docs/crypto/OBJ_nid2obj.html|http://www.openssl.org/docs/crypto/OBJ_nid2obj.html>を確認します。
(TBR)

=item * OBJ_ln2nid

=begin original

Returns NID corresponding to given long name $n.

=end original

指定されたロングネーム$nに対応するNIDを返します。
(TBR)

 my $rv = Net::SSLeay::OBJ_ln2nid($s);
 # $s - (string) long name e.g. 'commonName'
 #
 # returns: (integer) NID

=item * OBJ_nid2sn

=begin original

Returns short name for given NID $n.

=end original

指定されたNID$nの短い名前を返します。
(TBR)

 my $rv = Net::SSLeay::OBJ_nid2sn($n);
 # $n - (integer) NID
 #
 # returns: (string) short name e.g. 'CN'

=begin original

Example:

=end original

例:
(TBR)

 print Net::SSLeay::OBJ_nid2sn(&Net::SSLeay::NID_commonName);

=item * OBJ_sn2nid

=begin original

Returns NID corresponding to given short name $s.

=end original

指定されたショート名$sに対応するNIDを返します。
(TBR)

 my $rv = Net::SSLeay::OBJ_sn2nid($s);
 # $s - (string) short name e.g. 'CN'
 #
 # returns: (integer) NID

=begin original

Example:

=end original

例:
(TBR)

 print "NID_commonName constant=", &Net::SSLeay::NID_commonName;
 print "OBJ_sn2nid('CN')=", Net::SSLeay::OBJ_sn2nid('CN');

=item * OBJ_nid2obj

=begin original

Returns ASN1_OBJECT for given NID $n.

=end original

指定されたNID$nのASN1_OBJECTを返します。
(TBR)

 my $rv = Net::SSLeay::OBJ_nid2obj($n);
 # $n - (integer) NID
 #
 # returns: value corresponding to openssl's ASN1_OBJECT structure (0 on failure)

=begin original

Check openssl doc L<http://www.openssl.org/docs/crypto/OBJ_nid2obj.html|http://www.openssl.org/docs/crypto/OBJ_nid2obj.html>

=end original

openssl doc L<http://www.openssl.org/docs/crypto/OBJ_nid2obj.html|http://www.openssl.org/docs/crypto/OBJ_nid2obj.html>を確認します。
(TBR)

=item * OBJ_obj2nid

=begin original

Returns NID corresponding to given ASN1_OBJECT $o.

=end original

指定されたASN1_OBJECT$oに対応するNIDを返します。
(TBR)

 my $rv = Net::SSLeay::OBJ_obj2nid($o);
 # $o - value corresponding to openssl's ASN1_OBJECT structure
 #
 # returns: (integer) NID

=begin original

Check openssl doc L<http://www.openssl.org/docs/crypto/OBJ_nid2obj.html|http://www.openssl.org/docs/crypto/OBJ_nid2obj.html>

=end original

openssl doc L<http://www.openssl.org/docs/crypto/OBJ_nid2obj.html|http://www.openssl.org/docs/crypto/OBJ_nid2obj.html>を確認します。
(TBR)

=item * OBJ_txt2obj

=begin original

Converts the text string s into an ASN1_OBJECT structure. If $no_name is 0 then
long names (e.g. 'commonName') and short names (e.g. 'CN') will be interpreted
as well as numerical forms (e.g. '2.5.4.3'). If $no_name is 1 only the numerical
form is acceptable.

=end original

テキスト文字列sをASN1_OBJECT構造体に変換します。
$no_nameが0の場合、長い名前(例:'commonName')と短い名前(例:'CN')が数値形式(例:'2.5.4.3')と同様に解釈されます。
$no_nameが1の場合、数値形式のみが受け入れられます。
(TBR)

 my $rv = Net::SSLeay::OBJ_txt2obj($s, $no_name);
 # $s - text string to be converted
 # $no_name - (integer) 0 or 1
 #
 # returns: value corresponding to openssl's ASN1_OBJECT structure (0 on failure)

=begin original

Check openssl doc L<http://www.openssl.org/docs/crypto/OBJ_nid2obj.html|http://www.openssl.org/docs/crypto/OBJ_nid2obj.html>

=end original

openssl doc L<http://www.openssl.org/docs/crypto/OBJ_nid2obj.html|http://www.openssl.org/docs/crypto/OBJ_nid2obj.html>を確認します。
(TBR)

=item * OBJ_obj2txt

=begin original

Converts the ASN1_OBJECT a into a textual representation.

=end original

ASN1_OBJECTをテキスト表現に変換します。
(TBR)

 Net::SSLeay::OBJ_obj2txt($a, $no_name);
 # $a - value corresponding to openssl's ASN1_OBJECT structure
 # $no_name - (integer) 0 or 1
 #
 # returns: textual representation e.g. 'commonName' ($no_name=0), '2.5.4.3' ($no_name=1)

=begin original

Check openssl doc L<http://www.openssl.org/docs/crypto/OBJ_nid2obj.html|http://www.openssl.org/docs/crypto/OBJ_nid2obj.html>

=end original

openssl doc L<http://www.openssl.org/docs/crypto/OBJ_nid2obj.html|http://www.openssl.org/docs/crypto/OBJ_nid2obj.html>を確認します。
(TBR)

=item * OBJ_txt2nid

=begin original

Returns NID corresponding to text string $s which can be a long name, a short name or the numerical respresentation of an object.

=end original

文字列$sに対応するNIDを返します。
この文字列には、ロングネーム、ショートネーム、またはオブジェクトの数値表現を指定できます。
(TBR)

 my $rv = Net::SSLeay::OBJ_txt2nid($s);
 # $s - (string) e.g. 'commonName' or 'CN' or '2.5.4.3'
 #
 # returns: (integer) NID

=begin original

Example:

=end original

例:
(TBR)

 my $nid = Net::SSLeay::OBJ_txt2nid('2.5.4.3');
 Net::SSLeay::OBJ_nid2sn($n);

=begin original

Check openssl doc L<http://www.openssl.org/docs/crypto/OBJ_nid2obj.html|http://www.openssl.org/docs/crypto/OBJ_nid2obj.html>

=end original

openssl doc L<http://www.openssl.org/docs/crypto/OBJ_nid2obj.html|http://www.openssl.org/docs/crypto/OBJ_nid2obj.html>を確認します。
(TBR)

=back

=head3 Low level API: ASN1_INTEGER_* related functions

=over

=item * ASN1_INTEGER_new

=begin original

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before

=end original

B<COMPATIBILITY:>は、Net-SSLeay-1.45以前では使用できません。
(TBR)

=begin original

Creates a new ASN1_INTEGER structure.

=end original

新しいASN1_INTEGER構造体を作成します。
(TBR)

 my $rv = Net::SSLeay::ASN1_INTEGER_new();
 #
 # returns: value corresponding to openssl's ASN1_INTEGER structure (0 on failure)

=item * ASN1_INTEGER_free

=begin original

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before

=end original

B<COMPATIBILITY:>は、Net-SSLeay-1.45以前では使用できません。
(TBR)

=begin original

Free an allocated ASN1_INTEGER structure.

=end original

割り当てられたASN1_INTEGER構造体を解放します。
(TBR)

 Net::SSLeay::ASN1_INTEGER_free($i);
 # $i - value corresponding to openssl's ASN1_INTEGER structure
 #
 # returns: no return value

=item * ASN1_INTEGER_get

=begin original

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before

=end original

B<COMPATIBILITY:>は、Net-SSLeay-1.45以前では使用できません。
(TBR)

=begin original

Returns integer value of given ASN1_INTEGER object.

=end original

指定されたASN1_INTEGERオブジェクトの整数値を戻します。
(TBR)

=begin original

B<BEWARE:> If the value stored in ASN1_INTEGER is greater than max. integer that can be stored
in 'long' type (usually 32bit but may vary according to platform) then this function will return -1.
For getting large ASN1_INTEGER values consider using L</P_ASN1_INTEGER_get_dec> or L</P_ASN1_INTEGER_get_hex>.

=end original

B<注意:>ASN1_INTEGERに格納されている値が、「long」型に格納できる最大整数(通常は32ビットですが、プラットフォームによって異なる場合があります)より大きい場合、この関数は-1を返します。
大きなASN1_INTEGER値を取得するには、L</P_ASN1_INTEGER_get_dec>またはL</P_ASN1_INTEGER_get_hex>の使用を検討してください。
(TBR)

 my $rv = Net::SSLeay::ASN1_INTEGER_get($a);
 # $a - value corresponding to openssl's ASN1_INTEGER structure
 #
 # returns: integer value of ASN1_INTEGER object in $a

=item * ASN1_INTEGER_set

=begin original

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before

=end original

B<COMPATIBILITY:>は、Net-SSLeay-1.45以前では使用できません。
(TBR)

=begin original

Sets value of given ASN1_INTEGER object to value $val

=end original

指定されたASN1_INTEGERオブジェクトの値をvalue$valに設定します。
(TBR)

=begin original

B<BEWARE:> $val has max. limit (= max. integer that can be stored in 'long' type).
For setting large ASN1_INTEGER values consider using L</P_ASN1_INTEGER_set_dec> or L</P_ASN1_INTEGER_set_hex>.

=end original

B<BEWARE:>$valにはmax. limit(='long'型に格納できる最大の整数)があります。
大きなASN1_INTEGER値を設定するには、L</P_ASN1_INTEGER_set_dec>またはL</P_ASN1_INTEGER_set_hex>の使用を検討してください。
(TBR)

 my $rv = Net::SSLeay::ASN1_INTEGER_set($i, $val);
 # $i - value corresponding to openssl's ASN1_INTEGER structure
 # $val - integer value
 #
 # returns: 1 on success, 0 on failure

=item * P_ASN1_INTEGER_get_dec

=begin original

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before

=end original

B<COMPATIBILITY:>は、Net-SSLeay-1.45以前では使用できません。
(TBR)

=begin original

Returns string with decimal representation of integer value of given ASN1_INTEGER object.

=end original

指定されたASN1_INTEGERオブジェクトの整数値を10進表記した文字列を返します。
(TBR)

 Net::SSLeay::P_ASN1_INTEGER_get_dec($i);
 # $i - value corresponding to openssl's ASN1_INTEGER structure
 #
 # returns: string with decimal representation

=item * P_ASN1_INTEGER_get_hex

=begin original

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before

=end original

B<COMPATIBILITY:>は、Net-SSLeay-1.45以前では使用できません。
(TBR)

=begin original

Returns string with hexadecimal representation of integer value of given ASN1_INTEGER object.

=end original

指定されたASN1_INTEGERオブジェクトの整数値を16進数で表した文字列を返します。
(TBR)

 Net::SSLeay::P_ASN1_INTEGER_get_hex($i);
 # $i - value corresponding to openssl's ASN1_INTEGER structure
 #
 # returns: string with hexadecimal representation

=item * P_ASN1_INTEGER_set_dec

=begin original

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before

=end original

B<COMPATIBILITY:>は、Net-SSLeay-1.45以前では使用できません。
(TBR)

=begin original

Sets value of given ASN1_INTEGER object to value $val (decimal string, suitable for large integers)

=end original

指定されたASN1_INTEGERオブジェクトの値をvalue$val(大きな整数に適した10進文字列)に設定します。
(TBR)

 Net::SSLeay::P_ASN1_INTEGER_set_dec($i, $str);
 # $i - value corresponding to openssl's ASN1_INTEGER structure
 # $str - string with decimal representation
 #
 # returns: 1 on success, 0 on failure

=item * P_ASN1_INTEGER_set_hex

=begin original

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before

=end original

B<COMPATIBILITY:>は、Net-SSLeay-1.45以前では使用できません。
(TBR)

=begin original

Sets value of given ASN1_INTEGER object to value $val (hexadecimal string, suitable for large integers)

=end original

指定されたASN1_INTEGERオブジェクトの値をvalue$val(大きな整数に適した16進文字列)に設定します。
(TBR)

 Net::SSLeay::P_ASN1_INTEGER_set_hex($i, $str);
 # $i - value corresponding to openssl's ASN1_INTEGER structure
 # $str - string with hexadecimal representation
 #
 # returns: 1 on success, 0 on failure

=back

=head3 Low level API: ASN1_STRING_* related functions

=over

=item * P_ASN1_STRING_get

=begin original

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before

=end original

B<COMPATIBILITY:>は、Net-SSLeay-1.45以前では使用できません。
(TBR)

=begin original

Returns string value of given ASN1_STRING object.

=end original

指定されたASN1_STRINGオブジェクトのストリング値を戻します。
(TBR)

 Net::SSLeay::P_ASN1_STRING_get($s, $utf8_decode);
 # $s - value corresponding to openssl's ASN1_STRING structure
 # $utf8_decode - [optional] 0 or 1 whether the returned value should be utf8 decoded (default=0)
 #
 # returns: string

 $string = Net::SSLeay::P_ASN1_STRING_get($s);
 #is the same as:
 $string = Net::SSLeay::P_ASN1_STRING_get($s, 0);

=back

=head3 Low level API: ASN1_TIME_* related functions

=over

=item * ASN1_TIME_new

=begin original

B<COMPATIBILITY:> not available in Net-SSLeay-1.42 and before

=end original

B<COMPATIBILITY:>は、Net-SSLeay-1.42以前では使用できません。
(TBR)

 my $time = ASN1_TIME_new();
 # returns: value corresponding to openssl's ASN1_TIME structure

=item * ASN1_TIME_free

=begin original

B<COMPATIBILITY:> not available in Net-SSLeay-1.42 and before

=end original

B<COMPATIBILITY:>は、Net-SSLeay-1.42以前では使用できません。
(TBR)

 ASN1_TIME_free($time);
 # $time - value corresponding to openssl's ASN1_TIME structure

=item * ASN1_TIME_set

=begin original

B<COMPATIBILITY:> not available in Net-SSLeay-1.42 and before

=end original

B<COMPATIBILITY:>は、Net-SSLeay-1.42以前では使用できません。
(TBR)

 ASN1_TIME_set($time, $t);
 # $time - value corresponding to openssl's ASN1_TIME structure
 # $t - time value in seconds since 1.1.1970

=begin original

B<BEWARE:> It is platform dependent how this function will handle dates after 2038.
Although perl's integer is large enough the internal implementation of this function
is dependent on the size of time_t structure (32bit time_t has problem with 2038).

=end original

B<注意:>この関数が2038より後の日付を処理する方法はプラットフォームに依存します。
perlの整数は十分に大きいですが、この関数の内部実装はtime_t構造体のサイズに依存します(32ビットのtime_tは2038では問題があります)。
(TBR)

=begin original

If you want to safely set date and time after 2038 use function L</P_ASN1_TIME_set_isotime>.

=end original

2038より後の日付と時刻を安全に設定するには、関数L</P_ASN1_TIME_set_isotime>を使用します。
(TBR)

=item * P_ASN1_TIME_get_isotime

=begin original

B<COMPATIBILITY:> not available in Net-SSLeay-1.42 and before; requires at least openssl-0.9.7e

=end original

B<COMPATIBILITY:>Net-SSLeay-1.42以前では使用できません。
少なくともopenssl-0.9.7eが必要です。
(TBR)

=begin original

B<NOTE:> Does not exactly correspond to any low level API function

=end original

B<注意:>下位レベルのAPI関数には正確に対応していません
(TBR)

=begin original

Gives ISO-8601 string representation of ASN1_TIME structure.

=end original

ASN1_TIME構造体のISO-8601文字列表現を指定します。
(TBR)

 my $datetime_string = P_ASN1_TIME_get_isotime($time);
 # $time - value corresponding to openssl's ASN1_TIME structure
 #
 # returns: datetime string like '2033-05-16T20:39:37Z' or '' on failure

=begin original

The output format is compatible with module L<DateTime::Format::RFC3339>

=end original

出力形式は、モジュールL<DateTime::Format::RFC3339>と互換性があります。
(TBR)

=item * P_ASN1_TIME_set_isotime

=begin original

B<COMPATIBILITY:> not available in Net-SSLeay-1.42 and before; requires at least openssl-0.9.7e

=end original

B<COMPATIBILITY:>Net-SSLeay-1.42以前では使用できません。
少なくともopenssl-0.9.7eが必要です。
(TBR)

=begin original

B<NOTE:> Does not exactly correspond to any low level API function

=end original

B<注意:>下位レベルのAPI関数には正確に対応していません
(TBR)

=begin original

Sets time and date value of ANS1_time structure.

=end original

ANS1_time構造体の時刻と日付の値を設定します。
(TBR)

 my $rv = P_ASN1_TIME_set_isotime($time, $string);
 # $time - value corresponding to openssl's ASN1_TIME structure
 # $string - ISO-8601 timedate string like '2033-05-16T20:39:37Z'
 #
 # returns: 1 on success, 0 on failure

=begin original

The C<$string> parameter has to be in full form like C<"2012-03-22T23:55:33"> or
C<"2012-03-22T23:55:33Z"> or C<"2012-03-22T23:55:33CET">. Short forms like
C<"2012-03-22T23:55"> or C<"2012-03-22"> are not supported.

=end original

C<$string>パラメータは、C<"2012-03-22T23:55:33">またはC<"2012-03-22T23:55:33Z">またはC<"2012-03-22T23:55:33CET">のような完全な形式である必要があります。
C<"2012-03-22T23:55">またはC<"2012-03-22">のような短い形式はサポートされていません。
(TBR)

=item * P_ASN1_TIME_put2string

=begin original

B<COMPATIBILITY:> not available in Net-SSLeay-1.42 and before, has bugs with openssl-0.9.8i

=end original

B<COMPATIBILITY:>はNet-SSLeay-1.42以前では使用できません。
openssl-0.9.8iにはバグがあります。
(TBR)

=begin original

B<NOTE:> Does not exactly correspond to any low level API function

=end original

B<注意:>下位レベルのAPI関数には正確に対応していません
(TBR)

=begin original

Gives string representation of ASN1_TIME structure.

=end original

ASN1_TIME構造体の文字列表現を指定します。
(TBR)

 my $str = P_ASN1_TIME_put2string($time);
 # $time - value corresponding to openssl's ASN1_TIME structure
 #
 # returns: datetime string like 'May 16 20:39:37 2033 GMT'

=item * P_ASN1_UTCTIME_put2string

=begin original

B<NOTE:> deprecated function, only for backward compatibility, just an alias
for L</P_ASN1_TIME_put2string>

=end original

B<注意:>推奨されない関数、下位互換性のためにのみ、L</P_ASN1_TIME_put2string>の別名
(TBR)

=back

=head3 Low level API: X509_* related functions

=over

=item * X509_new

=begin original

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before

=end original

B<COMPATIBILITY:>は、Net-SSLeay-1.45以前では使用できません。
(TBR)

=begin original

Allocates and initializes a X509 structure.

=end original

X509構造体を割り当てて初期化します。
(TBR)

 my $rv = Net::SSLeay::X509_new();
 #
 # returns: value corresponding to openssl's X509 structure (0 on failure)

=begin original

Check openssl doc L<http://www.openssl.org/docs/crypto/X509_new.html|http://www.openssl.org/docs/crypto/X509_new.html>

=end original

openssl doc L<http://www.openssl.org/docs/crypto/X509_new.html|http://www.openssl.org/docs/crypto/X509_new.html>を確認します。
(TBR)

=item * X509_free

=begin original

Frees up the X509 structure.

=end original

X509構造体を解放します。
(TBR)

 Net::SSLeay::X509_free($a);
 # $a - value corresponding to openssl's X509 structure
 #
 # returns: no return value

=begin original

Check openssl doc L<http://www.openssl.org/docs/crypto/X509_new.html|http://www.openssl.org/docs/crypto/X509_new.html>

=end original

openssl doc L<http://www.openssl.org/docs/crypto/X509_new.html|http://www.openssl.org/docs/crypto/X509_new.html>を確認します。
(TBR)

=item * X509_certificate_type

=begin original

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before

=end original

B<COMPATIBILITY:>は、Net-SSLeay-1.45以前では使用できません。
(TBR)

=begin original

Returns bitmask with type of certificate $x.

=end original

証明書の種類が$xのビットマスクを返します。
(TBR)

 my $rv = Net::SSLeay::X509_certificate_type($x);
 # $x - value corresponding to openssl's X509 structure
 #
 # returns: (integer) bitmask with certificate type

 #to decode bitmask returned by this function use these constants:
 &Net::SSLeay::EVP_PKS_DSA
 &Net::SSLeay::EVP_PKS_EC
 &Net::SSLeay::EVP_PKS_RSA
 &Net::SSLeay::EVP_PKT_ENC
 &Net::SSLeay::EVP_PKT_EXCH
 &Net::SSLeay::EVP_PKT_EXP
 &Net::SSLeay::EVP_PKT_SIGN
 &Net::SSLeay::EVP_PK_DH
 &Net::SSLeay::EVP_PK_DSA
 &Net::SSLeay::EVP_PK_EC
 &Net::SSLeay::EVP_PK_RSA

=item * X509_digest

=begin original

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before

=end original

B<COMPATIBILITY:>は、Net-SSLeay-1.45以前では使用できません。
(TBR)

=begin original

Computes digest/fingerprint of X509 $data using $type hash function.

=end original

$typeハッシュ関数を使用して、X509$データのダイジェスト/フィンガープリントを計算します。
(TBR)

 my $digest_value = Net::SSLeay::X509_digest($data, $type);
 # $data - value corresponding to openssl's X509 structure
 # $type - value corresponding to openssl's EVP_MD structure - e.g. got via EVP_get_digestbyname()
 #
 # returns: hash value (binary)

 #to get printable (hex) value of digest use:
 print unpack('H*', $digest_value);

=item * X509_issuer_and_serial_hash

=begin original

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before

=end original

B<COMPATIBILITY:>は、Net-SSLeay-1.45以前では使用できません。
(TBR)

=begin original

Sort of a checksum of issuer name and serial number of X509 certificate $x.
The result is not a full hash (e.g. sha-1), it is kind-of-a-hash truncated to the size of 'unsigned long' (32 bits).
The resulting value might differ accross different openssl versions for the same X509 certificate.

=end original

X509証明書$xの発行者名とシリアル番号のチェックサムのようなものです。
結果は完全なハッシュ(例:sha-1)ではなく、「unsigned long」(32ビット)のサイズに切り捨てられた一種のハッシュです。
結果の値は、同じX509証明書に対して異なるopensslバージョン間で異なる場合があります。
(TBR)

 my $rv = Net::SSLeay::X509_issuer_and_serial_hash($x);
 # $x - value corresponding to openssl's X509 structure
 #
 # returns: number representing checksum

=item * X509_issuer_name_hash

=begin original

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before

=end original

B<COMPATIBILITY:>は、Net-SSLeay-1.45以前では使用できません。
(TBR)

=begin original

Sort of a checksum of issuer name of X509 certificate $x.
The result is not a full hash (e.g. sha-1), it is kind-of-a-hash truncated to the size of 'unsigned long' (32 bits).
The resulting value might differ accross different openssl versions for the same X509 certificate.

=end original

X509証明書$xの発行者名のチェックサムのようなものです。
結果は完全なハッシュ(sha-1など)ではなく、「unsigned long」(32ビット)のサイズに切り捨てられたハッシュのようなものです。
結果の値は、同じX509証明書の異なるopensslバージョン間で異なる場合があります。
(TBR)

 my $rv = Net::SSLeay::X509_issuer_name_hash($x);
 # $x - value corresponding to openssl's X509 structure
 #
 # returns: number representing checksum

=item * X509_subject_name_hash

=begin original

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before

=end original

B<COMPATIBILITY:>は、Net-SSLeay-1.45以前では使用できません。
(TBR)

=begin original

Sort of a checksum of subject name of X509 certificate $x.
The result is not a full hash (e.g. sha-1), it is kind-of-a-hash truncated to the size of 'unsigned long' (32 bits).
The resulting value might differ accross different openssl versions for the same X509 certificate.

=end original

X509証明書$xのサブジェクト名のチェックサムのようなものです。
結果は完全なハッシュ(sha-1など)ではなく、「unsigned long」(32ビット)のサイズに切り捨てられた一種のハッシュです。
結果の値は、同じX509証明書に対して異なるopensslバージョン間で異なる場合があります。
(TBR)

 my $rv = Net::SSLeay::X509_subject_name_hash($x);
 # $x - value corresponding to openssl's X509 structure
 #
 # returns: number representing checksum

=item * X509_pubkey_digest

=begin original

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before; requires at least openssl-0.9.7

=end original

B<COMPATIBILITY:>Net-SSLeay-1.45以前では使用できません。
少なくともopenssl-0.9.7が必要です。
(TBR)

=begin original

Computes digest/fingerprint of public key from X509 certificate $data using $type hash function.

=end original

$typeハッシュ関数を使用して、X509証明書$dataから公開鍵のダイジェスト/フィンガープリントを計算します。
(TBR)

 my $digest_value = Net::SSLeay::X509_pubkey_digest($data, $type);
 # $data - value corresponding to openssl's X509 structure
 # $type - value corresponding to openssl's EVP_MD structure - e.g. got via EVP_get_digestbyname()
 #
 # returns: hash value (binary)

 #to get printable (hex) value of digest use:
 print unpack('H*', $digest_value);

=item * X509_set_issuer_name

=begin original

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before

=end original

B<COMPATIBILITY:>は、Net-SSLeay-1.45以前では使用できません。
(TBR)

=begin original

Sets issuer of X509 certificate $x to $name.

=end original

X509証明書$xの発行者を$nameに設定します。
(TBR)

 my $rv = Net::SSLeay::X509_set_issuer_name($x, $name);
 # $x - value corresponding to openssl's X509 structure
 # $name - value corresponding to openssl's X509_NAME structure
 #
 # returns: 1 on success, 0 on failure

=item * X509_set_pubkey

=begin original

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before

=end original

B<COMPATIBILITY:>は、Net-SSLeay-1.45以前では使用できません。
(TBR)

=begin original

Sets public key of X509 certificate $x to $pkey.

=end original

X509証明書$xの公開鍵を$pkeyに設定します。
(TBR)

 my $rv = Net::SSLeay::X509_set_pubkey($x, $pkey);
 # $x - value corresponding to openssl's X509 structure
 # $pkey - value corresponding to openssl's EVP_PKEY structure
 #
 # returns: 1 on success, 0 on failure

=item * X509_set_serialNumber

=begin original

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before

=end original

B<COMPATIBILITY:>は、Net-SSLeay-1.45以前では使用できません。
(TBR)

=begin original

Sets serial number of X509 certificate $x to $serial.

=end original

X509証明書$xのシリアル番号を$serialに設定します。
(TBR)

 my $rv = Net::SSLeay::X509_set_serialNumber($x, $serial);
 # $x - value corresponding to openssl's X509 structure
 # $serial - value corresponding to openssl's ASN1_INTEGER structure
 #
 # returns: 1 on success, 0 on failure

 #to create $serial value use one of these:
 $serial = Net::SSLeay::P_ASN1_INTEGER_set_hex('45ad6f');
 $serial = Net::SSLeay::P_ASN1_INTEGER_set_dec('7896541238529631478');
 $serial = Net::SSLeay::ASN1_INTEGER_set(45896);

=item * X509_set_subject_name

=begin original

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before

=end original

B<COMPATIBILITY:>は、Net-SSLeay-1.45以前では使用できません。
(TBR)

=begin original

Sets subject of X509 certificate $x to $name.

=end original

X509証明書$xのサブジェクトを$nameに設定します。
(TBR)

 my $rv = Net::SSLeay::X509_set_subject_name($x, $name);
 # $x - value corresponding to openssl's X509 structure
 # $name - value corresponding to openssl's X509_NAME structure
 #
 # returns: 1 on success, 0 on failure

=item * X509_set_version

=begin original

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before

=end original

B<COMPATIBILITY:>は、Net-SSLeay-1.45以前では使用できません。
(TBR)

=begin original

Set 'version' value for X509 certificate $ to $version.

=end original

X509証明書$の'バージョン'値を$versionに設定します。
(TBR)

 my $rv = Net::SSLeay::X509_set_version($x, $version);
 # $x - value corresponding to openssl's X509 structure
 # $version - (integer) version number
 #
 # returns: 1 on success, 0 on failure

=item * X509_sign

=begin original

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before

=end original

B<COMPATIBILITY:>は、Net-SSLeay-1.45以前では使用できません。
(TBR)

=begin original

Sign X509 certificate $x with private key $pkey (using digest algorithm $md).

=end original

秘密鍵$pkey(ダイジェストアルゴリズム$mdを使用)でX509証明書$xに署名します。
(TBR)

 my $rv = Net::SSLeay::X509_sign($x, $pkey, $md);
 # $x - value corresponding to openssl's X509 structure
 # $pkey - value corresponding to openssl's EVP_PKEY structure
 # $md - value corresponding to openssl's EVP_MD structure
 #
 # returns: 1 on success, 0 on failure

=item * X509_verify

=begin original

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before

=end original

B<COMPATIBILITY:>は、Net-SSLeay-1.45以前では使用できません。
(TBR)

=begin original

Verifies X509 object $a using public key $r (pubkey of issuing CA).

=end original

公開鍵$r(発行CAのpubkey)を使用して、X509オブジェクト$aを検証します。
(TBR)

 my $rv = Net::SSLeay::X509_verify($x, $r);
 # $x - value corresponding to openssl's X509 structure
 # $r - value corresponding to openssl's EVP_PKEY structure
 #
 # returns: 0 - verify failure, 1 - verify OK, <0 - error

=item * X509_get_ext_count

=begin original

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before

=end original

B<COMPATIBILITY:>は、Net-SSLeay-1.45以前では使用できません。
(TBR)

=begin original

Returns the total number of extensions in X509 object $x.

=end original

X509オブジェクト$xの拡張子の合計数を返します。
(TBR)

 my $rv = Net::SSLeay::X509_get_ext_count($x);
 # $x - value corresponding to openssl's X509 structure
 #
 # returns: count of extensions

=item * X509_get_pubkey

=begin original

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before

=end original

B<COMPATIBILITY:>は、Net-SSLeay-1.45以前では使用できません。
(TBR)

=begin original

Returns public key corresponding to given X509 object $x.

=end original

指定されたX509オブジェクト$xに対応する公開鍵を返します。
(TBR)

 my $rv = Net::SSLeay::X509_get_pubkey($x);
 # $x - value corresponding to openssl's X509 structure
 #
 # returns: value corresponding to openssl's EVP_PKEY structure (0 on failure)

=item * X509_get_serialNumber

=begin original

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before

=end original

B<COMPATIBILITY:>は、Net-SSLeay-1.45以前では使用できません。
(TBR)

=begin original

Returns serial number of X509 certificate $x.

=end original

X509証明書$xのシリアル番号を返します。
(TBR)

 my $rv = Net::SSLeay::X509_get_serialNumber($x);
 # $x - value corresponding to openssl's X509 structure
 #
 # returns: value corresponding to openssl's ASN1_INTEGER structure (0 on failure)

=begin original

See L</P_ASN1_INTEGER_get_dec>, L</P_ASN1_INTEGER_get_hex> or L</ASN1_INTEGER_get> to decode ASN1_INTEGER object.

=end original

ASN1_INTEGERオブジェクトをデコードするには、L</P_ASN1_INTEGER_get_dec>、L</P_ASN1_INTEGER_get_hex>、またはL</ASN1_INTEGER_get>を参照してください。
(TBR)

=item * X509_get_version

=begin original

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before

=end original

B<COMPATIBILITY:>は、Net-SSLeay-1.45以前では使用できません。
(TBR)

=begin original

Returns 'version' value of given X509 certificate $x.

=end original

指定されたX509証明書$xの'version'値を返します。
(TBR)

 my $rv = Net::SSLeay::X509_get_version($x);
 # $x - value corresponding to openssl's X509 structure
 #
 # returns: (integer) version

=item * X509_get_ext

=begin original

Returns X509_EXTENSION from $x509 based on given position/index.

=end original

指定された位置/インデックスに基づいて$X509からX509_EXTENSIONを返します。
(TBR)

 my $rv = Net::SSLeay::X509_get_ext($x509, $index);
 # $x509 - value corresponding to openssl's X509 structure
 # $index - (integer) position/index of extension within $x509
 #
 # returns: value corresponding to openssl's X509_EXTENSION structure (0 on failure)

=item * X509_get_ext_by_NID

=begin original

Returns X509_EXTENSION from $x509 based on given NID.

=end original

指定されたNIDに基づいて$X509からX509_EXTENSIONを返します。
(TBR)

 my $rv = Net::SSLeay::X509_get_ext_by_NID($x509, $nid, $loc);
 # $x509 - value corresponding to openssl's X509 structure
 # $nid - (integer) NID value
 # $loc - (integer) position to start lookup at
 #
 # returns: position/index of extension, negative value on error
 #          call Net::SSLeay::X509_get_ext($x509, $rv) to get the actual extension

=item * X509_get_fingerprint

=begin original

Returns fingerprint of certificate $cert.

=end original

証明書$certのフィンガープリントを返します。
(TBR)

=begin original

B<NOTE:> Does not exactly correspond to any low level API function. The implementation
is basen on openssl's C<X509_digest()>.

=end original

B<注意:>下位レベルのAPI関数に正確に対応していません。
実装はopensslのC<X509_digest()>に基づいています。
(TBR)

 Net::SSLeay::X509_get_fingerprint($x509, $type);
 # $x509 - value corresponding to openssl's X509 structure
 # $type - (string) digest type, currently supported values:
 #         "md5"
 #         "sha1"
 #         "sha256"
 #         "ripemd160"
 #
 # returns: certificate digest - hexadecimal string (NOT binary data!)

=item * X509_get_issuer_name

=begin original

Return an X509_NAME object representing the issuer of the certificate $cert.

=end original

証明書$certの発行元を表すX509_NAMEオブジェクトを返します。
(TBR)

 my $rv = Net::SSLeay::X509_get_issuer_name($cert);
 # $cert - value corresponding to openssl's X509 structure
 #
 # returns: value corresponding to openssl's X509_NAME structure (0 on failure)

=item * X509_get_notAfter

=begin original

Return an object giving the time after which the certificate $cert is not valid.

=end original

証明書$certが無効になるまでの時間を示すオブジェクトを返します。
(TBR)

 my $rv = Net::SSLeay::X509_get_notAfter($cert);
 # $cert - value corresponding to openssl's X509 structure
 #
 # returns: value corresponding to openssl's ASN1_TIME structure (0 on failure)

=begin original

To get human readable/printable form the return value you can use:

=end original

人間が読める/印刷可能な形式の戻り値を取得するには、次のようにします。
(TBR)

 my $time = Net::SSLeay::X509_get_notAfter($cert);
 print "notAfter=", Net::SSLeay::P_ASN1_TIME_get_isotime($time), "\n";

=item * X509_get_notBefore

=begin original

Return an object giving the time before which the certificate $cert is not valid

=end original

証明書$certが無効になるまでの時間を示すオブジェクトを返します。
(TBR)

 my $rv = Net::SSLeay::X509_get_notBefore($cert);
 # $cert - value corresponding to openssl's X509 structure
 #
 # returns: value corresponding to openssl's ASN1_TIME structure (0 on failure)

=begin original

To get human readable/printable form the return value you can use:

=end original

人間が読める/印刷可能な形式の戻り値を取得するには、次のようにします。
(TBR)

 my $time = Net::SSLeay::X509_get_notBefore($cert);
 print "notBefore=", Net::SSLeay::P_ASN1_TIME_get_isotime($time), "\n";

=item * X509_get_subjectAltNames

=begin original

B<NOTE:> Does not exactly correspond to any low level API function.

=end original

B<注意:>下位レベルのAPI関数に正確に対応していません。
(TBR)

=begin original

Returns the list of alternative subject names from X509 certificate $cert.

=end original

X509 certificate$certから代替サブジェクト名のリストを返します。
(TBR)

 my @rv = Net::SSLeay::X509_get_subjectAltNames($cert);
 # $cert - value corresponding to openssl's X509 structure
 #
 # returns: list containing pairs - name_type (integer), name_value (string)
 #          where name_type can be:
 #          0 - GEN_OTHERNAME
 #          1 - GEN_EMAIL
 #          2 - GEN_DNS
 #          3 - GEN_X400
 #          4 - GEN_DIRNAME
 #          5 - GEN_EDIPARTY
 #          6 - GEN_URI
 #          7 - GEN_IPADD
 #          8 - GEN_RID

=item * X509_get_subject_name

=begin original

Returns the subject of the certificate $cert.

=end original

証明書$certのサブジェクトを返します。
(TBR)

 my $rv = Net::SSLeay::X509_get_subject_name($cert);
 # $cert - value corresponding to openssl's X509 structure
 #
 # returns: value corresponding to openssl's X509_NAME structure (0 on failure)

=item * X509_gmtime_adj

=begin original

Adjust th ASN1_TIME object to the timestamp (in GMT).

=end original

ASN1_TIMEオブジェクトをタイムスタンプ(GMT)に調整します。
(TBR)

 my $rv = Net::SSLeay::X509_gmtime_adj($s, $adj);
 # $s - value corresponding to openssl's ASN1_TIME structure
 # $adj - timestamp (seconds since 1.1.1970)
 #
 # returns: value corresponding to openssl's ASN1_TIME structure (0 on failure)

=begin original

B<BEWARE:> this function may fail for dates after 2038 as it is dependent on time_t size on your
system (32bit time_t does not work after 2038). Consider using L</P_ASN1_TIME_set_isotime> instead).

=end original

B<注意:>この関数は、システムのtime_tサイズに依存するため、2038年以降の日付では失敗する可能性があります(32ビットのtime_tは2038年以降は機能しません)。
代わりにL</P_ASN1_TIME_set_isotime>を使用することを検討してください)。
(TBR)

=item * X509_load_cert_crl_file

=begin original

Takes PEM file and loads all X509 certificates and X509 CRLs from that file into X509_LOOKUP structure.

=end original

PEMファイルを取得し、そのファイルからすべてのX509証明書とX509 CRLをX509_LOOKUP構造体にロードします。
(TBR)

 my $rv = Net::SSLeay::X509_load_cert_crl_file($ctx, $file, $type);
 # $ctx - value corresponding to openssl's X509_LOOKUP structure
 # $file - (string) file name
 # $type - (integer) type - use constants &Net::SSLeay::FILETYPE_PEM or &Net::SSLeay::FILETYPE_ASN1
 #                          if not FILETYPE_PEM then behaves as Net::SSLeay::X509_load_cert_file()
 #
 # returns: 1 on success, 0 on failure

=item * X509_load_cert_file

=begin original

Loads/adds X509 certificate from $file to X509_LOOKUP structure

=end original

$fileからX509証明書を読み込み、X509_LOOKUP構造体に追加します。
(TBR)

 my $rv = Net::SSLeay::X509_load_cert_file($ctx, $file, $type);
 # $ctx - value corresponding to openssl's X509_LOOKUP structure
 # $file - (string) file name
 # $type - (integer) type - use constants &Net::SSLeay::FILETYPE_PEM or &Net::SSLeay::FILETYPE_ASN1
 #
 # returns: 1 on success, 0 on failure

=item * X509_load_crl_file

=begin original

Loads/adds X509 CRL from $file to X509_LOOKUP structure

=end original

$fileからX509 CRLを読み込み、X509_LOOKUP構造体に追加します。
(TBR)

 my $rv = Net::SSLeay::X509_load_crl_file($ctx, $file, $type);
 # $ctx - value corresponding to openssl's X509_LOOKUP structure
 # $file - (string) file name
 # $type - (integer) type - use constants &Net::SSLeay::FILETYPE_PEM or &Net::SSLeay::FILETYPE_ASN1
 #
 # returns: 1 on success, 0 on failure

=item * X509_policy_level_get0_node

=begin original

??? (more info needed)

=end original

(詳細情報が必要)
(TBR)

 my $rv = Net::SSLeay::X509_policy_level_get0_node($level, $i);
 # $level - value corresponding to openssl's X509_POLICY_LEVEL structure
 # $i - (integer) index/position
 #
 # returns: value corresponding to openssl's X509_POLICY_NODE structure (0 on failure)

=item * X509_policy_level_node_count

=begin original

??? (more info needed)

=end original

(詳細情報が必要)
(TBR)

 my $rv = Net::SSLeay::X509_policy_level_node_count($level);
 # $level - value corresponding to openssl's X509_POLICY_LEVEL structure
 #
 # returns: (integer) node count

=item * X509_policy_node_get0_parent

=begin original

??? (more info needed)

=end original

(詳細情報が必要)
(TBR)

 my $rv = Net::SSLeay::X509_policy_node_get0_parent($node);
 # $node - value corresponding to openssl's X509_POLICY_NODE structure
 #
 # returns: value corresponding to openssl's X509_POLICY_NODE structure (0 on failure)

=item * X509_policy_node_get0_policy

=begin original

??? (more info needed)

=end original

(詳細情報が必要)
(TBR)

 my $rv = Net::SSLeay::X509_policy_node_get0_policy($node);
 # $node - value corresponding to openssl's X509_POLICY_NODE structure
 #
 # returns: value corresponding to openssl's ASN1_OBJECT structure (0 on failure)

=item * X509_policy_node_get0_qualifiers

=begin original

??? (more info needed)

=end original

(詳細情報が必要)
(TBR)

 my $rv = Net::SSLeay::X509_policy_node_get0_qualifiers($node);
 # $node - value corresponding to openssl's X509_POLICY_NODE structure
 #
 # returns: value corresponding to openssl's STACK_OF(POLICYQUALINFO) structure (0 on failure)

=item * X509_policy_tree_free

=begin original

??? (more info needed)

=end original

(詳細情報が必要)
(TBR)

 Net::SSLeay::X509_policy_tree_free($tree);
 # $tree - value corresponding to openssl's X509_POLICY_TREE structure
 #
 # returns: no return value

=item * X509_policy_tree_get0_level

=begin original

??? (more info needed)

=end original

(詳細情報が必要)
(TBR)

 my $rv = Net::SSLeay::X509_policy_tree_get0_level($tree, $i);
 # $tree - value corresponding to openssl's X509_POLICY_TREE structure
 # $i - (integer) level index
 #
 # returns: value corresponding to openssl's X509_POLICY_LEVEL structure (0 on failure)

=item * X509_policy_tree_get0_policies

=begin original

??? (more info needed)

=end original

(詳細情報が必要)
(TBR)

 my $rv = Net::SSLeay::X509_policy_tree_get0_policies($tree);
 # $tree - value corresponding to openssl's X509_POLICY_TREE structure
 #
 # returns: value corresponding to openssl's X509_POLICY_NODE structure (0 on failure)

=item * X509_policy_tree_get0_user_policies

=begin original

??? (more info needed)

=end original

(詳細情報が必要)
(TBR)

 my $rv = Net::SSLeay::X509_policy_tree_get0_user_policies($tree);
 # $tree - value corresponding to openssl's X509_POLICY_TREE structure
 #
 # returns: value corresponding to openssl's X509_POLICY_NODE structure (0 on failure)

=item * X509_policy_tree_level_count

=begin original

??? (more info needed)

=end original

(詳細情報が必要)
(TBR)

 my $rv = Net::SSLeay::X509_policy_tree_level_count($tree);
 # $tree - value corresponding to openssl's X509_POLICY_TREE structure
 #
 # returns: (integer) count

=item * X509_verify_cert_error_string

=begin original

Returns a human readable error string for verification error $n.

=end original

検証エラー$nに対して、人間が読めるエラー文字列を返します。
(TBR)

 my $rv = Net::SSLeay::X509_verify_cert_error_string($n);
 # $n - (long) numeric error code
 #
 # returns: error string

=begin original

Check openssl doc L<http://www.openssl.org/docs/crypto/X509_STORE_CTX_get_error.html|http://www.openssl.org/docs/crypto/X509_STORE_CTX_get_error.html>

=end original

openssl doc L<http://www.openssl.org/docs/crypto/X509_STORE_CTX_get_error.html|http://www.openssl.org/docs/crypto/X509_STORE_CTX_get_error.html>を確認します。
(TBR)

=item * P_X509_add_extensions

=begin original

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before

=end original

B<COMPATIBILITY:>は、Net-SSLeay-1.45以前では使用できません。
(TBR)

=begin original

Adds one or more X509 extensions to X509 object $x.

=end original

1つ以上のX509拡張機能をX509オブジェクト$xに追加します。
(TBR)

 my $rv = Net::SSLeay::P_X509_add_extensions($x, $ca_cert, $nid, $value);
 # $x - value corresponding to openssl's X509 structure
 # $ca_cert - value corresponding to openssl's X509 structure (issuer's cert - necessary for sertting NID_authority_key_identifier)
 # $nid - NID identifying extension to be set
 # $value - extension value
 #
 # returns: 1 on success, 0 on failure

=begin original

You can set more extensions at once:

=end original

一度に複数の拡張子を設定できます。
(TBR)

 my $rv = Net::SSLeay::P_X509_add_extensions($x509, $ca_cert,
                &Net::SSLeay::NID_key_usage => 'digitalSignature,keyEncipherment',
                &Net::SSLeay::NID_subject_key_identifier => 'hash',
                &Net::SSLeay::NID_authority_key_identifier => 'keyid',
                &Net::SSLeay::NID_authority_key_identifier => 'issuer',
                &Net::SSLeay::NID_basic_constraints => 'CA:FALSE',
                &Net::SSLeay::NID_ext_key_usage => 'serverAuth,clientAuth',
                &Net::SSLeay::NID_netscape_cert_type => 'server',
                &Net::SSLeay::NID_subject_alt_name => 'DNS:s1.dom.com,DNS:s2.dom.com,DNS:s3.dom.com',
          );

=item * P_X509_copy_extensions

=begin original

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before

=end original

B<COMPATIBILITY:>は、Net-SSLeay-1.45以前では使用できません。
(TBR)

=begin original

Copies X509 extensions from X509_REQ object to X509 object - handy when you need to turn X509_REQ into X509 certificate.

=end original

X509拡張をX509_REQオブジェクトからX509オブジェクトにコピーします。
X509_REQをX509証明書に変換する必要がある場合に便利です。
(TBR)

 Net::SSLeay::P_X509_copy_extensions($x509_req, $x509, $override);
 # $x509_req - value corresponding to openssl's X509_REQ structure
 # $x509 - value corresponding to openssl's X509 structure
 # $override - (integer) flag indication whether to override already existing items in $x509 (default 1)
 #
 # returns: 1 on success, 0 on failure

=item * P_X509_get_crl_distribution_points

=begin original

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before; requires at least openssl-0.9.7

=end original

B<COMPATIBILITY:>Net-SSLeay-1.45以前では使用できません。
少なくともopenssl-0.9.7が必要です。
(TBR)

=begin original

Get the list of CRL distribution points from X509 certificate.

=end original

X509証明書からCRL配布ポイントのリストを取得します。
(TBR)

 my @cdp = Net::SSLeay::P_X509_get_crl_distribution_points($x509);
 # $x509 - value corresponding to openssl's X509 structure
 #
 # returns: list of distribution points (usually URLs)

=item * P_X509_get_ext_key_usage

=begin original

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before; requires at least openssl-0.9.7

=end original

B<COMPATIBILITY:>Net-SSLeay-1.45以前では使用できません。
少なくともopenssl-0.9.7が必要です。
(TBR)

=begin original

Gets the list of extended key usage of given X509 certificate $cert.

=end original

指定されたX509証明書$certの拡張キー使用法の一覧を取得します。
(TBR)

 my @ext_usage = Net::SSLeay::P_X509_get_ext_key_usage($cert, $format);
 # $cert - value corresponding to openssl's X509 structure
 # $format - choose type of return values: 0=OIDs, 1=NIDs, 2=shortnames, 3=longnames
 #
 # returns: list of values

=begin original

Examples:

=end original

例:
(TBR)

 my @extkeyusage_oid = Net::SSLeay::P_X509_get_ext_key_usage($x509,0);
 # returns for example: ("1.3.6.1.5.5.7.3.1", "1.3.6.1.5.5.7.3.2")

 my @extkeyusage_nid = Net::SSLeay::P_X509_get_ext_key_usage($x509,1);
 # returns for example: (129, 130)

 my @extkeyusage_sn  = Net::SSLeay::P_X509_get_ext_key_usage($x509,2);
 # returns for example: ("serverAuth", "clientAuth")

 my @extkeyusage_ln  = Net::SSLeay::P_X509_get_ext_key_usage($x509,3);
 # returns for example: ("TLS Web Server Authentication",  "TLS Web Client Authentication")

=item * P_X509_get_key_usage

=begin original

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before

=end original

B<COMPATIBILITY:>は、Net-SSLeay-1.45以前では使用できません。
(TBR)

=begin original

Gets the list of key usage of given X509 certificate $cert.

=end original

指定されたX509証明書$certのキー使用のリストを取得します。
(TBR)

 my @keyusage = Net::SSLeay::P_X509_get_key_usage($cert);
 # $cert - value corresponding to openssl's X509 structure
 #
 # returns: list of key usage values which can be none, one or more from the following list:
 #          "digitalSignature"
 #          "nonRepudiation"
 #          "keyEncipherment"
 #          "dataEncipherment"
 #          "keyAgreement"
 #          "keyCertSign"
 #          "cRLSign"
 #          "encipherOnly"
 #          "decipherOnly"

=item * P_X509_get_netscape_cert_type

=begin original

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before

=end original

B<COMPATIBILITY:>は、Net-SSLeay-1.45以前では使用できません。
(TBR)

=begin original

Gets the list of Netscape cert types of given X509 certificate $cert.

=end original

指定されたX509証明書$certのNetscape証明書タイプのリストを取得します。
(TBR)

 Net::SSLeay::P_X509_get_netscape_cert_type($cert);
 # $cert - value corresponding to openssl's X509 structure
 #
 # returns: list of Netscape type values which can be none, one or more from the following list:
 #          "client"
 #          "server"
 #          "email"
 #          "objsign"
 #          "reserved"
 #          "sslCA"
 #          "emailCA"
 #          "objCA"

=item * P_X509_get_pubkey_alg

=begin original

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before

=end original

B<COMPATIBILITY:>は、Net-SSLeay-1.45以前では使用できません。
(TBR)

=begin original

Returns ASN1_OBJECT corresponding to X509 certificate public key algorithm.

=end original

X509証明書公開鍵アルゴリズムに対応するASN1_OBJECTを返します。
(TBR)

 my $rv = Net::SSLeay::P_X509_get_pubkey_alg($x);
 # $x - value corresponding to openssl's X509 structure
 #
 # returns: value corresponding to openssl's ASN1_OBJECT structure (0 on failure)

=begin original

To get textual representation use:

=end original

テキスト表現を取得するには、以下を使用します。
(TBR)

 my $alg = Net::SSLeay::OBJ_obj2txt(Net::SSLeay::P_X509_get_pubkey_alg($x509));
 # returns for example: "rsaEncryption"

=item * P_X509_get_signature_alg

=begin original

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before

=end original

B<COMPATIBILITY:>は、Net-SSLeay-1.45以前では使用できません。
(TBR)

=begin original

Returns ASN1_OBJECT corresponding to X509 signarite key algorithm.

=end original

X509 signariteキーアルゴリズムに対応するASN1_OBJECTを返します。
(TBR)

 my $rv = Net::SSLeay::P_X509_get_signature_alg($x);
 # $x - value corresponding to openssl's X509 structure
 #
 # returns: value corresponding to openssl's ASN1_OBJECT structure (0 on failure)

=begin original

To get textual representation use:

=end original

テキスト表現を取得するには、以下を使用します。
(TBR)

 my $alg = Net::SSLeay::OBJ_obj2txt(Net::SSLeay::P_X509_get_signature_alg($x509))
 # returns for example: "sha1WithRSAEncryption"

=back

=head3 Low level API: X509_REQ_* related functions

=over

=item * X509_REQ_new

=begin original

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before

=end original

B<COMPATIBILITY:>は、Net-SSLeay-1.45以前では使用できません。
(TBR)

=begin original

Creates a new X509_REQ structure.

=end original

新しいX509_REQ構造体を作成します。
(TBR)

 my $rv = Net::SSLeay::X509_REQ_new();
 #
 # returns: value corresponding to openssl's X509_REQ structure (0 on failure)

=item * X509_REQ_free

=begin original

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before

=end original

B<COMPATIBILITY:>は、Net-SSLeay-1.45以前では使用できません。
(TBR)

=begin original

Free an allocated X509_REQ structure.

=end original

割り当てられたX509_REQ構造体を解放します。
(TBR)

 Net::SSLeay::X509_REQ_free($x);
 # $x - value corresponding to openssl's X509_REQ structure
 #
 # returns: no return value

=item * X509_REQ_add1_attr_by_NID

=begin original

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before

=end original

B<COMPATIBILITY:>は、Net-SSLeay-1.45以前では使用できません。
(TBR)

=begin original

Adds an attribute whose name is defined by a NID $nid. The field value to be added is in $bytes.

=end original

名前がNID$nidで定義されている属性を追加します。
追加されるフィールド値の単位は$bytesです。
(TBR)

 my $rv = Net::SSLeay::X509_REQ_add1_attr_by_NID($req, $nid, $type, $bytes);
 # $req - value corresponding to openssl's X509_REQ structure
 # $nid - (integer) NID value
 # $type - (integer) type of data in $bytes (see below)
 # $bytes - data to be set
 #
 # returns: 1 on success, 0 on failure

 # values for $type - use constants:
 &Net::SSLeay::MBSTRING_UTF8     - $bytes contains utf8 encoded data
 &Net::SSLeay::MBSTRING_ASC      - $bytes contains ASCII data

=item * X509_REQ_digest

=begin original

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before

=end original

B<COMPATIBILITY:>は、Net-SSLeay-1.45以前では使用できません。
(TBR)

=begin original

Computes digest/fingerprint of X509_REQ $data using $type hash function.

=end original

$typeハッシュ関数を使用して、X509_REQ$データのダイジェスト/フィンガープリントを計算します。
(TBR)

 my $digest_value = Net::SSLeay::X509_REQ_digest($data, $type);
 # $data - value corresponding to openssl's X509_REQ structure
 # $type - value corresponding to openssl's EVP_MD structure - e.g. got via EVP_get_digestbyname()
 #
 # returns: hash value (binary)

 #to get printable (hex) value of digest use:
 print unpack('H*', $digest_value);

=item * X509_REQ_get_attr_by_NID

=begin original

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before

=end original

B<COMPATIBILITY:>は、Net-SSLeay-1.45以前では使用できません。
(TBR)

=begin original

Retrieve the next index matching $nid after $lastpos ($lastpos should initially be set to -1).

=end original

$lastposの後に$nidにマッチする次のインデックスを取得します($lastposの初期値は-1に設定されています)。
(TBR)

 my $rv = Net::SSLeay::X509_REQ_get_attr_by_NID($req, $nid, $lastpos=-1);
 # $req - value corresponding to openssl's X509_REQ structure
 # $nid - (integer) NID value
 # $lastpos - [optional] (integer) index where to start search (default -1)
 #
 # returns: index (-1 if there are no more entries)

=begin original

Note: use L</P_X509_REQ_get_attr> to get the actual attribute value - e.g.

=end original

注:実際の属性値を取得するには、L</P_X509_REQ_get_attr>を使用します。
(TBR)

 my $index = Net::SSLeay::X509_REQ_get_attr_by_NID($req, $nid);
 my @attr_values = Net::SSLeay::P_X509_REQ_get_attr($req, $index);

=item * X509_REQ_get_attr_by_OBJ

=begin original

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before

=end original

B<COMPATIBILITY:>は、Net-SSLeay-1.45以前では使用できません。
(TBR)

=begin original

Retrieve the next index matching $obj after $lastpos ($lastpos should initially be set to -1).

=end original

$lastposの後に$objにマッチする次のインデックスを取得します($lastposの初期値は-1に設定されています)。
(TBR)

 my $rv = Net::SSLeay::X509_REQ_get_attr_by_OBJ($req, $obj, $lastpos=-1);
 # $req - value corresponding to openssl's X509_REQ structure
 # $obj - value corresponding to openssl's ASN1_OBJECT structure
 # $lastpos - [optional] (integer) index where to start search (default -1)
 #
 # returns: index (-1 if there are no more entries)

=begin original

Note: use L</P_X509_REQ_get_attr> to get the actual attribute value - e.g.

=end original

注:実際の属性値を取得するには、L</P_X509_REQ_get_attr>を使用します。
(TBR)

 my $index = Net::SSLeay::X509_REQ_get_attr_by_NID($req, $nid);
 my @attr_values = Net::SSLeay::P_X509_REQ_get_attr($req, $index);

=item * X509_REQ_get_attr_count

=begin original

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before

=end original

B<COMPATIBILITY:>は、Net-SSLeay-1.45以前では使用できません。
(TBR)

=begin original

Returns the total number of attributes in $req.

=end original

属性の合計数を$reqに返します。
(TBR)

 my $rv = Net::SSLeay::X509_REQ_get_attr_count($req);
 # $req - value corresponding to openssl's X509_REQ structure
 #
 # returns: (integer) items count

=item * X509_REQ_get_pubkey

=begin original

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before

=end original

B<COMPATIBILITY:>は、Net-SSLeay-1.45以前では使用できません。
(TBR)

=begin original

Returns public key corresponding to given X509_REQ object $x.

=end original

指定されたX509_REQオブジェクト$xに対応する公開鍵を返します。
(TBR)

 my $rv = Net::SSLeay::X509_REQ_get_pubkey($x);
 # $x - value corresponding to openssl's X509_REQ structure
 #
 # returns: value corresponding to openssl's EVP_PKEY structure (0 on failure)

=item * X509_REQ_get_subject_name

=begin original

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before

=end original

B<COMPATIBILITY:>は、Net-SSLeay-1.45以前では使用できません。
(TBR)

=begin original

Returns X509_NAME object corresponding to subject name of given X509_REQ object $x.

=end original

指定されたX509_REQオブジェクト$xのサブジェクト名に対応するX509_NAMEオブジェクトを返します。
(TBR)

 my $rv = Net::SSLeay::X509_REQ_get_subject_name($x);
 # $x - value corresponding to openssl's X509_REQ structure
 #
 # returns: value corresponding to openssl's X509_NAME structure (0 on failure)

=item * X509_REQ_get_version

=begin original

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before

=end original

B<COMPATIBILITY:>は、Net-SSLeay-1.45以前では使用できません。
(TBR)

=begin original

Returns 'version' value for given X509_REQ object $x.

=end original

指定されたX509_REQオブジェクト$xの'version'値を返します。
(TBR)

 my $rv = Net::SSLeay::X509_REQ_get_version($x);
 # $x - value corresponding to openssl's X509_REQ structure
 #
 # returns: (integer) version e.g. 0 = "version 1"

=item * X509_REQ_set_pubkey

=begin original

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before

=end original

B<COMPATIBILITY:>は、Net-SSLeay-1.45以前では使用できません。
(TBR)

=begin original

Sets public key of given X509_REQ object $x to $pkey.

=end original

指定されたX509_REQオブジェクト$xの公開鍵を$pkeyに設定します。
(TBR)

 my $rv = Net::SSLeay::X509_REQ_set_pubkey($x, $pkey);
 # $x - value corresponding to openssl's X509_REQ structure
 # $pkey - value corresponding to openssl's EVP_PKEY structure
 #
 # returns: 1 on success, 0 on failure

=item * X509_REQ_set_subject_name

=begin original

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before

=end original

B<COMPATIBILITY:>は、Net-SSLeay-1.45以前では使用できません。
(TBR)

=begin original

Sets subject name of given X509_REQ object $x to X509_NAME object $name.

=end original

指定されたX509_REQオブジェクト$xのサブジェクト名をX509_NAMEオブジェクト$nameに設定します。
(TBR)

 my $rv = Net::SSLeay::X509_REQ_set_subject_name($x, $name);
 # $x - value corresponding to openssl's X509_REQ structure
 # $name - value corresponding to openssl's X509_NAME structure
 #
 # returns: 1 on success, 0 on failure

=item * X509_REQ_set_version

=begin original

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before

=end original

B<COMPATIBILITY:>は、Net-SSLeay-1.45以前では使用できません。
(TBR)

=begin original

Sets 'version' of given X509_REQ object $x to $version.

=end original

指定されたX509_REQオブジェクト$xの'バージョン'を$versionに設定します。
(TBR)

 my $rv = Net::SSLeay::X509_REQ_set_version($x, $version);
 # $x - value corresponding to openssl's X509_REQ structure
 # $version - (integer) e.g. 0 = "version 1"
 #
 # returns: 1 on success, 0 on failure

=item * X509_REQ_sign

=begin original

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before

=end original

B<COMPATIBILITY:>は、Net-SSLeay-1.45以前では使用できません。
(TBR)

=begin original

Sign X509_REQ object $x with private key $pk (using digest algorithm $md).

=end original

X509_REQオブジェクト$xに秘密鍵$pkで署名します(ダイジェストアルゴリズム$mdを使用)。
(TBR)

 my $rv = Net::SSLeay::X509_REQ_sign($x, $pk, $md);
 # $x - value corresponding to openssl's X509_REQ structure
 # $pk - value corresponding to openssl's EVP_PKEY structure (requestor's private key)
 # $md - value corresponding to openssl's EVP_MD structure
 #
 # returns: 1 on success, 0 on failure

=item * X509_REQ_verify

=begin original

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before

=end original

B<COMPATIBILITY:>は、Net-SSLeay-1.45以前では使用できません。
(TBR)

=begin original

Verifies X509_REQ object $x using public key $r (pubkey of requesting party).

=end original

公開鍵$r(要求側のpubkey)を使用して、X509_REQオブジェクト$xを検証します。
(TBR)

 my $rv = Net::SSLeay::X509_REQ_verify($x, $r);
 # $x - value corresponding to openssl's X509_REQ structure
 # $r - value corresponding to openssl's EVP_PKEY structure
 #
 # returns: 0 - verify failure, 1 - verify OK, <0 - error

=item * P_X509_REQ_add_extensions

=begin original

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before

=end original

B<COMPATIBILITY:>は、Net-SSLeay-1.45以前では使用できません。
(TBR)

=begin original

Adds one or more X509 extensions to X509_REQ object $x.

=end original

1つ以上のX509拡張をX509_REQオブジェクト$xに追加します。
(TBR)

 my $rv = Net::SSLeay::P_X509_REQ_add_extensions($x, $nid, $value);
 # $x - value corresponding to openssl's X509_REQ structure
 # $nid - NID identifying extension to be set
 # $value - extension value
 #
 # returns: 1 on success, 0 on failure

=begin original

You can set more extensions at once:

=end original

一度に複数の拡張子を設定できます。
(TBR)

 my $rv = Net::SSLeay::P_X509_REQ_add_extensions($x509_req,
            &Net::SSLeay::NID_key_usage => 'digitalSignature,keyEncipherment',
            &Net::SSLeay::NID_basic_constraints => 'CA:FALSE',
            &Net::SSLeay::NID_ext_key_usage => 'serverAuth,clientAuth',
            &Net::SSLeay::NID_netscape_cert_type => 'server',
            &Net::SSLeay::NID_subject_alt_name => 'DNS:s1.com,DNS:s2.com',
            &Net::SSLeay::NID_crl_distribution_points => 'URI:http://pki.com/crl1,URI:http://pki.com/crl2',
          );

=item * P_X509_REQ_get_attr

=begin original

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before; requires at least openssl-0.9.7

=end original

B<COMPATIBILITY:>Net-SSLeay-1.45以前では使用できません。
少なくともopenssl-0.9.7が必要です。
(TBR)

=begin original

Returns attribute value for X509_REQ's attribute at index $n.

=end original

インデックス$nにあるX509_REQの属性の属性値を返します。
(TBR)

 Net::SSLeay::P_X509_REQ_get_attr($req, $n);
 # $req - value corresponding to openssl's X509_REQ structure
 # $n - (integer) attribute index
 #
 # returns: value corresponding to openssl's ASN1_STRING structure

=back

=head3 Low level API: X509_CRL_* related functions

=over

=item * X509_CRL_new

=begin original

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before

=end original

B<COMPATIBILITY:>は、Net-SSLeay-1.45以前では使用できません。
(TBR)

=begin original

Creates a new X509_CRL structure.

=end original

新しいX509_CRL構造体を作成します。
(TBR)

 my $rv = Net::SSLeay::X509_CRL_new();
 #
 # returns: value corresponding to openssl's X509_CRL structure (0 on failure)

=item * X509_CRL_free

=begin original

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before

=end original

B<COMPATIBILITY:>は、Net-SSLeay-1.45以前では使用できません。
(TBR)

=begin original

Free an allocated X509_CRL structure.

=end original

割り当てられたX509_CRL構造体を解放します。
(TBR)

 Net::SSLeay::X509_CRL_free($x);
 # $x - value corresponding to openssl's X509_CRL structure
 #
 # returns: no return value

=item * X509_CRL_digest

=begin original

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before

=end original

B<COMPATIBILITY:>は、Net-SSLeay-1.45以前では使用できません。
(TBR)

=begin original

Computes digest/fingerprint of X509_CRL $data using $type hash function.

=end original

$typeハッシュ関数を使用して、X509_CRL$dataのダイジェスト/フィンガープリントを計算します。
(TBR)

 my $digest_value = Net::SSLeay::X509_CRL_digest($data, $type);
 # $data - value corresponding to openssl's X509_CRL structure
 # $type - value corresponding to openssl's EVP_MD structure - e.g. got via EVP_get_digestbyname()
 #
 # returns: hash value (binary)

=begin original

Example:

=end original

例:
(TBR)

 my $x509_crl
 my $md = Net::SSLeay::EVP_get_digestbyname("sha1");
 my $digest_value = Net::SSLeay::X509_CRL_digest($x509_crl, $md);
 #to get printable (hex) value of digest use:
 print "digest=", unpack('H*', $digest_value), "\n";

=item * X509_CRL_get_issuer

=begin original

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before

=end original

B<COMPATIBILITY:>は、Net-SSLeay-1.45以前では使用できません。
(TBR)

=begin original

Returns X509_NAME object corresponding to the issuer of X509_CRL $x.

=end original

X509_CRL$xの発行元に対応するX509_NAMEオブジェクトを返します。
(TBR)

 my $rv = Net::SSLeay::X509_CRL_get_issuer($x);
 # $x - value corresponding to openssl's X509_CRL structure
 #
 # returns: value corresponding to openssl's X509_NAME structure (0 on failure)

=begin original

See other C<X509_NAME_*> functions to get more info from X509_NAME structure.

=end original

X509_NAME構造体の詳細については、他のCの<X509_NAME_*>関数を参照してください。
(TBR)

=item * X509_CRL_get_lastUpdate

=begin original

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before

=end original

B<COMPATIBILITY:>は、Net-SSLeay-1.45以前では使用できません。
(TBR)

=begin original

Returns 'lastUpdate' date-time value of X509_CRL object $x.

=end original

X509_CRLオブジェクト$xの'lastUpdate'日時値を返します。
(TBR)

 my $rv = Net::SSLeay::X509_CRL_get_lastUpdate($x);
 # $x - value corresponding to openssl's X509_CRL structure
 #
 # returns: value corresponding to openssl's ASN1_TIME structure (0 on failure)

=item * X509_CRL_get_nextUpdate

=begin original

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before

=end original

B<COMPATIBILITY:>は、Net-SSLeay-1.45以前では使用できません。
(TBR)

=begin original

Returns 'nextUpdate' date-time value of X509_CRL object $x.

=end original

X509_CRLオブジェクト$xの'nextUpdate'日時値を返します。
(TBR)

 my $rv = Net::SSLeay::X509_CRL_get_nextUpdate($x);
 # $x - value corresponding to openssl's X509_CRL structure
 #
 # returns: value corresponding to openssl's ASN1_TIME structure (0 on failure)

=item * X509_CRL_get_version

=begin original

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before

=end original

B<COMPATIBILITY:>は、Net-SSLeay-1.45以前では使用できません。
(TBR)

=begin original

Returns 'version' value of given X509_CRL structure $x.

=end original

指定されたX509_CRL構造体$xの'version'値を返します。
(TBR)

 my $rv = Net::SSLeay::X509_CRL_get_version($x);
 # $x - value corresponding to openssl's X509_CRL structure
 #
 # returns: (integer) version

=item * X509_CRL_set_issuer_name

=begin original

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before; requires at least openssl-0.9.7

=end original

B<COMPATIBILITY:>Net-SSLeay-1.45以前では使用できません。
少なくともopenssl-0.9.7が必要です。
(TBR)

=begin original

Sets the issuer of X509_CRL object $x to X509_NAME object $name.

=end original

X509_CRLオブジェクト$xの発行元をX509_NAMEオブジェクト$nameに設定します。
(TBR)

 my $rv = Net::SSLeay::X509_CRL_set_issuer_name($x, $name);
 # $x - value corresponding to openssl's X509_CRL structure
 # $name - value corresponding to openssl's X509_NAME structure
 #
 # returns: 1 on success, 0 on failure

=item * X509_CRL_set_lastUpdate

=begin original

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before; requires at least openssl-0.9.7

=end original

B<COMPATIBILITY:>Net-SSLeay-1.45以前では使用できません。
少なくともopenssl-0.9.7が必要です。
(TBR)

=begin original

Sets 'lastUpdate' value of X509_CRL object $x to $tm.

=end original

X509_CRLオブジェクト$xの'lastUpdate'値を$tmに設定します。
(TBR)

 my $rv = Net::SSLeay::X509_CRL_set_lastUpdate($x, $tm);
 # $x - value corresponding to openssl's X509_CRL structure
 # $tm - value corresponding to openssl's ASN1_TIME structure
 #
 # returns: 1 on success, 0 on failure

=item * X509_CRL_set_nextUpdate

=begin original

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before; requires at least openssl-0.9.7

=end original

B<COMPATIBILITY:>Net-SSLeay-1.45以前では使用できません。
少なくともopenssl-0.9.7が必要です。
(TBR)

=begin original

Sets 'nextUpdate' value of X509_CRL object $x to $tm.

=end original

X509_CRLオブジェクト$xの'nextUpdate'値を$tmに設定します。
(TBR)

 my $rv = Net::SSLeay::X509_CRL_set_nextUpdate($x, $tm);
 # $x - value corresponding to openssl's X509_CRL structure
 # $tm - value corresponding to openssl's ASN1_TIME structure
 #
 # returns: 1 on success, 0 on failure

=item * X509_CRL_set_version

=begin original

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before; requires at least openssl-0.9.7

=end original

B<COMPATIBILITY:>Net-SSLeay-1.45以前では使用できません。
少なくともopenssl-0.9.7が必要です。
(TBR)

=begin original

Sets 'version' value of given X509_CRL structure $x to $version.

=end original

指定されたX509_CRL構造体$xの'version'値を$versionに設定します。
(TBR)

 my $rv = Net::SSLeay::X509_CRL_set_version($x, $version);
 # $x - value corresponding to openssl's X509_CRL structure
 # $version - (integer) version number (1 = version 2 CRL)
 #
 # returns: 1 on success, 0 on failure

=begin original

Note that if you want to use any X509_CRL extension you need to set "version 2 CRL" - C<Net::SSLeay::X509_CRL_set_version($x, 1)>.

=end original

任意のX509_CRL拡張を使用する場合は、"version 2 CRL"-C<Net::SSLeay::X509_CRL_set_version($x,  1)>を設定する必要があります。
(TBR)

=item * X509_CRL_sign

=begin original

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before

=end original

B<COMPATIBILITY:>は、Net-SSLeay-1.45以前では使用できません。
(TBR)

=begin original

Sign X509_CRL object $x with private key $pkey (using digest algorithm $md).

=end original

X509_CRLオブジェクト$xにプライベートキー$pkey(ダイジェストアルゴリズム$mdを使用)で署名します。
(TBR)

 my $rv = Net::SSLeay::X509_CRL_sign($x, $pkey, $md);
 # $x - value corresponding to openssl's X509_CRL structure
 # $pkey - value corresponding to openssl's EVP_PKEY structure
 # $md - value corresponding to openssl's EVP_MD structure
 #
 # returns: 1 on success, 0 on failure

=item * X509_CRL_sort

=begin original

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before; requires at least openssl-0.9.7

=end original

B<COMPATIBILITY:>Net-SSLeay-1.45以前では使用できません。
少なくともopenssl-0.9.7が必要です。
(TBR)

=begin original

Sorts the data of X509_CRL object so it will be written in serial number order.

=end original

X509_CRLオブジェクトのデータを、シリアル番号順に書き込まれるようにソートします。
(TBR)

 my $rv = Net::SSLeay::X509_CRL_sort($x);
 # $x - value corresponding to openssl's X509_CRL structure
 #
 # returns: 1 on success, 0 on failure

=item * X509_CRL_verify

=begin original

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before

=end original

B<COMPATIBILITY:>は、Net-SSLeay-1.45以前では使用できません。
(TBR)

=begin original

Verifies X509_CRL object $a using public key $r (pubkey of issuing CA).

=end original

公開鍵$r(発行元CAのpubkey)を使用してX509_CRLオブジェクト$aを検証します。
(TBR)

 my $rv = Net::SSLeay::X509_CRL_verify($a, $r);
 # $a - value corresponding to openssl's X509_CRL structure
 # $r - value corresponding to openssl's EVP_PKEY structure
 #
 # returns: 0 - verify failure, 1 - verify OK, <0 - error

=item * P_X509_CRL_add_revoked_serial_hex

=begin original

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before; requires at least openssl-0.9.7

=end original

B<COMPATIBILITY:>Net-SSLeay-1.45以前では使用できません。
少なくともopenssl-0.9.7が必要です。
(TBR)

=begin original

Adds given serian number $serial_hex to X509_CRL object $crl.

=end original

指定されたシリアル番号$serial_hexをX509_CRLオブジェクト$crlに追加します。
(TBR)

 Net::SSLeay::P_X509_CRL_add_revoked_serial_hex($crl, $serial_hex, $rev_time, $reason_code, $comp_time);
 # $crl - value corresponding to openssl's X509_CRL structure
 # $serial_hex - string (hexadecimal) representation of serial number
 # $rev_time - (revocation time) value corresponding to openssl's ASN1_TIME structure
 # $reason_code - [optional] (integer) reason code (see below) - default 0
 # $comp_time - [optional] (compromise time) value corresponding to openssl's ASN1_TIME structure
 #
 # returns: no return value

 reason codes:
 0 - unspecified
 1 - keyCompromise
 2 - CACompromise
 3 - affiliationChanged
 4 - superseded
 5 - cessationOfOperation
 6 - certificateHold
 7 - removeFromCRL

=item * P_X509_CRL_get_serial

=begin original

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before; requires at least openssl-0.9.7

=end original

B<COMPATIBILITY:>Net-SSLeay-1.45以前では使用できません。
少なくともopenssl-0.9.7が必要です。
(TBR)

=begin original

Returns serial number of X509_CRL object.

=end original

X509_CRLオブジェクトのシリアル番号を返します。
(TBR)

 my $rv = Net::SSLeay::P_X509_CRL_get_serial($crl);
 # $crl - value corresponding to openssl's X509_CRL structure
 #
 # returns: value corresponding to openssl's ASN1_INTEGER structure (0 on failure)

=item * P_X509_CRL_set_serial

=begin original

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before; requires at least openssl-0.9.7

=end original

B<COMPATIBILITY:>Net-SSLeay-1.45以前では使用できません。
少なくともopenssl-0.9.7が必要です。
(TBR)

=begin original

Sets serial number of X509_CRL object to $crl_number.

=end original

X509_CRLオブジェクトのシリアル番号を$crl_numberに設定します。
(TBR)

 my $rv = Net::SSLeay::P_X509_CRL_set_serial($crl, $crl_number);
 # $crl - value corresponding to openssl's X509_CRL structure
 # $crl_number - value corresponding to openssl's ASN1_INTEGER structure
 #
 # returns: 1 on success, 0 on failure

=back

=head3 Low level API: X509_EXTENSION_* related functions

=over

=item * X509_EXTENSION_get_critical

=begin original

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before

=end original

B<COMPATIBILITY:>は、Net-SSLeay-1.45以前では使用できません。
(TBR)

=begin original

Returns 'critical' flag of given X509_EXTENSION object $ex.

=end original

指定されたX509_EXTENSIONオブジェクト$exの'critical'フラグを返します。
(TBR)

 my $rv = Net::SSLeay::X509_EXTENSION_get_critical($ex);
 # $ex - value corresponding to openssl's X509_EXTENSION structure
 #
 # returns: (integer) 1 - critical, 0 - noncritical

=item * X509_EXTENSION_get_data

=begin original

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before

=end original

B<COMPATIBILITY:>は、Net-SSLeay-1.45以前では使用できません。
(TBR)

=begin original

Returns value (raw data) of X509_EXTENSION object $ne.

=end original

X509_EXTENSIONオブジェクト$neの値(rawデータ)を返します。
(TBR)

 my $rv = Net::SSLeay::X509_EXTENSION_get_data($ne);
 # $ne - value corresponding to openssl's X509_EXTENSION structure
 #
 # returns: value corresponding to openssl's ASN1_OCTET_STRING structure (0 on failure)

=begin original

Note: you can use L</P_ASN1_STRING_get> to convert ASN1_OCTET_STRING into perl scalar variable.

=end original

注:L</P_ASN1_STRING_get>を使用して、ASN1_OCTET_STRINGをperlスカラー変数に変換できます。
(TBR)

=item * X509_EXTENSION_get_object

=begin original

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before

=end original

B<COMPATIBILITY:>は、Net-SSLeay-1.45以前では使用できません。
(TBR)

=begin original

Returns OID (ASN1_OBJECT) of X509_EXTENSION object $ne.

=end original

X509_EXTENSIONオブジェクト$neのOID(ASN1_OBJECT)を返します。
(TBR)

 my $rv = Net::SSLeay::X509_EXTENSION_get_object($ex);
 # $ex - value corresponding to openssl's X509_EXTENSION structure
 #
 # returns: value corresponding to openssl's ASN1_OBJECT structure (0 on failure)

=item * X509V3_EXT_print

=begin original

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before

=end original

B<COMPATIBILITY:>は、Net-SSLeay-1.45以前では使用できません。
(TBR)

=begin original

Returns string representation of given X509_EXTENSION object $ext.

=end original

指定されたX509_EXTENSIONオブジェクト$extの文字列表現を返します。
(TBR)

 Net::SSLeay::X509V3_EXT_print($ext, $flags, $utf8_decode);
 # $ext - value corresponding to openssl's X509_EXTENSION structure
 # $flags - [optional] (integer) Currently the flag argument is unused and should be set to 0
 # $utf8_decode - [optional] 0 or 1 whether the returned value should be utf8 decoded (default=0)
 #
 # returns: no return value

=item * X509V3_EXT_d2i

=begin original

Parses an extension and returns its internal structure.

=end original

拡張機能を解析し、その内部構造を返します。
(TBR)

 my $rv = Net::SSLeay::X509V3_EXT_d2i($ext);
 # $ext - value corresponding to openssl's X509_EXTENSION structure
 #
 # returns: pointer ???

=back

=head3 Low level API: X509_NAME_* related functions

=over

=item * X509_NAME_ENTRY_get_data

=begin original

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before

=end original

B<COMPATIBILITY:>は、Net-SSLeay-1.45以前では使用できません。
(TBR)

=begin original

Retrieves the field value of $ne in and ASN1_STRING structure.

=end original

ASN1_STRING構造体内の$neのフィールド値を取得します。
(TBR)

 my $rv = Net::SSLeay::X509_NAME_ENTRY_get_data($ne);
 # $ne - value corresponding to openssl's X509_NAME_ENTRY structure
 #
 # returns: value corresponding to openssl's ASN1_STRING structure (0 on failure)

=begin original

Check openssl doc L<http://www.openssl.org/docs/crypto/X509_NAME_ENTRY_get_object.html|http://www.openssl.org/docs/crypto/X509_NAME_ENTRY_get_object.html>

=end original

openssl doc L<http://www.openssl.org/docs/crypto/X509_NAME_ENTRY_get_object.html|http://www.openssl.org/docs/crypto/X509_NAME_ENTRY_get_object.html>を確認します。
(TBR)

=item * X509_NAME_ENTRY_get_object

=begin original

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before

=end original

B<COMPATIBILITY:>は、Net-SSLeay-1.45以前では使用できません。
(TBR)

=begin original

Retrieves the field name of $ne in and ASN1_OBJECT structure.

=end original

ASN1_OBJECT構造体の$neのフィールド名を取得します。
(TBR)

 my $rv = Net::SSLeay::X509_NAME_ENTRY_get_object($ne);
 # $ne - value corresponding to openssl's X509_NAME_ENTRY structure
 #
 # returns: value corresponding to openssl's ASN1_OBJECT structure (0 on failure)

=begin original

Check openssl doc L<http://www.openssl.org/docs/crypto/X509_NAME_ENTRY_get_object.html|http://www.openssl.org/docs/crypto/X509_NAME_ENTRY_get_object.html>

=end original

openssl doc L<http://www.openssl.org/docs/crypto/X509_NAME_ENTRY_get_object.html|http://www.openssl.org/docs/crypto/X509_NAME_ENTRY_get_object.html>を確認します。
(TBR)

=item * X509_NAME_add_entry_by_txt

=begin original

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before; requires at least openssl-0.9.5

=end original

B<COMPATIBILITY:>Net-SSLeay-1.45以前では使用できません。
少なくともopenssl-0.9.5が必要です。
(TBR)

=begin original

Adds a field whose name is defined by a string $field. The field value to be added is in $bytes.

=end original

$fieldという文字列で名前が定義されたフィールドを追加します。
追加されるフィールド値の単位は$bytesです。
(TBR)

 my $rv = Net::SSLeay::X509_NAME_add_entry_by_txt($name, $field, $type, $bytes, $len, $loc, $set);
 # $name - value corresponding to openssl's X509_NAME structure
 # $field - (string) field definition (name) - e.g. "organizationName"
 # $type - (integer) type of data in $bytes (see below)
 # $bytes - data to be set
 # $loc - [optional] (integer) index where the new entry is inserted: if it is -1 (default) it is appended
 # $set - [optional] (integer) determines how the new type is added. If it is 0 (default) a new RDN is created
 #
 # returns: 1 on success, 0 on failure

 # values for $type - use constants:
 &Net::SSLeay::MBSTRING_UTF8     - $bytes contains utf8 encoded data
 &Net::SSLeay::MBSTRING_ASC      - $bytes contains ASCII data

=begin original

Unicode note: when passing non-ascii (unicode) string in $bytes do not forget to set C<$flags = &Net::SSLeay::MBSTRING_UTF8> and encode the perl $string via C<$bytes = encode('utf-8', $string)>.

=end original

Unicodeに関する注意:$bytesで非ascii(unicode)文字列を渡す場合は、C<$flags = &Net::SSLeay::MBSTRING_UTF8>を設定し、perl$stringをC<$bytes = encode('utf-8', $string)>でエンコードすることを忘れないでください。
(TBR)

=begin original

Check openssl doc L<http://www.openssl.org/docs/crypto/X509_NAME_add_entry_by_txt.html|http://www.openssl.org/docs/crypto/X509_NAME_add_entry_by_txt.html>

=end original

openssl doc L<http://www.openssl.org/docs/crypto/X509_NAME_add_entry_by_txt.html|http://www.openssl.org/docs/crypto/X509_NAME_add_entry_by_txt.html>を確認します。
(TBR)

=item * X509_NAME_add_entry_by_NID

=begin original

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before; requires at least openssl-0.9.5

=end original

B<COMPATIBILITY:>Net-SSLeay-1.45以前では使用できません。
少なくともopenssl-0.9.5が必要です。
(TBR)

=begin original

Adds a field whose name is defined by a NID $nid. The field value to be added is in $bytes.

=end original

NID$nidで定義された名前のフィールドを追加します。
追加されるフィールド値は$bytesです。
(TBR)

 my $rv = Net::SSLeay::X509_NAME_add_entry_by_NID($name, $nid, $type, $bytes, $len, $loc, $set);
 # $name - value corresponding to openssl's X509_NAME structure
 # $nid - (integer) field definition - NID value
 # $type - (integer) type of data in $bytes (see below)
 # $bytes - data to be set
 # $loc - [optional] (integer) index where the new entry is inserted: if it is -1 (default) it is appended
 # $set - [optional] (integer) determines how the new type is added. If it is 0 (default) a new RDN is created
 #
 # returns: 1 on success, 0 on failure

=begin original

Check openssl doc L<http://www.openssl.org/docs/crypto/X509_NAME_add_entry_by_txt.html|http://www.openssl.org/docs/crypto/X509_NAME_add_entry_by_txt.html>

=end original

openssl doc L<http://www.openssl.org/docs/crypto/X509_NAME_add_entry_by_txt.html|http://www.openssl.org/docs/crypto/X509_NAME_add_entry_by_txt.html>を確認します。
(TBR)

=item * X509_NAME_add_entry_by_OBJ

=begin original

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before; requires at least openssl-0.9.5

=end original

B<COMPATIBILITY:>Net-SSLeay-1.45以前では使用できません。
少なくともopenssl-0.9.5が必要です。
(TBR)

=begin original

Adds a field whose name is defined by a object (OID) $obj . The field value to be added is in $bytes.

=end original

オブジェクト(OID)$objで定義された名前を持つフィールドを追加します。
追加されるフィールド値の単位は$bytesです。
(TBR)

 my $rv = Net::SSLeay::X509_NAME_add_entry_by_OBJ($name, $obj, $type, $bytes, $len, $loc, $set);
 # $name - value corresponding to openssl's X509_NAME structure
 # $obj - field definition - value corresponding to openssl's ASN1_OBJECT structure
 # $type - (integer) type of data in $bytes (see below)
 # $bytes - data to be set
 # $loc - [optional] (integer) index where the new entry is inserted: if it is -1 (default) it is appended
 # $set - [optional] (integer) determines how the new type is added. If it is 0 (default) a new RDN is created
 #
 # returns: 1 on success, 0 on failure

=begin original

Check openssl doc L<http://www.openssl.org/docs/crypto/X509_NAME_add_entry_by_txt.html|http://www.openssl.org/docs/crypto/X509_NAME_add_entry_by_txt.html>

=end original

openssl doc L<http://www.openssl.org/docs/crypto/X509_NAME_add_entry_by_txt.html|http://www.openssl.org/docs/crypto/X509_NAME_add_entry_by_txt.html>を確認します。
(TBR)

=item * X509_NAME_cmp

=begin original

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before

=end original

B<COMPATIBILITY:>は、Net-SSLeay-1.45以前では使用できません。
(TBR)

=begin original

Compares two X509_NAME obejcts.

=end original

2つのX509_NAMEオブジェクトを比較します。
(TBR)

 my $rv = Net::SSLeay::X509_NAME_cmp($a, $b);
 # $a - value corresponding to openssl's X509_NAME structure
 # $b - value corresponding to openssl's X509_NAME structure
 #
 # returns: 0 if $a matches $b; non zero otherwise

=item * X509_NAME_digest

=begin original

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before

=end original

B<COMPATIBILITY:>は、Net-SSLeay-1.45以前では使用できません。
(TBR)

=begin original

Computes digest/fingerprint of X509_NAME $data using $type hash function.

=end original

$typeハッシュ関数を使用して、X509_NAME$データのダイジェスト/フィンガープリントを計算します。
(TBR)

 my $digest_value = Net::SSLeay::X509_NAME_digest($data, $type);
 # $data - value corresponding to openssl's X509_NAME structure
 # $type - value corresponding to openssl's EVP_MD structure - e.g. got via EVP_get_digestbyname()
 #
 # returns: hash value (binary)

 #to get printable (hex) value of digest use:
 print unpack('H*', $digest_value);

=item * X509_NAME_entry_count

=begin original

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before

=end original

B<COMPATIBILITY:>は、Net-SSLeay-1.45以前では使用できません。
(TBR)

=begin original

Returns the total number of entries in $name.

=end original

$name内のエントリの総数を返します。
(TBR)

 my $rv = Net::SSLeay::X509_NAME_entry_count($name);
 # $name - value corresponding to openssl's X509_NAME structure
 #
 # returns: (integer) entries count

=begin original

Check openssl doc L<http://www.openssl.org/docs/crypto/X509_NAME_get_index_by_NID.html|http://www.openssl.org/docs/crypto/X509_NAME_get_index_by_NID.html>

=end original

openssl doc Lを確認してください<http://www.openssl.org/docs/crypto/X509_NAME_get_index_by_NID.html|http://www.openssl.org/docs/crypto/X509_NAME_get_index_by_NID.html>
(TBR)

=item * X509_NAME_get_entry

=begin original

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before

=end original

B<COMPATIBILITY:>は、Net-SSLeay-1.45以前では使用できません。
(TBR)

=begin original

Retrieves the X509_NAME_ENTRY from $name corresponding to index $loc. Acceptable values for $loc run
from 0 to C<Net::SSLeay::X509_NAME_entry_count($name)- 1>. The value returned is an internal pointer which must not be freed.

=end original

インデックス$locに対応する$nameからX509_NAME_ENTRYを取得します。
$locに使用できる値は、0～C<Net::SSLeay::X509_NAME_entry_count($name)- 1>です。
返される値は内部ポインタであり、解放しないでください。
(TBR)

 my $rv = Net::SSLeay::X509_NAME_get_entry($name, $loc);
 # $name - value corresponding to openssl's X509_NAME structure
 # $loc - (integer) index of wanted entry
 #
 # returns: value corresponding to openssl's X509_NAME_ENTRY structure (0 on failure)

=begin original

Check openssl doc L<http://www.openssl.org/docs/crypto/X509_NAME_get_index_by_NID.html|http://www.openssl.org/docs/crypto/X509_NAME_get_index_by_NID.html>

=end original

openssl doc Lを確認してください<http://www.openssl.org/docs/crypto/X509_NAME_get_index_by_NID.html|http://www.openssl.org/docs/crypto/X509_NAME_get_index_by_NID.html>
(TBR)

=item * X509_NAME_print_ex

=begin original

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before

=end original

B<COMPATIBILITY:>は、Net-SSLeay-1.45以前では使用できません。
(TBR)

=begin original

Returns a string with human readable version of $name.

=end original

$nameを人間が読める形式で文字列として返します。
(TBR)

 Net::SSLeay::X509_NAME_print_ex($name, $flags, $utf8_decode);
 # $name - value corresponding to openssl's X509_NAME structure
 # $flags - [optional] conversion flags (default XN_FLAG_RFC2253) - see below
 # $utf8_decode - [optional] 0 or 1 whether the returned value should be utf8 decoded (default=0)
 #
 # returns: string representation of $name

 #available conversion flags - use constants:
 &Net::SSLeay::XN_FLAG_COMPAT
 &Net::SSLeay::XN_FLAG_DN_REV
 &Net::SSLeay::XN_FLAG_DUMP_UNKNOWN_FIELDS
 &Net::SSLeay::XN_FLAG_FN_ALIGN
 &Net::SSLeay::XN_FLAG_FN_LN
 &Net::SSLeay::XN_FLAG_FN_MASK
 &Net::SSLeay::XN_FLAG_FN_NONE
 &Net::SSLeay::XN_FLAG_FN_OID
 &Net::SSLeay::XN_FLAG_FN_SN
 &Net::SSLeay::XN_FLAG_MULTILINE
 &Net::SSLeay::XN_FLAG_ONELINE
 &Net::SSLeay::XN_FLAG_RFC2253
 &Net::SSLeay::XN_FLAG_SEP_COMMA_PLUS
 &Net::SSLeay::XN_FLAG_SEP_CPLUS_SPC
 &Net::SSLeay::XN_FLAG_SEP_MASK
 &Net::SSLeay::XN_FLAG_SEP_MULTILINE
 &Net::SSLeay::XN_FLAG_SEP_SPLUS_SPC
 &Net::SSLeay::XN_FLAG_SPC_EQ

=begin original

Most likely you will be fine with default:

=end original

ほとんどの場合、デフォルトで問題ありません。
(TBR)

 Net::SSLeay::X509_NAME_print_ex($name, &Net::SSLeay::XN_FLAG_RFC2253);

=begin original

Or you might want RFC2253-like output without utf8 chars escaping:

=end original

あるいは、utf8 charsをエスケープせずにRFC 2253のような出力が必要な場合もあります。
(TBR)

 use Net::SSLeay qw/XN_FLAG_RFC2253 ASN1_STRFLGS_ESC_MSB/;
 my $flag_rfc22536_utf8 = (XN_FLAG_RFC2253) & (~ ASN1_STRFLGS_ESC_MSB);
 my $result = Net::SSLeay::X509_NAME_print_ex($name, $flag_rfc22536_utf8, 1);

=begin original

Check openssl doc L<http://www.openssl.org/docs/crypto/X509_NAME_print_ex.html|http://www.openssl.org/docs/crypto/X509_NAME_print_ex.html>

=end original

openssl doc L<http://www.openssl.org/docs/crypto/X509_NAME_print_ex.html|http://www.openssl.org/docs/crypto/X509_NAME_print_ex.html>を確認します。
(TBR)

=item * X509_NAME_get_text_by_NID

=begin original

Retrieves the text from the first entry in name which matches $nid, if no
such entry exists -1 is returned.

=end original

$nidに一致する名前の最初のエントリからテキストを取得します。
該当するエントリが存在しない場合は、-1が返されます。
(TBR)

=begin original

B<openssl note:> this is a legacy function which has various limitations which
makes it of minimal use in practice. It can only find the first matching
entry and will copy the contents of the field verbatim: this can be highly
confusing if the target is a muticharacter string type like a BMPString or a UTF8String.

=end original

B<openssl note:>これは、実際には最小限の使用にするさまざまな制限を持つレガシー関数です。
最初に一致するエントリのみを見つけることができ、フィールドの内容を逐語的にコピーします。
ターゲットがBMPStringやUTF8Stringのような複数文字の文字列型である場合、これは非常に混乱する可能性があります。
(TBR)

 Net::SSLeay::X509_NAME_get_text_by_NID($name, $nid);
 # $name - value corresponding to openssl's X509_NAME structure
 # $nid - NID value (integer)
 #
 # returns: text value

=begin original

Check openssl doc L<http://www.openssl.org/docs/crypto/X509_NAME_get_index_by_NID.html|http://www.openssl.org/docs/crypto/X509_NAME_get_index_by_NID.html>

=end original

openssl doc Lを確認してください<http://www.openssl.org/docs/crypto/X509_NAME_get_index_by_NID.html|http://www.openssl.org/docs/crypto/X509_NAME_get_index_by_NID.html>
(TBR)

=item * X509_NAME_oneline

=begin original

Return an ASCII version of $name.

=end original

$nameのASCIIバージョンを返します。
(TBR)

 Net::SSLeay::X509_NAME_oneline($name);
 # $name - value corresponding to openssl's X509_NAME structure
 #
 # returns: (string) ASCII version of $name

=begin original

Check openssl doc L<http://www.openssl.org/docs/crypto/X509_NAME_print_ex.html|http://www.openssl.org/docs/crypto/X509_NAME_print_ex.html>

=end original

openssl doc L<http://www.openssl.org/docs/crypto/X509_NAME_print_ex.html|http://www.openssl.org/docs/crypto/X509_NAME_print_ex.html>を確認します。
(TBR)

=item * sk_X509_NAME_free

=begin original

Free an allocated STACK_OF(X509_NAME) structure.

=end original

割り当てられたSTACK_OF(X509_NAME)構造体を解放します。
(TBR)

 Net::SSLeay::sk_X509_NAME_free($sk);
 # $sk - value corresponding to openssl's STACK_OF(X509_NAME) structure
 #
 # returns: no return value

=item * sk_X509_NAME_num

=begin original

Return number of items in STACK_OF(X509_NAME)

=end original

STACK_OF(X509_NAME)内の項目数を返します。
(TBR)

 my $rv = Net::SSLeay::sk_X509_NAME_num($sk);
 # $sk - value corresponding to openssl's STACK_OF(X509_NAME) structure
 #
 # returns: number of items

=item * sk_X509_NAME_value

=begin original

Returns X509_NAME from position $index in STACK_OF(X509_NAME)

=end original

STACK_OF(X509_NAME)の$indexの位置からX509_NAMEを返します。
(TBR)

 my $rv = Net::SSLeay::sk_X509_NAME_value($sk, $i);
 # $sk - value corresponding to openssl's STACK_OF(X509_NAME) structure
 # $i - (integer) index/position
 #
 # returns: value corresponding to openssl's X509_NAME structure (0 on failure)

=item * add_file_cert_subjects_to_stack

=begin original

Add a file of certs to a stack. All certs in $file that are not already in the $stackCAs will be added.

=end original

証明書のファイルをスタックに追加します。
$stackCAsにまだ含まれていない$file内のすべての証明書が追加されます。
(TBR)

 my $rv = Net::SSLeay::add_file_cert_subjects_to_stack($stackCAs, $file);
 # $stackCAs - value corresponding to openssl's STACK_OF(X509_NAME) structure
 # $file - (string) filename
 #
 # returns: 1 on success, 0 on failure

=item * add_dir_cert_subjects_to_stack

=begin original

Add a directory of certs to a stack. All certs in $dir that are not already in the $stackCAs will be added.

=end original

証明書のディレクトリをスタックに追加します。
$stackCAにまだ含まれていない$dir内のすべての証明書が追加されます。
(TBR)

 my $rv = Net::SSLeay::add_dir_cert_subjects_to_stack($stackCAs, $dir);
 # $stackCAs - value corresponding to openssl's STACK_OF(X509_NAME) structure
 # $dir - (string) the directory to append from. All files in this directory will be examined as potential certs. Any that are acceptable to SSL_add_dir_cert_subjects_to_stack() that are not already in the stack will be included.
 #
 # returns: 1 on success, 0 on failure

=back

=head3 Low level API: X509_STORE_* related functions

=over

=item * X509_STORE_CTX_get_current_cert

=begin original

Returns the certificate in ctx which caused the error or 0 if no certificate is relevant.

=end original

エラーの原因となったctx内の証明書を返すか、関連する証明書がない場合は0を返す。
(TBR)

 my $rv = Net::SSLeay::X509_STORE_CTX_get_current_cert($x509_store_ctx);
 # $x509_store_ctx - value corresponding to openssl's X509_STORE_CTX structure
 #
 # returns: value corresponding to openssl's X509 structure (0 on failure)

=begin original

Check openssl doc L<http://www.openssl.org/docs/crypto/X509_STORE_CTX_get_error.html|http://www.openssl.org/docs/crypto/X509_STORE_CTX_get_error.html>

=end original

openssl doc L<http://www.openssl.org/docs/crypto/X509_STORE_CTX_get_error.html|http://www.openssl.org/docs/crypto/X509_STORE_CTX_get_error.html>を確認します。
(TBR)

=item * X509_STORE_CTX_get_error

=begin original

Returns the error code of $ctx.

=end original

$ctxのエラーコードを返します。
(TBR)

 my $rv = Net::SSLeay::X509_STORE_CTX_get_error($x509_store_ctx);
 # $x509_store_ctx - value corresponding to openssl's X509_STORE_CTX structure
 #
 # returns: (integer) error code

=begin original

For more info about erro code values check function L</get_verify_result>.

=end original

erroコード値の詳細については、関数L</get_verify_result>を確認してください。
(TBR)

=begin original

Check openssl doc L<http://www.openssl.org/docs/crypto/X509_STORE_CTX_get_error.html|http://www.openssl.org/docs/crypto/X509_STORE_CTX_get_error.html>

=end original

openssl doc L<http://www.openssl.org/docs/crypto/X509_STORE_CTX_get_error.html|http://www.openssl.org/docs/crypto/X509_STORE_CTX_get_error.html>を確認します。
(TBR)

=item * X509_STORE_CTX_get_error_depth

=begin original

Returns the depth of the error. This is a non-negative integer representing
where in the certificate chain the error occurred. If it is zero it occured
in the end entity certificate, one if it is the certificate which signed
the end entity certificate and so on.

=end original

エラーの深さを返します。
これは、証明書チェーン内のどこでエラーが発生したかを表す負でない整数です。
0の場合はエンドエンティティ証明書で発生し、1の場合はエンドエンティティ証明書に署名した証明書で発生します。
(TBR)

 my $rv = Net::SSLeay::X509_STORE_CTX_get_error_depth($x509_store_ctx);
 # $x509_store_ctx - value corresponding to openssl's X509_STORE_CTX structure
 #
 # returns: (integer) depth

=begin original

Check openssl doc L<http://www.openssl.org/docs/crypto/X509_STORE_CTX_get_error.html|http://www.openssl.org/docs/crypto/X509_STORE_CTX_get_error.html>

=end original

openssl doc L<http://www.openssl.org/docs/crypto/X509_STORE_CTX_get_error.html|http://www.openssl.org/docs/crypto/X509_STORE_CTX_get_error.html>を確認します。
(TBR)

=item * X509_STORE_CTX_get_ex_data

=begin original

Is used to retrieve the information for $idx from $x509_store_ctx.

=end original

$x509_store_ctxから$idxの情報を取得するために使用されます。
(TBR)

 my $rv = Net::SSLeay::X509_STORE_CTX_get_ex_data($x509_store_ctx, $idx);
 # $x509_store_ctx - value corresponding to openssl's X509_STORE_CTX structure
 # $idx - (integer) index for application specific data
 #
 # returns: pointer to ???

=item * X509_STORE_CTX_set_ex_data

=begin original

Is used to store application data at arg for idx into $x509_store_ctx.

=end original

idxのargにあるアプリケーションデータを$x509_store_ctxに格納するために使用されます。
(TBR)

 my $rv = Net::SSLeay::X509_STORE_CTX_set_ex_data($x509_store_ctx, $idx, $data);
 # $x509_store_ctx - value corresponding to openssl's X509_STORE_CTX structure
 # $idx - (integer) ???
 # $data - (pointer) ???
 #
 # returns: 1 on success, 0 on failure

=item * X509_STORE_CTX_set_cert

=begin original

Sets the certificate to be vertified in $x509_store_ctx to $x.

=end original

$x509_store_ctxで検証される証明書を$xに設定します。
(TBR)

 Net::SSLeay::X509_STORE_CTX_set_cert($x509_store_ctx, $x);
 # $x509_store_ctx - value corresponding to openssl's X509_STORE_CTX structure
 # $x - value corresponding to openssl's X509 structure
 #
 # returns: no return value

=begin original

Check openssl doc L<http://www.openssl.org/docs/crypto/X509_STORE_CTX_new.html|http://www.openssl.org/docs/crypto/X509_STORE_CTX_new.html>

=end original

openssl doc Lを確認してください<http://www.openssl.org/docs/crypto/X509_STORE_CTX_new.html|http://www.openssl.org/docs/crypto/X509_STORE_CTX_new.html>
(TBR)

=item * X509_STORE_CTX_set_error

=begin original

Sets the error code of $ctx to $s. For example it might be used in a verification callback to set an error based on additional checks.

=end original

$ctxのエラーコードを$sに設定します。
たとえば、検証コールバックで使用して、追加のチェックに基づいてエラーを設定できます。
(TBR)

 Net::SSLeay::X509_STORE_CTX_set_error($x509_store_ctx, $s);
 # $x509_store_ctx - value corresponding to openssl's X509_STORE_CTX structure
 # $s - (integer) error id
 #
 # returns: no return value

=begin original

Check openssl doc L<http://www.openssl.org/docs/crypto/X509_STORE_CTX_get_error.html|http://www.openssl.org/docs/crypto/X509_STORE_CTX_get_error.html>

=end original

openssl doc L<http://www.openssl.org/docs/crypto/X509_STORE_CTX_get_error.html|http://www.openssl.org/docs/crypto/X509_STORE_CTX_get_error.html>を確認します。
(TBR)

=item * X509_STORE_add_cert

=begin original

Adds X509 certificate $x into the X509_STORE $store.

=end original

X509証明書$xをX509_STORE$ストアに追加します。
(TBR)

 my $rv = Net::SSLeay::X509_STORE_add_cert($store, $x);
 # $store - value corresponding to openssl's X509_STORE structure
 # $x - value corresponding to openssl's X509 structure
 #
 # returns: 1 on success, 0 on failure

=item * X509_STORE_add_crl

=begin original

Adds X509 CRL $x into the X509_STORE $store.

=end original

X509 CRL$xをX509_STORE$ストアに追加します。
(TBR)

 my $rv = Net::SSLeay::X509_STORE_add_crl($store, $x);
 # $store - value corresponding to openssl's X509_STORE structure
 # $x - value corresponding to openssl's X509_CRL structure
 #
 # returns: 1 on success, 0 on failure

=item * X509_STORE_set1_param

=begin original

??? (more info needed)

=end original

(詳細情報が必要)
(TBR)

 my $rv = Net::SSLeay::X509_STORE_set1_param($store, $pm);
 # $store - value corresponding to openssl's X509_STORE structure
 # $pm - value corresponding to openssl's X509_VERIFY_PARAM structure
 #
 # returns: 1 on success, 0 on failure

=item * X509_STORE_set_flags

 Net::SSLeay::X509_STORE_set_flags($ctx, $flags);
 # $ctx - value corresponding to openssl's X509_STORE structure
 # $flags - (unsigned long) flags to be set (bitmask)
 #
 # returns: no return value

 #to create $flags value use:
 0x0001 - X509_V_FLAG_CB_ISSUER_CHECK - Send issuer+subject checks to verify_cb
 0x0002 - X509_V_FLAG_USE_CHECK_TIME - Use check time instead of current time
 0x0004 - X509_V_FLAG_CRL_CHECK - Lookup CRLs
 0x0008 - X509_V_FLAG_CRL_CHECK_ALL - Lookup CRLs for whole chain
 0x0010 - X509_V_FLAG_IGNORE_CRITICAL - Ignore unhandled critical extensions
 0x0020 - X509_V_FLAG_X509_STRICT - Disable workarounds for broken certificates
 0x0040 - X509_V_FLAG_ALLOW_PROXY_CERTS - Enable proxy certificate validation
 0x0080 - X509_V_FLAG_POLICY_CHECK - Enable policy checking
 0x0100 - X509_V_FLAG_EXPLICIT_POLICY - Policy variable require-explicit-policy
 0x0200 - X509_V_FLAG_INHIBIT_ANY - Policy variable inhibit-any-policy
 0x0400 - X509_V_FLAG_INHIBIT_MAP - Policy variable inhibit-policy-mapping
 0x0800 - X509_V_FLAG_NOTIFY_POLICY - Notify callback that policy is OK
 0x1000 - X509_V_FLAG_EXTENDED_CRL_SUPPORT - Extended CRL features such as indirect CRLs, alternate CRL signing keys
 0x2000 - X509_V_FLAG_USE_DELTAS - Delta CRL support
 0x4000 - X509_V_FLAG_CHECK_SS_SIGNATURE - Check selfsigned CA signature

 #or use corresponding constants like
 $flags = &Net::SSLeay::X509_V_FLAG_CB_ISSUER_CHECK;
 ...
 $flags = &Net::SSLeay::X509_V_FLAG_CHECK_SS_SIGNATURE;

=item * X509_STORE_set_purpose

 Net::SSLeay::X509_STORE_set_purpose($ctx, $purpose);
 # $ctx - value corresponding to openssl's X509_STORE structure
 # $purpose - (integer) purpose identifier
 #
 # returns: no return value

=begin original

For more details about $purpose identifier check L</CTX_set_purpose>.

=end original

$purpose identifier check L</CTX_set_purpose>の詳細については、を参照してください。
(TBR)

=item * X509_STORE_set_trust

 Net::SSLeay::X509_STORE_set_trust($ctx, $trust);
 # $ctx - value corresponding to openssl's X509_STORE structure
 # $trust - (integer) trust identifier
 #
 # returns: no return value

=begin original

For more details about $trust identifier check L</CTX_set_trust>.

=end original

$trust identifier check L</CTX_set_trust>の詳細については、こちらを参照してください。
(TBR)

=back

=head3 Low level API: X509_VERIFY_PARAM_* related functions

=over

=item * X509_VERIFY_PARAM_add0_policy

=begin original

Enables policy checking (it is disabled by default) and adds $policy to the acceptable policy set.

=end original

ポリシーチェックをイネーブルにし(デフォルトではディセーブル)、許容可能なポリシーセットに$policyを追加します。
(TBR)

 my $rv = Net::SSLeay::X509_VERIFY_PARAM_add0_policy($param, $policy);
 # $param - value corresponding to openssl's X509_VERIFY_PARAM structure
 # $policy - value corresponding to openssl's ASN1_OBJECT structure
 #
 # returns: 1 on success, 0 on failure

=begin original

Check openssl doc L<http://www.openssl.org/docs/crypto/X509_VERIFY_PARAM_set_flags.html|http://www.openssl.org/docs/crypto/X509_VERIFY_PARAM_set_flags.html>

=end original

openssl doc L<http://www.openssl.org/docs/crypto/X509_VERIFY_PARAM_set_flags.html|http://www.openssl.org/docs/crypto/X509_VERIFY_PARAM_set_flags.html>を確認します。
(TBR)

=item * X509_VERIFY_PARAM_add0_table

=begin original

??? (more info needed)

=end original

(詳細情報が必要)
(TBR)

 my $rv = Net::SSLeay::X509_VERIFY_PARAM_add0_table($param);
 # $param - value corresponding to openssl's X509_VERIFY_PARAM structure
 #
 # returns: 1 on success, 0 on failure

=item * X509_VERIFY_PARAM_clear_flags

=begin original

Clears the flags $flags in param.

=end original

paramの$flagsフラグをクリアします。
(TBR)

 my $rv = Net::SSLeay::X509_VERIFY_PARAM_clear_flags($param, $flags);
 # $param - value corresponding to openssl's X509_VERIFY_PARAM structure
 # $flags - (unsigned long) flags to be set (bitmask)
 #
 # returns: 1 on success, 0 on failure

=begin original

For more details about $flags bitmask see L</X509_STORE_set_flags>.

=end original

$flagsビットマスクの詳細については、L</X509_STORE_set_flags>を参照してください。
(TBR)

=begin original

Check openssl doc L<http://www.openssl.org/docs/crypto/X509_VERIFY_PARAM_set_flags.html|http://www.openssl.org/docs/crypto/X509_VERIFY_PARAM_set_flags.html>

=end original

openssl doc L<http://www.openssl.org/docs/crypto/X509_VERIFY_PARAM_set_flags.html|http://www.openssl.org/docs/crypto/X509_VERIFY_PARAM_set_flags.html>を確認します。
(TBR)

=item * X509_VERIFY_PARAM_free

=begin original

Frees up the X509_VERIFY_PARAM structure.

=end original

X509_VERIFY_PARAM構造体を解放します。
(TBR)

 Net::SSLeay::X509_VERIFY_PARAM_free($param);
 # $param - value corresponding to openssl's X509_VERIFY_PARAM structure
 #
 # returns: no return value

=item * X509_VERIFY_PARAM_get_depth

=begin original

Returns the current verification depth.

=end original

現在の確認深度を返します。
(TBR)

 my $rv = Net::SSLeay::X509_VERIFY_PARAM_get_depth($param);
 # $param - value corresponding to openssl's X509_VERIFY_PARAM structure
 #
 # returns: (ineger) depth

=begin original

Check openssl doc L<http://www.openssl.org/docs/crypto/X509_VERIFY_PARAM_set_flags.html|http://www.openssl.org/docs/crypto/X509_VERIFY_PARAM_set_flags.html>

=end original

openssl doc L<http://www.openssl.org/docs/crypto/X509_VERIFY_PARAM_set_flags.html|http://www.openssl.org/docs/crypto/X509_VERIFY_PARAM_set_flags.html>を確認します。
(TBR)

=item * X509_VERIFY_PARAM_get_flags

=begin original

Returns the current verification flags.

=end original

現在の検証フラグを返します。
(TBR)

 my $rv = Net::SSLeay::X509_VERIFY_PARAM_get_flags($param);
 # $param - value corresponding to openssl's X509_VERIFY_PARAM structure
 #
 # returns: (unsigned long) flags to be set (bitmask)

=begin original

For more details about returned flags bitmask see L</X509_STORE_set_flags>.

=end original

返されるフラグのビットマスクの詳細については、L</X509_STORE_set_flags>を参照してください。
(TBR)

=begin original

Check openssl doc L<http://www.openssl.org/docs/crypto/X509_VERIFY_PARAM_set_flags.html|http://www.openssl.org/docs/crypto/X509_VERIFY_PARAM_set_flags.html>

=end original

openssl doc L<http://www.openssl.org/docs/crypto/X509_VERIFY_PARAM_set_flags.html|http://www.openssl.org/docs/crypto/X509_VERIFY_PARAM_set_flags.html>を確認します。
(TBR)

=item * X509_VERIFY_PARAM_set_flags

 my $rv = Net::SSLeay::X509_VERIFY_PARAM_set_flags($param, $flags);
 # $param - value corresponding to openssl's X509_VERIFY_PARAM structure
 # $flags - (unsigned long) flags to be set (bitmask)
 #
 # returns: 1 on success, 0 on failure

=begin original

For more details about $flags bitmask see L</X509_STORE_set_flags>.

=end original

$flagsビットマスクの詳細については、L</X509_STORE_set_flags>を参照してください。
(TBR)

=begin original

Check openssl doc L<http://www.openssl.org/docs/crypto/X509_VERIFY_PARAM_set_flags.html|http://www.openssl.org/docs/crypto/X509_VERIFY_PARAM_set_flags.html>

=end original

openssl doc L<http://www.openssl.org/docs/crypto/X509_VERIFY_PARAM_set_flags.html|http://www.openssl.org/docs/crypto/X509_VERIFY_PARAM_set_flags.html>を確認します。
(TBR)

=item * X509_VERIFY_PARAM_inherit

=begin original

??? (more info needed)

=end original

(詳細情報が必要)
(TBR)

 my $rv = Net::SSLeay::X509_VERIFY_PARAM_inherit($to, $from);
 # $to - value corresponding to openssl's X509_VERIFY_PARAM structure
 # $from - value corresponding to openssl's X509_VERIFY_PARAM structure
 #
 # returns: 1 on success, 0 on failure

=item * X509_VERIFY_PARAM_lookup

=begin original

Finds X509_VERIFY_PARAM by name.

=end original

X509_VERIFY_PARAMを名前で検索します。
(TBR)

 my $rv = Net::SSLeay::X509_VERIFY_PARAM_lookup($name);
 # $name - (string) name we want to find
 #
 # returns: value corresponding to openssl's X509_VERIFY_PARAM structure (0 on failure)

=item * X509_VERIFY_PARAM_new

=begin original

Creates a new X509_VERIFY_PARAM structure.

=end original

新しいX509_VERIFY_PARAM構造体を作成します。
(TBR)

 my $rv = Net::SSLeay::X509_VERIFY_PARAM_new();
 #
 # returns: value corresponding to openssl's X509_VERIFY_PARAM structure (0 on failure)

=item * X509_VERIFY_PARAM_set1

=begin original

Sets the name of X509_VERIFY_PARAM structure $to to the same value
as the name of X509_VERIFY_PARAM structure $from.

=end original

X509_VERIFY_PARAM構造体$toの名前を、X509_VERIFY_PARAM構造体$fromの名前と同じ値に設定します。
(TBR)

 my $rv = Net::SSLeay::X509_VERIFY_PARAM_set1($to, $from);
 # $to - value corresponding to openssl's X509_VERIFY_PARAM structure
 # $from - value corresponding to openssl's X509_VERIFY_PARAM structure
 #
 # returns: 1 on success, 0 on failure

=item * X509_VERIFY_PARAM_set1_name

=begin original

Sets the name of X509_VERIFY_PARAM structure $param to $name.

=end original

X509_VERIFY_PARAM構造体$paramの名前を$nameに設定します。
(TBR)

 my $rv = Net::SSLeay::X509_VERIFY_PARAM_set1_name($param, $name);
 # $param - value corresponding to openssl's X509_VERIFY_PARAM structure
 # $name - (string) name to be set
 #
 # returns: 1 on success, 0 on failure

=item * X509_VERIFY_PARAM_set1_policies

=begin original

Enables policy checking (it is disabled by default) and sets the acceptable policy set to policies.
Any existing policy set is cleared. The policies parameter can be 0 to clear an existing policy set.

=end original

ポリシーチェックを有効にし(デフォルトでは無効)、許容可能なポリシーセットをpoliciesに設定します。
既存のポリシーセットが消去されます。
policiesパラメータを0に設定すると、既存のポリシーセットを消去できます。
(TBR)

 my $rv = Net::SSLeay::X509_VERIFY_PARAM_set1_policies($param, $policies);
 # $param - value corresponding to openssl's X509_VERIFY_PARAM structure
 # $policies - value corresponding to openssl's STACK_OF(ASN1_OBJECT) structure
 #
 # returns: 1 on success, 0 on failure

=begin original

Check openssl doc L<http://www.openssl.org/docs/crypto/X509_VERIFY_PARAM_set_flags.html|http://www.openssl.org/docs/crypto/X509_VERIFY_PARAM_set_flags.html>

=end original

openssl doc L<http://www.openssl.org/docs/crypto/X509_VERIFY_PARAM_set_flags.html|http://www.openssl.org/docs/crypto/X509_VERIFY_PARAM_set_flags.html>を確認します。
(TBR)

=item * X509_VERIFY_PARAM_set_depth

=begin original

Sets the maximum verification depth to depth. That is the maximum number of untrusted CA certificates that can appear in a chain.

=end original

検証の最大深さをdepthに設定します。
これは、チェーン内に表示できる信頼できないCA証明書の最大数です。
(TBR)

 Net::SSLeay::X509_VERIFY_PARAM_set_depth($param, $depth);
 # $param - value corresponding to openssl's X509_VERIFY_PARAM structure
 # $depth - (integer) depth to be set
 #
 # returns: no return value

=begin original

Check openssl doc L<http://www.openssl.org/docs/crypto/X509_VERIFY_PARAM_set_flags.html|http://www.openssl.org/docs/crypto/X509_VERIFY_PARAM_set_flags.html>

=end original

openssl doc L<http://www.openssl.org/docs/crypto/X509_VERIFY_PARAM_set_flags.html|http://www.openssl.org/docs/crypto/X509_VERIFY_PARAM_set_flags.html>を確認します。
(TBR)

=item * X509_VERIFY_PARAM_set_purpose

=begin original

Sets the verification purpose in $param to $purpose. This determines the acceptable purpose
of the certificate chain, for example SSL client or SSL server.

=end original

$paramの検証目的を$purposeに設定します。
これにより、SSLクライアントやSSLサーバーなど、証明書チェーンの受け入れ可能な目的が決定されます。
(TBR)

 my $rv = Net::SSLeay::X509_VERIFY_PARAM_set_purpose($param, $purpose);
 # $param - value corresponding to openssl's X509_VERIFY_PARAM structure
 # $purpose - (integer) purpose identifier
 #
 # returns: 1 on success, 0 on failure

=begin original

For more details about $purpose identifier check L</CTX_set_purpose>.

=end original

$purpose identifier check L</CTX_set_purpose>の詳細については、を参照してください。
(TBR)

=begin original

Check openssl doc L<http://www.openssl.org/docs/crypto/X509_VERIFY_PARAM_set_flags.html|http://www.openssl.org/docs/crypto/X509_VERIFY_PARAM_set_flags.html>

=end original

openssl doc L<http://www.openssl.org/docs/crypto/X509_VERIFY_PARAM_set_flags.html|http://www.openssl.org/docs/crypto/X509_VERIFY_PARAM_set_flags.html>を確認します。
(TBR)

=item * X509_VERIFY_PARAM_set_time

=begin original

Sets the verification time in $param to $t. Normally the current time is used.

=end original

$paramの検証時間を$tに設定します。
通常は、現在の時間が使用されます。
(TBR)

 Net::SSLeay::X509_VERIFY_PARAM_set_time($param, $t);
 # $param - value corresponding to openssl's X509_VERIFY_PARAM structure
 # $t - (time_t) time in seconds since 1.1.1970
 #
 # returns: no return value

=begin original

Check openssl doc L<http://www.openssl.org/docs/crypto/X509_VERIFY_PARAM_set_flags.html|http://www.openssl.org/docs/crypto/X509_VERIFY_PARAM_set_flags.html>

=end original

openssl doc L<http://www.openssl.org/docs/crypto/X509_VERIFY_PARAM_set_flags.html|http://www.openssl.org/docs/crypto/X509_VERIFY_PARAM_set_flags.html>を確認します。
(TBR)

=item * X509_VERIFY_PARAM_set_trust

=begin original

Sets the trust setting in $param to $trust.

=end original

$paramの信頼設定を$trustに設定します。
(TBR)

 my $rv = Net::SSLeay::X509_VERIFY_PARAM_set_trust($param, $trust);
 # $param - value corresponding to openssl's X509_VERIFY_PARAM structure
 # $trust - (integer) trust identifier
 #
 # returns: 1 on success, 0 on failure

=begin original

For more details about $trust identifier check L</CTX_set_trust>.

=end original

$trust identifier check L</CTX_set_trust>の詳細については、こちらを参照してください。
(TBR)

=begin original

Check openssl doc L<http://www.openssl.org/docs/crypto/X509_VERIFY_PARAM_set_flags.html|http://www.openssl.org/docs/crypto/X509_VERIFY_PARAM_set_flags.html>

=end original

openssl doc L<http://www.openssl.org/docs/crypto/X509_VERIFY_PARAM_set_flags.html|http://www.openssl.org/docs/crypto/X509_VERIFY_PARAM_set_flags.html>を確認します。
(TBR)

=item * X509_VERIFY_PARAM_table_cleanup

=begin original

??? (more info needed)

=end original

(詳細情報が必要)
(TBR)

 Net::SSLeay::X509_VERIFY_PARAM_table_cleanup();
 #
 # returns: no return value

=back

=head3 Low level API: Cipher (EVP_CIPHER_*) related functions

=over

=item * EVP_get_cipherbyname

=begin original

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before

=end original

B<COMPATIBILITY:>は、Net-SSLeay-1.45以前では使用できません。
(TBR)

=begin original

Returns an EVP_CIPHER structure when passed a cipher name.

=end original

暗号名を渡すと、EVP_CIPHER構造体を返します。
(TBR)

 my $rv = Net::SSLeay::EVP_get_cipherbyname($name);
 # $name - (string) cipher name e.g. 'aes-128-cbc', 'camellia-256-ecb', 'des-ede', ...
 #
 # returns: value corresponding to openssl's EVP_CIPHER structure

=begin original

Check openssl doc L<http://www.openssl.org/docs/crypto/EVP_EncryptInit.html|http://www.openssl.org/docs/crypto/EVP_EncryptInit.html>

=end original

openssl doc L<http://www.openssl.org/docs/crypto/EVP_EncryptInit.html|http://www.openssl.org/docs/crypto/EVP_EncryptInit.html>を確認します。
(TBR)

=back

=head3 Low level API: Digest (EVP_MD_*) related functions

=over

=item * OpenSSL_add_all_digests

=begin original

B<COMPATIBILITY:> not available in Net-SSLeay-1.42 and before

=end original

B<COMPATIBILITY:>は、Net-SSLeay-1.42以前では使用できません。
(TBR)

 Net::SSLeay::OpenSSL_add_all_digests();
 # no args, no return value

=begin original

http://www.openssl.org/docs/crypto/OpenSSL_add_all_algorithms.html

=end original

http://www.openssl.org/docs/crypto/OpenSSL_add_all_algorithms.html(英語)
(TBR)

=item * P_EVP_MD_list_all

=begin original

B<COMPATIBILITY:> not available in Net-SSLeay-1.42 and before; requires at least openssl-1.0.0

=end original

B<COMPATIBILITY:>Net-SSLeay-1.42以前では使用できません。
少なくともopenssl-1.0.0が必要です。
(TBR)

=begin original

B<NOTE:> Does not exactly correspond to any low level API function

=end original

B<注意:>下位レベルのAPI関数には正確に対応していません
(TBR)

 my $rv = Net::SSLeay::P_EVP_MD_list_all();
 #
 # returns: arrayref - list of available digest names

=begin original

The returned digest names correspond to values expected by L</EVP_get_digestbyname>.

=end original

戻されたダイジェスト名は、L</EVP_get_digestbyname>によって予期される値に対応します。
(TBR)

=begin original

Note that some of the digets are available by default and some only after calling L</OpenSSL_add_all_digests>.

=end original

デフォルトで使用できるdigetもあれば、L</OpenSSL_add_all_digests>の呼び出し後にのみ使用できるdigetもあります。
(TBR)

=item * EVP_get_digestbyname

=begin original

B<COMPATIBILITY:> not available in Net-SSLeay-1.42 and before

=end original

B<COMPATIBILITY:>は、Net-SSLeay-1.42以前では使用できません。
(TBR)

 my $rv = Net::SSLeay::EVP_get_digestbyname($name);
 # $name - string with digest name
 #
 # returns: value corresponding to openssl's EVP_MD structure

=begin original

The $name param can be:

=end original

$nameパラメータには次の値を指定できます。
(TBR)

 md2
 md4
 md5
 mdc2
 ripemd160
 sha
 sha1
 sha224
 sha256
 sha512
 whirlpool

=begin original

Or better check the supported digests by calling L</P_EVP_MD_list_all>.

=end original

または、L</P_EVP_MD_list_all>を呼び出して、サポートされているダイジェストを確認してください。
(TBR)

=item * EVP_MD_type

=begin original

B<COMPATIBILITY:> not available in Net-SSLeay-1.42 and before

=end original

B<COMPATIBILITY:>は、Net-SSLeay-1.42以前では使用できません。
(TBR)

 my $rv = Net::SSLeay::EVP_MD_type($md);
 # $md - value corresponding to openssl's EVP_MD structure
 #
 # returns: the NID (integer) of the OBJECT IDENTIFIER representing the given message digest

=item * EVP_MD_size

=begin original

B<COMPATIBILITY:> not available in Net-SSLeay-1.42 and before

=end original

B<COMPATIBILITY:>は、Net-SSLeay-1.42以前では使用できません。
(TBR)

 my $rv = Net::SSLeay::EVP_MD_size($md);
 # $md - value corresponding to openssl's EVP_MD structure
 #
 # returns: the size of the message digest in bytes (e.g. 20 for SHA1)

=item * EVP_MD_CTX_md

=begin original

B<COMPATIBILITY:> not available in Net-SSLeay-1.42 and before; requires at least openssl-0.9.7

=end original

B<COMPATIBILITY:>Net-SSLeay-1.42以前では使用できません。
少なくともopenssl-0.9.7が必要です。
(TBR)

 Net::SSLeay::EVP_MD_CTX_md($ctx);
 # $ctx - value corresponding to openssl's EVP_MD_CTX structure
 #
 # returns: value corresponding to openssl's EVP_MD structure

=item * EVP_MD_CTX_create

=begin original

B<COMPATIBILITY:> not available in Net-SSLeay-1.42 and before; requires at least openssl-0.9.7

=end original

B<COMPATIBILITY:>Net-SSLeay-1.42以前では使用できません。
少なくともopenssl-0.9.7が必要です。
(TBR)

=begin original

Allocates, initializes and returns a digest context.

=end original

ダイジェストコンテキストを割り当て、初期化し、返します。
(TBR)

 my $rv = Net::SSLeay::EVP_MD_CTX_create();
 #
 # returns: value corresponding to openssl's EVP_MD_CTX structure

=begin original

The complete idea behind EVP_MD_CTX looks like this example:

=end original

EVP_MD_CTXの背後にある完全な概念は、次の例のようになります。
(TBR)

  Net::SSLeay::OpenSSL_add_all_digests();

  my $md = Net::SSLeay::EVP_get_digestbyname("sha1");
  my $ctx = Net::SSLeay::EVP_MD_CTX_create();
  Net::SSLeay::EVP_DigestInit($ctx, $md);

  while(my $chunk = get_piece_of_data()) {
    Net::SSLeay::EVP_DigestUpdate($ctx,$chunk);
  }

  my $result = Net::SSLeay::EVP_DigestFinal($ctx);
  Net::SSLeay::EVP_MD_CTX_destroy($ctx);

  print "digest=", unpack('H*', $result), "\n"; #print hex value

=item * EVP_DigestInit_ex

=begin original

B<COMPATIBILITY:> not available in Net-SSLeay-1.42 and before; requires at least openssl-0.9.7

=end original

B<COMPATIBILITY:>Net-SSLeay-1.42以前では使用できません。
少なくともopenssl-0.9.7が必要です。
(TBR)

=begin original

Sets up digest context $ctx to use a digest $type from ENGINE $impl, $ctx must be
initialized before calling this function, type will typically be supplied by a function
such as L</EVP_get_digestbyname>. If $impl is 0 then the default implementation of digest $type is used.

=end original

ENGINE$implのdigest$typeを使用するようにdigestコンテキスト$ctxを設定します。
$ctxはこの関数を呼び出す前に初期化する必要があります。
typeは通常、L</EVP_get_digestbyname>などの関数によって指定されます。
$implが0の場合、digest$typeのデフォルトの実装が使用されます。
(TBR)

 my $rv = Net::SSLeay::EVP_DigestInit_ex($ctx, $type, $impl);
 # $ctx  - value corresponding to openssl's EVP_MD_CTX structure
 # $type - value corresponding to openssl's EVP_MD structure
 # $impl - value corresponding to openssl's ENGINE structure
 #
 # returns: 1 for success and 0 for failure

=item * EVP_DigestInit

=begin original

B<COMPATIBILITY:> not available in Net-SSLeay-1.42 and before; requires at least openssl-0.9.7

=end original

B<COMPATIBILITY:>Net-SSLeay-1.42以前では使用できません。
少なくともopenssl-0.9.7が必要です。
(TBR)

=begin original

Behaves in the same way as L</EVP_DigestInit_ex> except the passed context $ctx does not have
to be initialized, and it always uses the default digest implementation.

=end original

L</EVP_DigestInit_ex>と同じように動作しますが、渡されたコンテキスト$ctxを初期化する必要はなく、常にデフォルトのダイジェスト実装を使用します。
(TBR)

 my $rv = Net::SSLeay::EVP_DigestInit($ctx, $type);
 # $ctx - value corresponding to openssl's EVP_MD_CTX structure
 # $type - value corresponding to openssl's EVP_MD structure
 #
 # returns: 1 for success and 0 for failure

=item * EVP_MD_CTX_destroy

=begin original

B<COMPATIBILITY:> not available in Net-SSLeay-1.42 and before; requires at least openssl-0.9.7

=end original

B<COMPATIBILITY:>Net-SSLeay-1.42以前では使用できません。
少なくともopenssl-0.9.7が必要です。
(TBR)

=begin original

Cleans up digest context $ctx and frees up the space allocated to it, it should be
called only on a context created using L</EVP_MD_CTX_create>.

=end original

ダイジェストコンテキスト$ctxをクリーンアップし、割り当てられた領域を解放します。
この関数は、L</EVP_MD_CTX_create>を使用して作成されたコンテキストでのみ呼び出す必要があります。
(TBR)

 Net::SSLeay::EVP_MD_CTX_destroy($ctx);
 # $ctx - value corresponding to openssl's EVP_MD_CTX structure
 #
 # returns: no return value

=item * EVP_DigestUpdate

=begin original

B<COMPATIBILITY:> not available in Net-SSLeay-1.42 and before; requires at least openssl-0.9.7

=end original

B<COMPATIBILITY:>Net-SSLeay-1.42以前では使用できません。
少なくともopenssl-0.9.7が必要です。
(TBR)

 my $rv = Net::SSLeay::EVP_DigestUpdate($ctx, $data);
 # $ctx  - value corresponding to openssl's EVP_MD_CTX structure
 # $data - data to be hashed
 #
 # returns: 1 for success and 0 for failure

=item * EVP_DigestFinal_ex

=begin original

B<COMPATIBILITY:> not available in Net-SSLeay-1.42 and before; requires at least openssl-0.9.7

=end original

B<COMPATIBILITY:>Net-SSLeay-1.42以前では使用できません。
少なくともopenssl-0.9.7が必要です。
(TBR)

=begin original

Retrieves the digest value from $ctx. After calling L</EVP_DigestFinal_ex> no
additional calls to L</EVP_DigestUpdate> can be made, but
L</EVP_DigestInit_ex> can be called to initialize a new digest operation.

=end original

$ctxからダイジェスト値を取得します。
L</EVP_DigestFinal_ex>を呼び出した後は、L</EVP_DigestUpdate>を追加で呼び出すことはできませんが、L</EVP_DigestInit_ex>を呼び出して新しいダイジェスト操作を初期化できます。
(TBR)

 my $digest_value = Net::SSLeay::EVP_DigestFinal_ex($ctx);
 # $ctx - value corresponding to openssl's EVP_MD_CTX structure
 #
 # returns: hash value (binary)

 #to get printable (hex) value of digest use:
 print unpack('H*', $digest_value);

=item * EVP_DigestFinal

=begin original

B<COMPATIBILITY:> not available in Net-SSLeay-1.42 and before; requires at least openssl-0.9.7

=end original

B<COMPATIBILITY:>Net-SSLeay-1.42以前では使用できません。
少なくともopenssl-0.9.7が必要です。
(TBR)

=begin original

Similar to L</EVP_DigestFinal_ex> except the digest context ctx is automatically cleaned up.

=end original

L</EVP_DigestFinal_ex>と似ていますが、ダイジェストコンテキストctxが自動的にクリーンアップされる点が異なります。
(TBR)

 my $rv = Net::SSLeay::EVP_DigestFinal($ctx);
 # $ctx - value corresponding to openssl's EVP_MD_CTX structure
 #
 # returns: hash value (binary)

 #to get printable (hex) value of digest use:
 print unpack('H*', $digest_value);

=item * MD2

=begin original

B<COMPATIBILITY:> no supported by default in openssl-1.0.0

=end original

B<COMPATIBILITY:>openssl-1.0.0ではデフォルトでサポートされていません。
(TBR)

=begin original

Computes MD2 from given $data (all data needs to be loaded into memory)

=end original

指定された$dataからMD2を計算します(すべてのデータをメモリにロードする必要があります)。
(TBR)

 my $digest = Net::SSLeay::MD2($data);
 print "digest(hexadecimal)=", unpack('H*', $digest);

=item * MD4

=begin original

Computes MD4 from given $data (all data needs to be loaded into memory)

=end original

指定された$dataからMD4を計算します(すべてのデータをメモリにロードする必要があります)。
(TBR)

 my $digest = Net::SSLeay::MD4($data);
 print "digest(hexadecimal)=", unpack('H*', $digest);

=item * MD5

=begin original

Computes MD5 from given $data (all data needs to be loaded into memory)

=end original

指定された$dataからMD5を計算します(すべてのデータをメモリにロードする必要があります)。
(TBR)

 my $digest = Net::SSLeay::MD5($data);
 print "digest(hexadecimal)=", unpack('H*', $digest);

=item * RIPEMD160

=begin original

Computes RIPEMD160 from given $data (all data needs to be loaded into memory)

=end original

指定された$dataからRIPEMD160を計算します(すべてのデータをメモリにロードする必要があります)。
(TBR)

 my $digest = Net::SSLeay::RIPEMD160($data);
 print "digest(hexadecimal)=", unpack('H*', $digest);

=item * SHA1

=begin original

B<COMPATIBILITY:> not available in Net-SSLeay-1.42 and before

=end original

B<COMPATIBILITY:>は、Net-SSLeay-1.42以前では使用できません。
(TBR)

=begin original

Computes SHA1 from given $data (all data needs to be loaded into memory)

=end original

指定された$dataからSHA1を計算します(すべてのデータをメモリにロードする必要があります)。
(TBR)

 my $digest = Net::SSLeay::SHA1($data);
 print "digest(hexadecimal)=", unpack('H*', $digest);

=item * SHA256

=begin original

B<COMPATIBILITY:> not available in Net-SSLeay-1.42 and before; requires at least openssl-0.9.8

=end original

B<COMPATIBILITY:>Net-SSLeay-1.42以前では使用できません。
少なくともopenssl-0.9.8が必要です。
(TBR)

=begin original

Computes SHA256 from given $data (all data needs to be loaded into memory)

=end original

指定された$dataからSHA256を計算します(すべてのデータをメモリにロードする必要があります)。
(TBR)

 my $digest = Net::SSLeay::SHA256($data);
 print "digest(hexadecimal)=", unpack('H*', $digest);

=item * SHA512

=begin original

B<COMPATIBILITY:> not available in Net-SSLeay-1.42 and before; requires at least openssl-0.9.8

=end original

B<COMPATIBILITY:>Net-SSLeay-1.42以前では使用できません。
少なくともopenssl-0.9.8が必要です。
(TBR)

=begin original

Computes SHA512 from given $data (all data needs to be loaded into memory)

=end original

指定された$dataからSHA512を計算します(すべてのデータをメモリにロードする必要があります)。
(TBR)

 my $digest = Net::SSLeay::SHA512($data);
 print "digest(hexadecimal)=", unpack('H*', $digest);

=item * EVP_Digest

=begin original

B<COMPATIBILITY:> not available in Net-SSLeay-1.42 and before; requires at least openssl-0.9.7

=end original

B<COMPATIBILITY:>Net-SSLeay-1.42以前では使用できません。
少なくともopenssl-0.9.7が必要です。
(TBR)

=begin original

Computes "any" digest from given $data (all data needs to be loaded into memory)

=end original

指定された$dataから「任意の」ダイジェストを計算します(すべてのデータをメモリにロードする必要があります)。
(TBR)

 my $md = Net::SSLeay::EVP_get_digestbyname("sha1"); #or any other algorithm
 my $digest = Net::SSLeay::EVP_Digest($data, $md);
 print "digest(hexadecimal)=", unpack('H*', $digest);

=item * EVP_sha1

=begin original

B<COMPATIBILITY:> not available in Net-SSLeay-1.42 and before

=end original

B<COMPATIBILITY:>は、Net-SSLeay-1.42以前では使用できません。
(TBR)

 my $md = Net::SSLeay::EVP_sha1();
 #
 # returns: value corresponding to openssl's EVP_MD structure

=item * EVP_sha256

=begin original

B<COMPATIBILITY:> requires at least openssl-0.9.8

=end original

B<COMPATIBILITY:>には少なくともopenssl-0.9.8が必要です。
(TBR)

 my $md = Net::SSLeay::EVP_sha256();
 #
 # returns: value corresponding to openssl's EVP_MD structure

=item * EVP_sha512

=begin original

B<COMPATIBILITY:> not available in Net-SSLeay-1.42 and before; requires at least openssl-0.9.8

=end original

B<COMPATIBILITY:>Net-SSLeay-1.42以前では使用できません。
少なくともopenssl-0.9.8が必要です。
(TBR)

 my $md = Net::SSLeay::EVP_sha512();
 #
 # returns: value corresponding to openssl's EVP_MD structure

=item * EVP_add_digest

 my $rv = Net::SSLeay::EVP_add_digest($digest);
 # $digest - value corresponding to openssl's EVP_MD structure
 #
 # returns: 1 on success, 0 otherwise

=back

=head3 Low level API: CIPHER_* related functions

=over

=item * CIPHER_get_name

=begin original

B<COMPATIBILITY:> not available in Net-SSLeay-1.42 and before

=end original

B<COMPATIBILITY:>は、Net-SSLeay-1.42以前では使用できません。
(TBR)

=begin original

Returns name of the cipher used.

=end original

使用された暗号の名前を返します。
(TBR)

 my $rv = Net::SSLeay::CIPHER_description($cipher);
 # $cipher - value corresponding to openssl's SSL_CIPHER structure
 #
 # returns: (string) cipher name e.g. 'DHE-RSA-AES256-SHA'

=begin original

Check openssl doc L<http://www.openssl.org/docs/ssl/SSL_CIPHER_get_name.html|http://www.openssl.org/docs/ssl/SSL_CIPHER_get_name.html>

=end original

openssl doc L<http://www.openssl.org/docs/ssl/SSL_CIPHER_get_name.html|http://www.openssl.org/docs/ssl/SSL_CIPHER_get_name.html>を確認します。
(TBR)

=begin original

Example:

=end original

例:
(TBR)

 my $ssl_cipher = Net::SSLeay::get_current_cipher($ssl);
 my $cipher_name = Net::SSLeay::CIPHER_get_name($ssl_cipher);

=item * CIPHER_description

=begin original

Returns a textual description of the cipher used.

=end original

使用された暗号のテキスト記述を返します。
(TBR)

=begin original

??? (does this function really work?)

=end original

(この関数は本当に動作しますか?)
(TBR)

 my $rv = Net::SSLeay::CIPHER_description($cipher, $buf, $size);
 # $cipher - value corresponding to openssl's SSL_CIPHER structure
 # $bufer - (string/buffer) ???
 # $size - (integer) ???
 #
 # returns: (string) cipher description e.g. 'DHE-RSA-AES256-SHA SSLv3 Kx=DH Au=RSA Enc=AES(256) Mac=SHA1'

=begin original

Check openssl doc L<http://www.openssl.org/docs/ssl/SSL_CIPHER_get_name.html|http://www.openssl.org/docs/ssl/SSL_CIPHER_get_name.html>

=end original

openssl doc L<http://www.openssl.org/docs/ssl/SSL_CIPHER_get_name.html|http://www.openssl.org/docs/ssl/SSL_CIPHER_get_name.html>を確認します。
(TBR)

=item * CIPHER_get_bits

=begin original

Returns the number of secret bits used for cipher.

=end original

暗号化に使用される秘密ビットの数を返します。
(TBR)

 my $rv = Net::SSLeay::CIPHER_get_bits($c);
 # $c - value corresponding to openssl's SSL_CIPHER structure
 #
 # returns: (integert) number of secret bits, 0 on error

=begin original

Check openssl doc L<http://www.openssl.org/docs/ssl/SSL_CIPHER_get_name.html|http://www.openssl.org/docs/ssl/SSL_CIPHER_get_name.html>

=end original

openssl doc L<http://www.openssl.org/docs/ssl/SSL_CIPHER_get_name.html|http://www.openssl.org/docs/ssl/SSL_CIPHER_get_name.html>を確認します。
(TBR)

=back

=head3 Low level API: RSA_* related functions

=over

=item * RSA_generate_key

=begin original

Generates a key pair and returns it in a newly allocated RSA structure.
The pseudo-random number generator must be seeded prior to calling RSA_generate_key.

=end original

キーペアを生成し、新しく割り当てられたRSA構造に戻します。
RSA_generate_keyを呼び出す前に、擬似乱数ジェネレータをシードする必要があります。
(TBR)

 my $rv = Net::SSLeay::RSA_generate_key($bits, $e, $perl_cb, $perl_cb_arg);
 # $bits - (integer) modulus size in bits e.g. 512, 1024, 2048
 # $e - (integer) public exponent, an odd number, typically 3, 17 or 65537
 # $perl_cb - [optional] reference to perl callback function
 # $perl_cb_arg - [optional] data that will be passed to callback function when invoked
 #
 # returns: value corresponding to openssl's RSA structure (0 on failure)

=begin original

Check openssl doc L<http://www.openssl.org/docs/crypto/RSA_generate_key.html|http://www.openssl.org/docs/crypto/RSA_generate_key.html>

=end original

openssl doc L<http://www.openssl.org/docs/crypto/RSA_generate_key.html|http://www.openssl.org/docs/crypto/RSA_generate_key.html>を確認します。
(TBR)

=item * RSA_free

=begin original

Frees the RSA structure and its components. The key is erased before the memory is returned to the system.

=end original

RSA構造とそのコンポーネントを解放します。
キーは、メモリがシステムに戻される前に消去されます。
(TBR)

 Net::SSLeay::RSA_free($r);
 # $r - value corresponding to openssl's RSA structure
 #
 # returns: no return value

=begin original

Check openssl doc L<http://www.openssl.org/docs/crypto/RSA_new.html|http://www.openssl.org/docs/crypto/RSA_new.html>

=end original

openssl doc L<http://www.openssl.org/docs/crypto/RSA_new.html|http://www.openssl.org/docs/crypto/RSA_new.html>を確認します。
(TBR)

=back

=head3 Low level API: BIO_* related functions

=over

=item * BIO_eof

=begin original

Returns 1 if the BIO has read EOF, the precise meaning of 'EOF' varies according to the BIO type.

=end original

BIOがEOFを読み取った場合は1を返します。
「EOF」の正確な意味はBIOの種類によって異なります。
(TBR)

 my $rv = Net::SSLeay::BIO_eof($s);
 # $s - value corresponding to openssl's BIO structure
 #
 # returns: 1 if EOF has been reached 0 otherwise

=begin original

Check openssl doc L<http://www.openssl.org/docs/crypto/BIO_ctrl.html|http://www.openssl.org/docs/crypto/BIO_ctrl.html>

=end original

openssl doc L<http://www.openssl.org/docs/crypto/BIO_ctrl.html|http://www.openssl.org/docs/crypto/BIO_ctrl.html>を確認します。
(TBR)

=item * BIO_f_ssl

=begin original

Returns the SSL BIO method. This is a filter BIO which is a wrapper
round the OpenSSL SSL routines adding a BIO 'flavour' to SSL I/O.

=end original

SSL BIOメソッドを戻します。
これは、SSL I/OにBIO'flavor'を追加するOpenSSL SSLルーチンのラッパーであるフィルタBIOです。
(TBR)

 my $rv = Net::SSLeay::BIO_f_ssl();
 #
 # returns: value corresponding to openssl's BIO_METHOD structure (0 on failure)

=begin original

Check openssl doc L<http://www.openssl.org/docs/crypto/BIO_f_ssl.html|http://www.openssl.org/docs/crypto/BIO_f_ssl.html>

=end original

openssl doc L<http://www.openssl.org/docs/crypto/BIO_f_ssl.html|http://www.openssl.org/docs/crypto/BIO_f_ssl.html>を確認します。
(TBR)

=item * BIO_free

=begin original

Frees up a single BIO.

=end original

1つのBIOを解放します。
(TBR)

 my $rv = Net::SSLeay::BIO_free($bio;);
 # $bio; - value corresponding to openssl's BIO structure
 #
 # returns: 1 on success, 0 on failure

=begin original

Check openssl doc L<http://www.openssl.org/docs/crypto/BIO_new.html|http://www.openssl.org/docs/crypto/BIO_new.html>

=end original

openssl doc L<http://www.openssl.org/docs/crypto/BIO_new.html|http://www.openssl.org/docs/crypto/BIO_new.html>を確認します。
(TBR)

=item * BIO_new

=begin original

Returns a new BIO using method $type

=end original

メソッド$typeを使用して新しいBIOを返します。
(TBR)

 my $rv = Net::SSLeay::BIO_new($type);
 # $type - value corresponding to openssl's BIO_METHOD structure
 #
 # returns: value corresponding to openssl's BIO structure (0 on failure)

=begin original

Check openssl doc L<http://www.openssl.org/docs/crypto/BIO_new.html|http://www.openssl.org/docs/crypto/BIO_new.html>

=end original

openssl doc L<http://www.openssl.org/docs/crypto/BIO_new.html|http://www.openssl.org/docs/crypto/BIO_new.html>を確認します。
(TBR)

=item * BIO_new_buffer_ssl_connect

=begin original

Creates a new BIO chain consisting of a buffering BIO, an SSL BIO (using ctx) and a connect BIO.

=end original

バッファリングBIO、SSL BIO(ctxを使用)、および接続BIOで構成される新しいBIOチェーンを作成します。
(TBR)

 my $rv = Net::SSLeay::BIO_new_buffer_ssl_connect($ctx);
 # $ctx - value corresponding to openssl's SSL_CTX structure
 #
 # returns: value corresponding to openssl's BIO structure (0 on failure)

=begin original

Check openssl doc L<http://www.openssl.org/docs/crypto/BIO_f_ssl.html|http://www.openssl.org/docs/crypto/BIO_f_ssl.html>

=end original

openssl doc L<http://www.openssl.org/docs/crypto/BIO_f_ssl.html|http://www.openssl.org/docs/crypto/BIO_f_ssl.html>を確認します。
(TBR)

=item * BIO_new_file

=begin original

Creates a new file BIO with mode mode the meaning of mode is the same
as the stdio function fopen(). The BIO_CLOSE flag is set on the returned BIO.

=end original

モードmodeで新しいファイルBIOを作成します。
modeの意味はstdio関数fopen()と同じです。
BIO_CLOSEフラグは、戻されたBIOに設定されます。
(TBR)

 my $rv = Net::SSLeay::BIO_new_file($filename, $mode);
 # $filename - (string) filename
 # $mode - (string) opening mode (as mode by stdio function fopen)
 #
 # returns: value corresponding to openssl's BIO structure (0 on failure)

=begin original

Check openssl doc L<http://www.openssl.org/docs/crypto/BIO_s_file.html|http://www.openssl.org/docs/crypto/BIO_s_file.html>

=end original

openssl doc L<http://www.openssl.org/docs/crypto/BIO_s_file.html|http://www.openssl.org/docs/crypto/BIO_s_file.html>を確認します。
(TBR)

=item * BIO_new_ssl

=begin original

Allocates an SSL BIO using SSL_CTX ctx and using client mode if client is non zero.

=end original

SSL_CTX ctxを使用し、クライアントがゼロ以外の場合はクライアントモードを使用して、SSL BIOを割り振ります。
(TBR)

 my $rv = Net::SSLeay::BIO_new_ssl($ctx, $client);
 # $ctx - value corresponding to openssl's SSL_CTX structure
 # $client - (integer) 0 or 1 - indicates ssl client mode
 #
 # returns: value corresponding to openssl's BIO structure (0 on failure)

=begin original

Check openssl doc L<http://www.openssl.org/docs/crypto/BIO_f_ssl.html|http://www.openssl.org/docs/crypto/BIO_f_ssl.html>

=end original

openssl doc L<http://www.openssl.org/docs/crypto/BIO_f_ssl.html|http://www.openssl.org/docs/crypto/BIO_f_ssl.html>を確認します。
(TBR)

=item * BIO_new_ssl_connect

=begin original

Creates a new BIO chain consisting of an SSL BIO (using ctx) followed by a connect BIO.

=end original

SSL BIO(ctxを使用)とそれに続くconnect BIOで構成される新しいBIOチェーンを作成します。
(TBR)

 my $rv = Net::SSLeay::BIO_new_ssl_connect($ctx);
 # $ctx - value corresponding to openssl's SSL_CTX structure
 #
 # returns: value corresponding to openssl's BIO structure (0 on failure)

=begin original

Check openssl doc L<http://www.openssl.org/docs/crypto/BIO_f_ssl.html|http://www.openssl.org/docs/crypto/BIO_f_ssl.html>

=end original

openssl doc L<http://www.openssl.org/docs/crypto/BIO_f_ssl.html|http://www.openssl.org/docs/crypto/BIO_f_ssl.html>を確認します。
(TBR)

=item * BIO_pending

=begin original

Return the number of pending characters in the BIOs read buffers.

=end original

BIOs読み込みバッファ内の保留文字数を返します。
(TBR)

 my $rv = Net::SSLeay::BIO_pending($s);
 # $s - value corresponding to openssl's BIO structure
 #
 # returns: the amount of pending data

=begin original

Check openssl doc L<http://www.openssl.org/docs/crypto/BIO_ctrl.html|http://www.openssl.org/docs/crypto/BIO_ctrl.html>

=end original

openssl doc L<http://www.openssl.org/docs/crypto/BIO_ctrl.html|http://www.openssl.org/docs/crypto/BIO_ctrl.html>を確認します。
(TBR)

=item * BIO_wpending

=begin original

Return the number of pending characters in the BIOs write buffers.

=end original

BIOs書き込みバッファ内の保留中の文字数を返します。
(TBR)

 my $rv = Net::SSLeay::BIO_wpending($s);
 # $s - value corresponding to openssl's BIO structure
 #
 # returns: the amount of pending data

=begin original

Check openssl doc L<http://www.openssl.org/docs/crypto/BIO_ctrl.html|http://www.openssl.org/docs/crypto/BIO_ctrl.html>

=end original

openssl doc L<http://www.openssl.org/docs/crypto/BIO_ctrl.html|http://www.openssl.org/docs/crypto/BIO_ctrl.html>を確認します。
(TBR)

=item * BIO_read

=begin original

Read the underlying descriptor.

=end original

基礎となる記述子を読み取ります。
(TBR)

 Net::SSLeay::BIO_read($s, $max);
 # $s - value corresponding to openssl's BIO structure
 # $max - [optional] max. bytes to read (if not specified, the value 32768 is used)
 #
 # returns: data

=begin original

Check openssl doc L<http://www.openssl.org/docs/crypto/BIO_read.html|http://www.openssl.org/docs/crypto/BIO_read.html>

=end original

openssl doc L<http://www.openssl.org/docs/crypto/BIO_read.html|http://www.openssl.org/docs/crypto/BIO_read.html>を確認します。
(TBR)

=item * BIO_write

=begin original

Attempts to write data from $buffer to BIO $b.

=end original

$bufferからBIO$bにデータを書き込もうとします。
(TBR)

 my $rv = Net::SSLeay::BIO_write($b, $buffer);
 # $b - value corresponding to openssl's BIO structure
 # $buffer - data
 #
 # returns: amount of data successfully written
 #          or that no data was successfully read or written if the result is 0 or -1
 #          or -2 when the operation is not implemented in the specific BIO type

=begin original

Check openssl doc L<http://www.openssl.org/docs/crypto/BIO_read.html|http://www.openssl.org/docs/crypto/BIO_read.html>

=end original

openssl doc L<http://www.openssl.org/docs/crypto/BIO_read.html|http://www.openssl.org/docs/crypto/BIO_read.html>を確認します。
(TBR)

=item * BIO_s_mem

=begin original

Return the memory BIO method function.

=end original

メモリのBIOメソッド関数を返します。
(TBR)

 my $rv = Net::SSLeay::BIO_s_mem();
 #
 # returns: value corresponding to openssl's BIO_METHOD structure (0 on failure)

=begin original

Check openssl doc L<http://www.openssl.org/docs/crypto/BIO_s_mem.html|http://www.openssl.org/docs/crypto/BIO_s_mem.html>

=end original

openssl doc L<http://www.openssl.org/docs/crypto/BIO_s_mem.html|http://www.openssl.org/docs/crypto/BIO_s_mem.html>を確認します。
(TBR)

=item * BIO_ssl_copy_session_id

=begin original

Copies an SSL session id between BIO chains from and to. It does this by locating
the SSL BIOs in each chain and calling SSL_copy_session_id() on the internal SSL pointer.

=end original

BIOチェーン間のSSLセッションIDをからにコピーします。
これは、各チェーン内のSSL BIOsを特定し、内部SSLポインタでSSL_copy_session_id()をコールすることによって行われます。
(TBR)

 my $rv = Net::SSLeay::BIO_ssl_copy_session_id($to, $from);
 # $to - value corresponding to openssl's BIO structure
 # $from - value corresponding to openssl's BIO structure
 #
 # returns: 1 on success, 0 on failure

=begin original

Check openssl doc L<http://www.openssl.org/docs/crypto/BIO_f_ssl.html|http://www.openssl.org/docs/crypto/BIO_f_ssl.html>

=end original

openssl doc L<http://www.openssl.org/docs/crypto/BIO_f_ssl.html|http://www.openssl.org/docs/crypto/BIO_f_ssl.html>を確認します。
(TBR)

=item * BIO_ssl_shutdown

=begin original

Closes down an SSL connection on BIO chain bio. It does this by locating the
SSL BIO in the chain and calling SSL_shutdown() on its internal SSL pointer.

=end original

BIOチェーンbio上のSSL接続をクローズします。
これは、チェーン内のSSL BIOを特定し、内部SSLポインタでSSL_shutdown()をコールすることによって行います。
(TBR)

 Net::SSLeay::BIO_ssl_shutdown($ssl_bio);
 # $ssl_bio - value corresponding to openssl's BIO structure
 #
 # returns: no return value

=begin original

Check openssl doc L<http://www.openssl.org/docs/crypto/BIO_f_ssl.html|http://www.openssl.org/docs/crypto/BIO_f_ssl.html>

=end original

openssl doc L<http://www.openssl.org/docs/crypto/BIO_f_ssl.html|http://www.openssl.org/docs/crypto/BIO_f_ssl.html>を確認します。
(TBR)

=back

=head3 Low level API: NPN (next protocol negotiation) related functions

=begin original

Simple approach for using NPN support looks like this:

=end original

NPNサポートを使用する簡単な方法は次のようになります。
(TBR)

 ### client side
 use Net::SSLeay;
 use IO::Socket::INET;
 
 Net::SSLeay::initialize();
 my $sock = IO::Socket::INET->new(PeerAddr=>'encrypted.google.com:443') or die;
 my $ctx = Net::SSLeay::CTX_tlsv1_new() or die;
 Net::SSLeay::CTX_set_options($ctx, &Net::SSLeay::OP_ALL);
 Net::SSLeay::CTX_set_next_proto_select_cb($ctx, ['http1.1','spdy/2']);
 my $ssl = Net::SSLeay::new($ctx) or die;
 Net::SSLeay::set_fd($ssl, fileno($sock)) or die;
 Net::SSLeay::connect($ssl);

 warn "client:negotiated=",Net::SSLeay::P_next_proto_negotiated($ssl), "\n";
 warn "client:last_status=", Net::SSLeay::P_next_proto_last_status($ssl), "\n";
 
 ### server side 
 use Net::SSLeay;
 use IO::Socket::INET;
 
 Net::SSLeay::initialize();
 my $ctx = Net::SSLeay::CTX_tlsv1_new() or die;
 Net::SSLeay::CTX_set_options($ctx, &Net::SSLeay::OP_ALL);
 Net::SSLeay::set_cert_and_key($ctx, "t/data/cert.pem", "t/data/key.pem");
 Net::SSLeay::CTX_set_next_protos_advertised_cb($ctx, ['spdy/2','http1.1']);
 my $sock = IO::Socket::INET->new(LocalAddr=>'localhost', LocalPort=>5443, Proto=>'tcp', Listen=>20) or die;
 
 while (1) {
   my $ssl = Net::SSLeay::new($ctx);
   warn("server:waiting for incoming connection...\n");
   my $fd = $sock->accept();
   Net::SSLeay::set_fd($ssl, $fd->fileno);
   Net::SSLeay::accept($ssl);  
   warn "server:negotiated=",Net::SSLeay::P_next_proto_negotiated($ssl),"\n";
   my $got = Net::SSLeay::read($ssl);
   Net::SSLeay::ssl_write_all($ssl, "length=".length($got));
   Net::SSLeay::free($ssl);
   $fd->close();
 }
 # check with: openssl s_client -connect localhost:5443 -nextprotoneg http/1.1,spdy/2

=begin original

Please note that the selection (negotiation) is performed by client side, the server side simply advertise the list of supported protocols.

=end original

選択(ネゴシエーション)はクライアント側で実行され、サーバ側はサポートされているプロトコルのリストをアドバタイズするだけであることに注意してください。
(TBR)

=begin original

Advanced approach allows you to implement your own negotiation algorithm.

=end original

高度なアプローチにより、独自のネゴシエーションアルゴリズムを実装できます。
(TBR)

 #see below documentation for:
 Net::SSleay::CTX_set_next_proto_select_cb($ctx, $perl_callback_function, $callback_data);
 Net::SSleay::CTX_set_next_protos_advertised_cb($ctx, $perl_callback_function, $callback_data);

=begin original

Detection of NPN support (works even in older Net::SSLeay versions):

=end original

NPNサポートの検出(古いNet::SSLeayバージョンでも動作します):
(TBR)

 use Net::SSLeay;
 
 if (exists &Net::SSLeay::P_next_proto_negotiated) {
   # do NPN stuff
 }

=over

=item * CTX_set_next_proto_select_cb

=begin original

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before; requires at least openssl-1.0.1

=end original

B<COMPATIBILITY:>Net-SSLeay-1.45以前では使用できません。
少なくともopenssl-1.0.1が必要です。
(TBR)

=begin original

B<NOTE:> You need CTX_set_next_proto_select_cb on B<client side> of SSL connection.

=end original

B<注意:>SSL接続のB<クライアント側>にCTX_set_next_proto_select_cbが必要です。
(TBR)

=begin original

Simple usage - in this case a "common" negotiation algorithm (as implemented by openssl's function SSL_select_next_proto) is used.

=end original

単純な使用法-この場合、「共通の」ネゴシエーションアルゴリズム(opensslの関数SSL_select_next_protoによって実装される)が使用されます。
(TBR)

 $rv = Net::SSleay::CTX_set_next_proto_select_cb($ctx, $arrayref);
 # $ctx - value corresponding to openssl's SSL_CTX structure
 # $arrayref - list of accepted protocols - e.g. ['http1.0', 'http1.1']
 #
 # returns: 0 on success, 1 on failure

=begin original

Advanced usage (you probably do not need this):
 
 $rv = Net::SSleay::CTX_set_next_proto_select_cb($ctx, $perl_callback_function, $callback_data);
 # $ctx - value corresponding to openssl's SSL_CTX structure
 # $perl_callback_function - reference to perl function
 # $callback_data - [optional] data to passed to callback function when invoked
 #
 # returns: 0 on success, 1 on failure
 
 # where callback function looks like
 sub npn_advertised_cb_invoke {
   my ($ssl, $arrayref_proto_list_advertised_by_server, $callback_data) = @_;
   my $status;
   # ...
   $status = 1;   #status can be:
                  # 0 - OPENSSL_NPN_UNSUPPORTED
                  # 1 - OPENSSL_NPN_NEGOTIATED
                  # 2 - OPENSSL_NPN_NO_OVERLAP
   return $status, ['http1.1','spdy/2']; # the callback has to return 2 values
 }

=end original

高度な使用方法(おそらくこれは必要ありません):$rv=Net::SSleay::CTX_set_next_proto_select_cb($ctx, $perl_callback_function, $callback_data);#$ctx-opensslのSSL_CTX構造体に対応する値#$perl_callback_function-perl関数への参照#$callback_data-[オプション]呼び出されたときにコールバック関数に渡されるデータ##returns:成功時0、失敗時1#ここでコールバック関数はsub npn_advertised_cb_invoke{my($ssl, $arrayref_proto_list_advertised_by_server, $callback_data)=@_;my$status;#.$status=1;#statusは次のようになります:#0-OPENSSL_NPN_UNSUPPORTED#1-OPENSSL_NPN_NEGOTIATED#2-OPENSSL_NPN_NO_OVERLAP return$status, ['http1.1','spdy/2'];#コールバックは2つの値を返す必要があります}
(TBR)

=begin original

To undefine/clear this callback use:

=end original

このコールバックを定義解除またはクリアするには、次のコマンドを使用します。
(TBR)

 Net::SSleay::CTX_set_next_proto_select_cb($ctx, undef);

=item * CTX_set_next_protos_advertised_cb

=begin original

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before; requires at least openssl-1.0.1

=end original

B<COMPATIBILITY:>Net-SSLeay-1.45以前では使用できません。
少なくともopenssl-1.0.1が必要です。
(TBR)

=begin original

B<NOTE:> You need CTX_set_next_proto_select_cb on B<server side> of SSL connection.

=end original

B<注意:>SSL接続のB<サーバー側>にCTX_set_next_proto_select_cbが必要です。
(TBR)

=begin original

Simple usage:

=end original

簡単な使用方法:
(TBR)

 $rv = Net::SSleay::CTX_set_next_protos_advertised_cb($ctx, $arrayref);
 # $ctx - value corresponding to openssl's SSL_CTX structure
 # $arrayref - list of advertised protocols - e.g. ['http1.0', 'http1.1']
 #
 # returns: 0 on success, 1 on failure

=begin original

Advanced usage (you probably do not need this):
 
 $rv = Net::SSleay::CTX_set_next_protos_advertised_cb($ctx, $perl_callback_function, $callback_data);
 # $ctx - value corresponding to openssl's SSL_CTX structure
 # $perl_callback_function - reference to perl function
 # $callback_data - [optional] data to passed to callback function when invoked
 #
 # returns: 0 on success, 1 on failure
 
 # where callback function looks like
 sub npn_advertised_cb_invoke {
   my ($ssl, $callback_data) = @_;
   # ...
   return ['http1.1','spdy/2']; # the callback has to return arrayref
 }

=end original

高度な使用方法(おそらく必要ありません):$rv=Net::SSleay::CTX_set_next_protos_advertised_cb($ctx, $perl_callback_function, $callback_data);#$ctx-opensslのSSL_CTX構造体に対応する値#$perl_callback_function-perl関数への参照#$callback_data-[オプション]呼び出されたときにコールバック関数に渡されるデータ##returns:成功時0、失敗時1#ここでコールバック関数はsub npn_advertised_cb_invoke{my($ssl, $callback_data)=@_;#.return['http1.1','spdy/2'];#コールバックはarrayrefを返す必要があります}
(TBR)

=begin original

To undefine/clear this callback use:

=end original

このコールバックを定義解除またはクリアするには、次のコマンドを使用します。
(TBR)

 Net::SSleay::CTX_set_next_protos_advertised_cb($ctx, undef);

=item * P_next_proto_negotiated

=begin original

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before; requires at least openssl-1.0.1

=end original

B<COMPATIBILITY:>Net-SSLeay-1.45以前では使用できません。
少なくともopenssl-1.0.1が必要です。
(TBR)

=begin original

Returns the name of negotiated protocol for given SSL connection $ssl.

=end original

指定されたSSL接続$sslのネゴシエートされたプロトコルの名前を返します。
(TBR)

 $rv = Net::SSLeay::P_next_proto_negotiated($ssl)
 # $ssl - value corresponding to openssl's SSL structure
 #
 # returns: (string) negotiated protocol name (or undef if no negotiation was done or failed with fatal error)

=item * P_next_proto_last_status

=begin original

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before; requires at least openssl-1.0.1

=end original

B<COMPATIBILITY:>Net-SSLeay-1.45以前では使用できません。
少なくともopenssl-1.0.1が必要です。
(TBR)

=begin original

Returns the result of the last negotiation for given SSL connection $ssl.

=end original

指定されたSSL接続$sslの最後のネゴシエーションの結果を返します。
(TBR)

 $rv = Net::SSLeay::P_next_proto_last_status($ssl)
 # $ssl - value corresponding to openssl's SSL structure
 #
 # returns: (integer) negotiation status
 #          0 - OPENSSL_NPN_UNSUPPORTED
 #          1 - OPENSSL_NPN_NEGOTIATED
 #          2 - OPENSSL_NPN_NO_OVERLAP

=back

=head3 Low level API: Other functions

=over

=item * COMP_add_compression_method

=begin original

Adds the compression method cm with the identifier id to the list of available compression methods.
This list is globally maintained for all SSL operations within this application.
It cannot be set for specific SSL_CTX or SSL objects.

=end original

識別子idを持つ圧縮方法cmを使用可能な圧縮方法のリストに追加します。
このリストは、このアプリケーション内のすべてのSSL操作に対してグローバルに保持されます。
特定のSSL_CTXまたはSSLオブジェクトに対しては設定できません。
(TBR)

 my $rv = Net::SSLeay::COMP_add_compression_method($id, $cm);
 # $id - (integer) compression method id
 #       0 to 63:    methods defined by the IETF
 #       64 to 192:  external party methods assigned by IANA
 #       193 to 255: reserved for private use
 #
 # $cm - value corresponding to openssl's COMP_METHOD structure
 #
 # returns: 0 on success, 1 on failure (check the error queue to find out the reason)

=begin original

Check openssl doc L<http://www.openssl.org/docs/ssl/SSL_COMP_add_compression_method.html|http://www.openssl.org/docs/ssl/SSL_COMP_add_compression_method.html>

=end original

openssl doc L<http://www.openssl.org/docs/ssl/SSL_COMP_add_compression_method.html|http://www.openssl.org/docs/ssl/SSL_COMP_add_compression_method.html>を確認します。
(TBR)

=item * DH_free

=begin original

Frees the DH structure and its components. The values are erased before the memory is returned to the system.

=end original

DH構造体とそのコンポーネントを解放します。
値は、メモリがシステムに戻される前に消去されます。
(TBR)

 Net::SSLeay::DH_free($dh);
 # $dh - value corresponding to openssl's DH structure
 #
 # returns: no return value

=begin original

Check openssl doc L<http://www.openssl.org/docs/crypto/DH_new.html|http://www.openssl.org/docs/crypto/DH_new.html>

=end original

openssl doc L<http://www.openssl.org/docs/crypto/DH_new.html|http://www.openssl.org/docs/crypto/DH_new.html>を確認します。
(TBR)

=back

=head2 Constants

=begin original

There are many openssl constants available in L<Net::SSLeay>. You can use them like this:

=end original

L<Net::SSLeay>では、多くのopenssl定数を使用できます。
次のように使用できます。
(TBR)

 use Net::SSLeay;
 print &Net::SSLeay::NID_commonName;
 #or
 print Net::SSLeay::NID_commonName();

=begin original

Or you can import them and use:

=end original

または、それらを読み込んで使用することもできます。
(TBR)

 use Net::SSLeay qw/NID_commonName/;
 print &NID_commonName;
 #or
 print NID_commonName();
 #or
 print NID_commonName;

=begin original

The constants names are derived from openssl constants, however constants starting with C<SSL_> prefix
have name with C<SSL_> part stripped - e.g. openssl's constant C<SSL_OP_ALL> is available as C<Net::SSleay::OP_ALL>

=end original

定数名はopenssl定数から派生していますが、C<SSL_>プレフィックスで始まる定数は、C<SSL_>部分が取り除かれた名前になります。
例えば、opensslの定数C<SSL_OP_ALL>は、C<Net::SSleay::OP_ALL>として利用できます。
(TBR)

=begin original

The list of all available constant names:

=end original

使用可能なすべての定数名のリスト:
(TBR)

=for comment the next part is the output of: perl helper_script/regen_openssl_constants.pl -gen-pod

 ASN1_STRFLGS_ESC_CTRL           NID_hmacWithSHA1                       OP_CRYPTOPRO_TLSEXT_BUG
 ASN1_STRFLGS_ESC_MSB            NID_id_ad                              OP_DONT_INSERT_EMPTY_FRAGMENTS
 ASN1_STRFLGS_ESC_QUOTE          NID_id_ce                              OP_EPHEMERAL_RSA
 ASN1_STRFLGS_RFC2253            NID_id_kp                              OP_LEGACY_SERVER_CONNECT
 CB_ACCEPT_EXIT                  NID_id_pbkdf2                          OP_MICROSOFT_BIG_SSLV3_BUFFER
 CB_ACCEPT_LOOP                  NID_id_pe                              OP_MICROSOFT_SESS_ID_BUG
 CB_CONNECT_EXIT                 NID_id_pkix                            OP_MSIE_SSLV2_RSA_PADDING
 CB_CONNECT_LOOP                 NID_id_qt_cps                          OP_NETSCAPE_CA_DN_BUG
 ERROR_NONE                      NID_id_qt_unotice                      OP_NETSCAPE_CHALLENGE_BUG
 ERROR_SSL                       NID_idea_cbc                           OP_NETSCAPE_DEMO_CIPHER_CHANGE_BUG
 ERROR_SYSCALL                   NID_idea_cfb64                         OP_NETSCAPE_REUSE_CIPHER_CHANGE_BUG
 ERROR_WANT_ACCEPT               NID_idea_ecb                           OP_NON_EXPORT_FIRST
 ERROR_WANT_CONNECT              NID_idea_ofb64                         OP_NO_COMPRESSION
 ERROR_WANT_READ                 NID_info_access                        OP_NO_QUERY_MTU
 ERROR_WANT_WRITE                NID_initials                           OP_NO_SESSION_RESUMPTION_ON_RENEGOTIATION
 ERROR_WANT_X509_LOOKUP          NID_invalidity_date                    OP_NO_SSLv2
 ERROR_ZERO_RETURN               NID_issuer_alt_name                    OP_NO_SSLv3
 EVP_PKS_DSA                     NID_keyBag                             OP_NO_TICKET
 EVP_PKS_EC                      NID_key_usage                          OP_NO_TLSv1
 EVP_PKS_RSA                     NID_localKeyID                         OP_NO_TLSv1_1
 EVP_PKT_ENC                     NID_localityName                       OP_NO_TLSv1_2
 EVP_PKT_EXCH                    NID_md2                                OP_PKCS1_CHECK_1
 EVP_PKT_EXP                     NID_md2WithRSAEncryption               OP_PKCS1_CHECK_2
 EVP_PKT_SIGN                    NID_md5                                OP_SINGLE_DH_USE
 EVP_PK_DH                       NID_md5WithRSA                         OP_SINGLE_ECDH_USE
 EVP_PK_DSA                      NID_md5WithRSAEncryption               OP_SSLEAY_080_CLIENT_DH_BUG
 EVP_PK_EC                       NID_md5_sha1                           OP_SSLREF2_REUSE_CERT_TYPE_BUG
 EVP_PK_RSA                      NID_mdc2                               OP_TLS_BLOCK_PADDING_BUG
 FILETYPE_ASN1                   NID_mdc2WithRSA                        OP_TLS_D5_BUG
 FILETYPE_PEM                    NID_ms_code_com                        OP_TLS_ROLLBACK_BUG
 F_CLIENT_CERTIFICATE            NID_ms_code_ind                        READING
 F_CLIENT_HELLO                  NID_ms_ctl_sign                        RECEIVED_SHUTDOWN
 F_CLIENT_MASTER_KEY             NID_ms_efs                             RSA_3
 F_D2I_SSL_SESSION               NID_ms_ext_req                         RSA_F4
 F_GET_CLIENT_FINISHED           NID_ms_sgc                             R_BAD_AUTHENTICATION_TYPE
 F_GET_CLIENT_HELLO              NID_name                               R_BAD_CHECKSUM
 F_GET_CLIENT_MASTER_KEY         NID_netscape                           R_BAD_MAC_DECODE
 F_GET_SERVER_FINISHED           NID_netscape_base_url                  R_BAD_RESPONSE_ARGUMENT
 F_GET_SERVER_HELLO              NID_netscape_ca_policy_url             R_BAD_SSL_FILETYPE
 F_GET_SERVER_VERIFY             NID_netscape_ca_revocation_url         R_BAD_SSL_SESSION_ID_LENGTH
 F_I2D_SSL_SESSION               NID_netscape_cert_extension            R_BAD_STATE
 F_READ_N                        NID_netscape_cert_sequence             R_BAD_WRITE_RETRY
 F_REQUEST_CERTIFICATE           NID_netscape_cert_type                 R_CHALLENGE_IS_DIFFERENT
 F_SERVER_HELLO                  NID_netscape_comment                   R_CIPHER_TABLE_SRC_ERROR
 F_SSL_CERT_NEW                  NID_netscape_data_type                 R_INVALID_CHALLENGE_LENGTH
 F_SSL_GET_NEW_SESSION           NID_netscape_renewal_url               R_NO_CERTIFICATE_SET
 F_SSL_NEW                       NID_netscape_revocation_url            R_NO_CERTIFICATE_SPECIFIED
 F_SSL_READ                      NID_netscape_ssl_server_name           R_NO_CIPHER_LIST
 F_SSL_RSA_PRIVATE_DECRYPT       NID_ns_sgc                             R_NO_CIPHER_MATCH
 F_SSL_RSA_PUBLIC_ENCRYPT        NID_organizationName                   R_NO_PRIVATEKEY
 F_SSL_SESSION_NEW               NID_organizationalUnitName             R_NO_PUBLICKEY
 F_SSL_SESSION_PRINT_FP          NID_pbeWithMD2AndDES_CBC               R_NULL_SSL_CTX
 F_SSL_SET_FD                    NID_pbeWithMD2AndRC2_CBC               R_PEER_DID_NOT_RETURN_A_CERTIFICATE
 F_SSL_SET_RFD                   NID_pbeWithMD5AndCast5_CBC             R_PEER_ERROR
 F_SSL_SET_WFD                   NID_pbeWithMD5AndDES_CBC               R_PEER_ERROR_CERTIFICATE
 F_SSL_USE_CERTIFICATE           NID_pbeWithMD5AndRC2_CBC               R_PEER_ERROR_NO_CIPHER
 F_SSL_USE_CERTIFICATE_ASN1      NID_pbeWithSHA1AndDES_CBC              R_PEER_ERROR_UNSUPPORTED_CERTIFICATE_TYPE
 F_SSL_USE_CERTIFICATE_FILE      NID_pbeWithSHA1AndRC2_CBC              R_PUBLIC_KEY_ENCRYPT_ERROR
 F_SSL_USE_PRIVATEKEY            NID_pbe_WithSHA1And128BitRC2_CBC       R_PUBLIC_KEY_IS_NOT_RSA
 F_SSL_USE_PRIVATEKEY_ASN1       NID_pbe_WithSHA1And128BitRC4           R_READ_WRONG_PACKET_TYPE
 F_SSL_USE_PRIVATEKEY_FILE       NID_pbe_WithSHA1And2_Key_TripleDES_CBC R_SHORT_READ
 F_SSL_USE_RSAPRIVATEKEY         NID_pbe_WithSHA1And3_Key_TripleDES_CBC R_SSL_SESSION_ID_IS_DIFFERENT
 F_SSL_USE_RSAPRIVATEKEY_ASN1    NID_pbe_WithSHA1And40BitRC2_CBC        R_UNABLE_TO_EXTRACT_PUBLIC_KEY
 F_SSL_USE_RSAPRIVATEKEY_FILE    NID_pbe_WithSHA1And40BitRC4            R_UNKNOWN_REMOTE_ERROR_TYPE
 F_WRITE_PENDING                 NID_pbes2                              R_UNKNOWN_STATE
 GEN_DIRNAME                     NID_pbmac1                             R_X509_LIB
 GEN_DNS                         NID_pkcs                               SENT_SHUTDOWN
 GEN_EDIPARTY                    NID_pkcs3                              SESSION_ASN1_VERSION
 GEN_EMAIL                       NID_pkcs7                              ST_ACCEPT
 GEN_IPADD                       NID_pkcs7_data                         ST_BEFORE
 GEN_OTHERNAME                   NID_pkcs7_digest                       ST_CONNECT
 GEN_RID                         NID_pkcs7_encrypted                    ST_INIT
 GEN_URI                         NID_pkcs7_enveloped                    ST_OK
 GEN_X400                        NID_pkcs7_signed                       ST_READ_BODY
 MBSTRING_ASC                    NID_pkcs7_signedAndEnveloped           ST_READ_HEADER
 MBSTRING_BMP                    NID_pkcs8ShroudedKeyBag                VERIFY_CLIENT_ONCE
 MBSTRING_FLAG                   NID_pkcs9                              VERIFY_FAIL_IF_NO_PEER_CERT
 MBSTRING_UNIV                   NID_pkcs9_challengePassword            VERIFY_NONE
 MBSTRING_UTF8                   NID_pkcs9_contentType                  VERIFY_PEER
 MIN_RSA_MODULUS_LENGTH_IN_BYTES NID_pkcs9_countersignature             WRITING
 NID_OCSP_sign                   NID_pkcs9_emailAddress                 X509_LOOKUP
 NID_SMIMECapabilities           NID_pkcs9_extCertAttributes            X509_PURPOSE_ANY
 NID_X500                        NID_pkcs9_messageDigest                X509_PURPOSE_CRL_SIGN
 NID_X509                        NID_pkcs9_signingTime                  X509_PURPOSE_NS_SSL_SERVER
 NID_ad_OCSP                     NID_pkcs9_unstructuredAddress          X509_PURPOSE_OCSP_HELPER
 NID_ad_ca_issuers               NID_pkcs9_unstructuredName             X509_PURPOSE_SMIME_ENCRYPT
 NID_algorithm                   NID_private_key_usage_period           X509_PURPOSE_SMIME_SIGN
 NID_authority_key_identifier    NID_rc2_40_cbc                         X509_PURPOSE_SSL_CLIENT
 NID_basic_constraints           NID_rc2_64_cbc                         X509_PURPOSE_SSL_SERVER
 NID_bf_cbc                      NID_rc2_cbc                            X509_PURPOSE_TIMESTAMP_SIGN
 NID_bf_cfb64                    NID_rc2_cfb64                          X509_TRUST_COMPAT
 NID_bf_ecb                      NID_rc2_ecb                            X509_TRUST_EMAIL
 NID_bf_ofb64                    NID_rc2_ofb64                          X509_TRUST_OBJECT_SIGN
 NID_cast5_cbc                   NID_rc4                                X509_TRUST_OCSP_REQUEST
 NID_cast5_cfb64                 NID_rc4_40                             X509_TRUST_OCSP_SIGN
 NID_cast5_ecb                   NID_rc5_cbc                            X509_TRUST_SSL_CLIENT
 NID_cast5_ofb64                 NID_rc5_cfb64                          X509_TRUST_SSL_SERVER
 NID_certBag                     NID_rc5_ecb                            X509_TRUST_TSA
 NID_certificate_policies        NID_rc5_ofb64                          X509_V_FLAG_ALLOW_PROXY_CERTS
 NID_client_auth                 NID_ripemd160                          X509_V_FLAG_CB_ISSUER_CHECK
 NID_code_sign                   NID_ripemd160WithRSA                   X509_V_FLAG_CHECK_SS_SIGNATURE
 NID_commonName                  NID_rle_compression                    X509_V_FLAG_CRL_CHECK
 NID_countryName                 NID_rsa                                X509_V_FLAG_CRL_CHECK_ALL
 NID_crlBag                      NID_rsaEncryption                      X509_V_FLAG_EXPLICIT_POLICY
 NID_crl_distribution_points     NID_rsadsi                             X509_V_FLAG_EXTENDED_CRL_SUPPORT
 NID_crl_number                  NID_safeContentsBag                    X509_V_FLAG_IGNORE_CRITICAL
 NID_crl_reason                  NID_sdsiCertificate                    X509_V_FLAG_INHIBIT_ANY
 NID_delta_crl                   NID_secretBag                          X509_V_FLAG_INHIBIT_MAP
 NID_des_cbc                     NID_serialNumber                       X509_V_FLAG_NOTIFY_POLICY
 NID_des_cfb64                   NID_server_auth                        X509_V_FLAG_POLICY_CHECK
 NID_des_ecb                     NID_sha                                X509_V_FLAG_POLICY_MASK
 NID_des_ede                     NID_sha1                               X509_V_FLAG_USE_CHECK_TIME
 NID_des_ede3                    NID_sha1WithRSA                        X509_V_FLAG_USE_DELTAS
 NID_des_ede3_cbc                NID_sha1WithRSAEncryption              X509_V_FLAG_X509_STRICT
 NID_des_ede3_cfb64              NID_shaWithRSAEncryption               X509_V_OK
 NID_des_ede3_ofb64              NID_stateOrProvinceName                XN_FLAG_COMPAT
 NID_des_ede_cbc                 NID_subject_alt_name                   XN_FLAG_DN_REV
 NID_des_ede_cfb64               NID_subject_key_identifier             XN_FLAG_DUMP_UNKNOWN_FIELDS
 NID_des_ede_ofb64               NID_surname                            XN_FLAG_FN_ALIGN
 NID_des_ofb64                   NID_sxnet                              XN_FLAG_FN_LN
 NID_description                 NID_time_stamp                         XN_FLAG_FN_MASK
 NID_desx_cbc                    NID_title                              XN_FLAG_FN_NONE
 NID_dhKeyAgreement              NID_undef                              XN_FLAG_FN_OID
 NID_dnQualifier                 NID_uniqueIdentifier                   XN_FLAG_FN_SN
 NID_dsa                         NID_x509Certificate                    XN_FLAG_MULTILINE
 NID_dsaWithSHA                  NID_x509Crl                            XN_FLAG_ONELINE
 NID_dsaWithSHA1                 NID_zlib_compression                   XN_FLAG_RFC2253
 NID_dsaWithSHA1_2               NOTHING                                XN_FLAG_SEP_COMMA_PLUS
 NID_dsa_2                       OPENSSL_VERSION_NUMBER                 XN_FLAG_SEP_CPLUS_SPC
 NID_email_protect               OP_ALL                                 XN_FLAG_SEP_MASK
 NID_ext_key_usage               OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION   XN_FLAG_SEP_MULTILINE
 NID_ext_req                     OP_CIPHER_SERVER_PREFERENCE            XN_FLAG_SEP_SPLUS_SPC
 NID_friendlyName                OP_CISCO_ANYCONNECT                    XN_FLAG_SPC_EQ
 NID_givenName                   OP_COOKIE_EXCHANGE

=head2 INTERNAL ONLY functions (do not use these)

=begin original

The following functions are not intended for use from outside of L<Net::SSLeay> module.
They might be removed, renamed or changed without prior notice in future version.

=end original

次の関数は、L<Net::SSLeay>モジュールの外部からの使用を意図したものではありません。
将来のバージョンでは、予告なく削除、名前変更、または変更される可能性があります。
(TBR)

=begin original

Simply B<DO NOT USE THEM>!

=end original

単にB<使用しない>!
(TBR)

=over

=item * hello

=item * blength

=item * constant

=back

=head1 EXAMPLES

=begin original

One very good example to look at is the implementation of C<sslcat()> in the
C<SSLeay.pm> file.

=end original

一つの非常に素晴らしい例は、C<SSLeay.pm> ファイルにある C<sslcat()> の実装を
見ることです。

=begin original

The following is a simple SSLeay client (with too little error checking :-(

=end original

(あまりにもエラーチェックが少ない :-( ) 簡単な SSLeay クライアントを以下に
示します:

    #!/usr/bin/perl
    use Socket;
    use Net::SSLeay qw(die_now die_if_ssl_error) ;
    Net::SSLeay::load_error_strings();
    Net::SSLeay::SSLeay_add_ssl_algorithms();
    Net::SSLeay::randomize();

=begin original

    ($dest_serv, $port, $msg) = @ARGV;      # Read command line
    $port = getservbyname ($port, 'tcp') unless $port =~ /^\d+$/;
    $dest_ip = gethostbyname ($dest_serv);
    $dest_serv_params  = sockaddr_in($port, $dest_ip);

=end original

    ($dest_serv, $port, $msg) = @ARGV;      # コマンドラインを読み込みます
    $port = getservbyname ($port, 'tcp') unless $port =~ /^\d+$/;
    $dest_ip = gethostbyname ($dest_serv);
    $dest_serv_params  = sockaddr_in($port, $dest_ip);

=begin original

    socket  (S, &AF_INET, &SOCK_STREAM, 0)  or die "socket: $!";
    connect (S, $dest_serv_params)          or die "connect: $!";
    select  (S); $| = 1; select (STDOUT);   # Eliminate STDIO buffering

=end original

    socket  (S, &AF_INET, &SOCK_STREAM, 0)  or die "socket: $!";
    connect (S, $dest_serv_params)          or die "connect: $!";
    select  (S); $| = 1; select (STDOUT);   # STDIO へのバッファリングの抑止

=begin original

    # The network connection is now open, lets fire up SSL

=end original

    # ネットワークへの接続が今、開きました。SSLeayを起動しましょう

=begin original

    $ctx = Net::SSLeay::CTX_new() or die_now("Failed to create SSL_CTX $!");
    Net::SSLeay::CTX_set_options($ctx, &Net::SSLeay::OP_ALL)
         or die_if_ssl_error("ssl ctx set options");
    $ssl = Net::SSLeay::new($ctx) or die_now("Failed to create SSL $!");
    Net::SSLeay::set_fd($ssl, fileno(S));   # Must use fileno
    $res = Net::SSLeay::connect($ssl) and die_if_ssl_error("ssl connect");
    print "Cipher `" . Net::SSLeay::get_cipher($ssl) . "'\n";

=end original

    $ctx = Net::SSLeay::CTX_new() or die_now("Failed to create SSL_CTX $!");
    Net::SSLeay::CTX_set_options($ctx, &Net::SSLeay::OP_ALL)
         and die_if_ssl_error("ssl ctx set options");
    $ssl = Net::SSLeay::new($ctx) or die_now("Failed to create SSL $!");
    Net::SSLeay::set_fd($ssl, fileno(S));   # fileno を使わなければなりません
    $res = Net::SSLeay::connect($ssl) and die_if_ssl_error("ssl connect");
    print "Cipher `" . Net::SSLeay::get_cipher($ssl) . "'\n";

=begin original

    # Exchange data

=end original

    # データの交換

=begin original

    $res = Net::SSLeay::write($ssl, $msg);  # Perl knows how long $msg is
    die_if_ssl_error("ssl write");
    CORE::shutdown S, 1;  # Half close --> No more output, sends EOF to server
    $got = Net::SSLeay::read($ssl);         # Perl returns undef on failure
    die_if_ssl_error("ssl read");
    print $got;

=end original

    $res = Net::SSLeay::write($ssl, $msg);  # Perl は $msgの 長さがわかります
    die_if_ssl_error("ssl write");
    CORE::shutdown S, 1;  # 半分クローズ --> 出力終わり、サーバに EOF を送信
    $got = Net::SSLeay::read($ssl);         # Perl は失敗時 undef を返します
    die_if_ssl_error("ssl read");
    print $got;

=begin original

    Net::SSLeay::free ($ssl);               # Tear down connection
    Net::SSLeay::CTX_free ($ctx);
    close S;

=end original

    Net::SSLeay::free ($ssl);               # 接続を終了させます
    Net::SSLeay::CTX_free ($ctx);
    close S;

=begin original

The following is a simple SSLeay echo server (non forking):

=end original

簡単な SSLeay echo サーバ(fork なし)を以下に示します:

    #!/usr/bin/perl -w
    use Socket;
    use Net::SSLeay qw(die_now die_if_ssl_error);
    Net::SSLeay::load_error_strings();
    Net::SSLeay::SSLeay_add_ssl_algorithms();
    Net::SSLeay::randomize();

=begin original

    $our_ip = "\0\0\0\0"; # Bind to all interfaces
    $port = 1235;
    $sockaddr_template = 'S n a4 x8';
    $our_serv_params = pack ($sockaddr_template, &AF_INET, $port, $our_ip);

=end original

    $our_ip = "\0\0\0\0"; # 全てのインターフェースにバインド
    $port = 1235;
    $sockaddr_template = 'S n a4 x8';
    $our_serv_params = pack ($sockaddr_template, &AF_INET, $port, $our_ip);

    socket (S, &AF_INET, &SOCK_STREAM, 0)  or die "socket: $!";
    bind (S, $our_serv_params)             or die "bind:   $!";
    listen (S, 5)                          or die "listen: $!";
    $ctx = Net::SSLeay::CTX_new ()         or die_now("CTX_new ($ctx): $!");
    Net::SSLeay::CTX_set_options($ctx, &Net::SSLeay::OP_ALL)
         or die_if_ssl_error("ssl ctx set options");

=begin original

    # Following will ask password unless private key is not encrypted
    Net::SSLeay::CTX_use_RSAPrivateKey_file ($ctx, 'plain-rsa.pem',
                                             &Net::SSLeay::FILETYPE_PEM);
    die_if_ssl_error("private key");
    Net::SSLeay::CTX_use_certificate_file ($ctx, 'plain-cert.pem',
 				           &Net::SSLeay::FILETYPE_PEM);
    die_if_ssl_error("certificate");

=end original

    # 以下の行は秘密鍵が非暗号化でなければ、パスワードを尋ねます
    Net::SSLeay::CTX_use_RSAPrivateKey_file ($ctx, 'plain-rsa.pem',
                                         &Net::SSLeay::FILETYPE_PEM);
    die_if_ssl_error("private key");
    Net::SSLeay::CTX_use_certificate_file ($ctx, 'plain-cert.pem',
                       &Net::SSLeay::FILETYPE_PEM);
    die_if_ssl_error("certificate");

=begin original

    while (1) {
        print "Accepting connections...\n";
        ($addr = accept (NS, S))           or die "accept: $!";
        select (NS); $| = 1; select (STDOUT);  # Piping hot!

=end original

    while (1) {
        print "Accepting connections...\n";
        ($addr = accept (NS, S))           or die "accept: $!";
        select (NS); $| = 1; select (STDOUT);  # パイプがホット!

        ($af,$client_port,$client_ip) = unpack($sockaddr_template,$addr);
        @inetaddr = unpack('C4',$client_ip);
        print "$af connection from " .
        join ('.', @inetaddr) . ":$client_port\n";

=begin original

        # We now have a network connection, lets fire up SSLeay...

=end original

        # これでネットワーク接続を持っています、SSLeay を起動しましょう...

        $ssl = Net::SSLeay::new($ctx)      or die_now("SSL_new ($ssl): $!");
        Net::SSLeay::set_fd($ssl, fileno(NS));

        $err = Net::SSLeay::accept($ssl) and die_if_ssl_error('ssl accept');
        print "Cipher `" . Net::SSLeay::get_cipher($ssl) . "'\n";

=begin original

        # Connected. Exchange some data.

=end original

        # 接続しました。データを交換しましょう。

=begin original

        $got = Net::SSLeay::read($ssl);     # Returns undef on fail
        die_if_ssl_error("ssl read");
        print "Got `$got' (" . length ($got) . " chars)\n";

=end original

        $got = Net::SSLeay::read($ssl);     # 失敗時は undef を返します
        die_if_ssl_error("ssl read");
        print "Got `$got' (" . length ($got) . " chars)\n";

        Net::SSLeay::write ($ssl, uc ($got)) or die "write: $!";
        die_if_ssl_error("ssl write");

=begin original

        Net::SSLeay::free ($ssl);           # Tear down connection
        close NS;
    }

=end original

        Net::SSLeay::free ($ssl);           # 接続を終了させます
        close NS;
    }

=begin original

Yet another echo server. This one runs from C</etc/inetd.conf> so it avoids
all the socket code overhead. Only caveat is opening an rsa key file -
it had better be without any encryption or else it will not know where
to ask for the password. Note how C<STDIN> and C<STDOUT> are wired to SSL.

=end original

echo サーバをもう一つ。
今度のものは C</etc/inetd.conf> から走ります。
そのためソケットコードのオーバーヘッドを全て回避します。
唯一の注意は、rsa 鍵ファイルを開くことです - 暗号化をしないほうが
よりうまくいきます。
そうでなければパスワードをどこで聞けばいいのかわかりません。
どのように C<STDIN> と C<STDOUT> が SSL につながれるかに注意してください。

    #!/usr/bin/perl
    # /etc/inetd.conf
    #    ssltst stream tcp nowait root /path/to/server.pl server.pl
    # /etc/services
    #    ssltst		1234/tcp

    use Net::SSLeay qw(die_now die_if_ssl_error);
    Net::SSLeay::load_error_strings();
    Net::SSLeay::SSLeay_add_ssl_algorithms();
    Net::SSLeay::randomize();

=begin original

    chdir '/key/dir' or die "chdir: $!";
    $| = 1;  # Piping hot!
    open LOG, ">>/dev/console" or die "Can't open log file $!";
    select LOG; print "server.pl started\n";

=end original

    chdir '/key/dir' or die "chdir: $!";
    $| = 1;  # パイプがホット!
    open LOG, ">>/dev/console" or die "Can't open log file $!";
    select LOG; print "server.pl started\n";
    
    $ctx = Net::SSLeay::CTX_new()     or die_now "CTX_new ($ctx) ($!)";
    $ssl = Net::SSLeay::new($ctx)     or die_now "new ($ssl) ($!)";
    Net::SSLeay::set_options($ssl, &Net::SSLeay::OP_ALL)
         and die_if_ssl_error("ssl set options");

    $ctx = Net::SSLeay::CTX_new()     or die_now "CTX_new ($ctx) ($!)";
    $ssl = Net::SSLeay::new($ctx)     or die_now "new ($ssl) ($!)";
    Net::SSLeay::set_options($ssl, &Net::SSLeay::OP_ALL)
         and die_if_ssl_error("ssl set options");

=begin original

    # We get already open network connection from inetd, now we just
    # need to attach SSLeay to STDIN and STDOUT
    Net::SSLeay::set_rfd($ssl, fileno(STDIN));
    Net::SSLeay::set_wfd($ssl, fileno(STDOUT));

=end original

    # inetd からネットワーク接続は既にオープンしてあるので、
    # STDIN と STDOUT に SSLeay をつける必要があるだけです
    Net::SSLeay::set_rfd($ssl, fileno(STDIN));
    Net::SSLeay::set_wfd($ssl, fileno(STDOUT));

    Net::SSLeay::use_RSAPrivateKey_file ($ssl, 'plain-rsa.pem',
                                         Net::SSLeay::FILETYPE_PEM);
    die_if_ssl_error("private key");
    Net::SSLeay::use_certificate_file ($ssl, 'plain-cert.pem',
                                       Net::SSLeay::FILETYPE_PEM);
    die_if_ssl_error("certificate");

    Net::SSLeay::accept($ssl) and die_if_ssl_err("ssl accept: $!");
    print "Cipher `" . Net::SSLeay::get_cipher($ssl) . "'\n";

    $got = Net::SSLeay::read($ssl);
    die_if_ssl_error("ssl read");
    print "Got `$got' (" . length ($got) . " chars)\n";

    Net::SSLeay::write ($ssl, uc($got)) or die "write: $!";
    die_if_ssl_error("ssl write");

=begin original

    Net::SSLeay::free ($ssl);         # Tear down the connection
    Net::SSLeay::CTX_free ($ctx);
    close LOG;

=end original

    Net::SSLeay::free ($ssl);         # 接続を終わらせます
    Net::SSLeay::CTX_free ($ctx);
    close LOG;

=begin original

There are also a number of example/test programs in the examples directory:

=end original

examples ディレクトリにも例/テストプログラムがたくさん入っています:

=begin original

    sslecho.pl   -  A simple server, not unlike the one above
    minicli.pl   -  Implements a client using low level SSLeay routines
    sslcat.pl    -  Demonstrates using high level sslcat utility function
    get_page.pl  -  Is a utility for getting html pages from secure servers
    callback.pl  -  Demonstrates certificate verification and callback usage
    stdio_bulk.pl       - Does SSL over Unix pipes
    ssl-inetd-serv.pl   - SSL server that can be invoked from inetd.conf
    httpd-proxy-snif.pl - Utility that allows you to see how a browser
                          sends https request to given server and what reply
                          it gets back (very educative :-)
    makecert.pl  -  Creates a self signed cert (does not use this module)

=end original

    sslecho.pl   -  上記のものと違わない簡単なサーバ
    minicli.pl   -  低レベル SSLeay ルーチンを使ったクライアントを実装
    sslcat.pl    -  高レベル sslcat ユーティリティ関数の使い方の例
    get_page.pl  -  セキュアなサーバから HTML ページを取り出すためのユーティリティ
    callback.pl  -  証明書の確認とコールバックの使い方の例
    stdio_bulk.pl       - Unix パイプ越しに SSL を行う
    ssl-inetd-serv.pl   - inetd.conf から呼び出せる SSL サーバ
    httpd-proxy-snif.pl - ブラウザがサーバにどのように https リクエストを送信するのか、
                          そして応答として何を受け取ったのかを見えるようにする
                          ユーティリティ (とっても教育的 :-)
    makecert.pl  -  自分で署名した証明書を作成(このモジュールを使いません)

=head1 LIMITATIONS

(制約)

=begin original

C<Net::SSLeay::read()> uses an internal buffer of 32KB, thus no single read
will return more. In practice one read returns much less, usually
as much as fits in one network packet. To work around this,
you should use a loop like this:

=end original

C<Net::SSLeay::read()> は 32KB の内部バッファを利用しています。
そのため 1 回の読み込みは、それ以上、多く返すことはありません。
実際、通常通り一つのネットワークパケットに収まっているかぎり、
1 回の読み込みは、これよりもかなり少なく返します。
これを回避するためには以下のように
ループを使わなければなりません:

    $reply = '';
    while ($got = Net::SSLeay::read($ssl)) {
        last if print_errs('SSL_read');
        $reply .= $got;
    }

=begin original

Although there is no built-in limit in C<Net::SSLeay::write()>, the network
packet size limitation applies here as well, thus use:

=end original

C<Net::SSLeay::write()> には組み込まれた制約はありませんが、
ネットワークパケットサイズの制限は、ここでも当てはまります。
そこで以下のようにしてください:

    $written = 0;

    while ($written < length($message)) {
        $written += Net::SSLeay::write($ssl, substr($message, $written));
        last if print_errs('SSL_write');
    }

=begin original

Or alternatively you can just use the following convenience functions:

=end original

あるいは、代わりに単に以下の便利な関数を使うことも出来ます:

    Net::SSLeay::ssl_write_all($ssl, $message) or die "ssl write failure";
    $got = Net::SSLeay::ssl_read_all($ssl) or die "ssl read failure";

=head1 KNOWN BUGS AND CAVEATS

(既知のバグと注意)

=begin original

Autoloader emits a

=end original

Autoloader は:

    Argument "xxx" isn't numeric in entersub at blib/lib/Net/SSLeay.pm'

=begin original

warning if die_if_ssl_error is made autoloadable. If you figure out why,
drop me a line.

=end original

die_if_ssl_error が autoload 可能であると、このの警告を吐き出します。
なぜだかわかったら、私に連絡してください。

=begin original

Callback set using C<SSL_set_verify()> does not appear to work. This may
well be an openssl problem (e.g. see C<ssl/ssl_lib.c> line 1029). Try using
C<SSL_CTX_set_verify()> instead and do not be surprised if even this stops
working in future versions.

=end original

C<SSL_set_verify()> を使って設定されたコールバックが動かないようです。
これは openssl の問題かもしれません(例えば C<ssl/ssl_lib.c> の 1029 行を
ご覧ください)。
代わりに C<SSL_CTX_set_verify()> を使ってみてください。
そして将来のバージョンでこれが動かないようになっても驚かないでください。

=begin original

Callback and certificate verification stuff is generally too little tested.

=end original

コールバックと証明書の確認に関しては、一般的に余りにもほとんどテストされて
いません。

=begin original

Random numbers are not initialized randomly enough, especially if you
do not have C</dev/random> and/or C</dev/urandom> (such as in Solaris
platforms - but it's been suggested that cryptorand daemon from the SUNski
package solves this). In this case you should investigate third party
software that can emulate these devices, e.g. by way of a named pipe
to some program.

=end original

(Solaris プラットホームのように - しかし私は SUNski パッケージからの
cryptorand デーモンが、これを解決するという提案を受けたことがあります)
特に C</dev/random> や C</dev/urandom> を持っていなければ、
乱数は十分にランダムに初期化されません。
この場合、これらのデバイスをエミュレートすることができる
サードパーティのソフトウェア、例えばあるプログラムへの
名前付きパイプによる方法などを調査する必要があります。

=begin original

Another gotcha with random number initialization is randomness
depletion. This phenomenon, which has been extensively discussed in
OpenSSL, Apache-SSL, and Apache-mod_ssl forums, can cause your
script to block if you use C</dev/random> or to operate insecurely
if you use C</dev/urandom>. What happens is that when too much
randomness is drawn from the operating system's randomness pool
then randomness can temporarily be unavailable. C</dev/random> solves
this problem by waiting until enough randomness can be gathered - and
this can take a long time since blocking reduces activity in the
machine and less activity provides less random events: a vicious circle.
C</dev/urandom> solves this dilemma more pragmatically by simply returning
predictable "random" numbers. SomeC< /dev/urandom> emulation software
however actually seems to implement C</dev/random> semantics. Caveat emptor.

=end original

乱数の初期化に関して、もう一つわかっていることは乱数が枯渇することです。
OpenSSL、Apache-SSL、そして Apache-mod_ssl フォーラムで
広く議論されていますが、この現象は、C</dev/random> を使うならば、あなたの
スクリプトをブロックすることを、あるいは C</dev/urandom> を使うならば、
セキュアでなく操作することを引き起こすかもしれません。
発生していることは、あまりにも多くの乱数がシステムの乱数プールから
引っ張られたとき、乱数が一時的に利用不能になることがあります。
C</dev/random> はこの問題は、十分な乱数が集められるまで待つことにより
解決します - そしてこれには長い時間がかかることがあります。
ブロックすることがマシンでの活動を減らしてしまい、活動が少なくなると
乱数イベントも少なくなるためです:悪循環です。
C</dev/urandom> は、このジレンマをより実用的に簡単に予測できる
"ランダムな"数を返すことにより解決します。
しかしながら、いくつかの C</dev/urandom> エミュレーションソフトウェアは
実際には C</dev/random> の意味論を実装しているようです。
利用者はご注意を(Caveat emptor)。

=begin original

I've been pointed to two such daemons by Mik Firestone <mik@@speed.stdio._com>
who has used them on Solaris 8:

=end original

私は Solaris 8 でそれらを使っている
Mik Firestone <mik@@speed.stdio._com> から、
そのような二つのデーモンを指摘されました:

=over

=item 1

=begin original

Entropy Gathering Daemon (EGD) at L<http://www.lothar.com/tech/crypto/>

=end original

L<http://www.lothar.com/tech/crypto/> の
Entropy Gathering Daemon (EGD)

=item 2

=begin original

Pseudo-random number generating daemon (PRNGD) at
L<http://www.aet.tu-cottbus.de/personen/jaenicke/postfix_tls/prngd.html>

=end original

L<http://www.aet.tu-cottbus.de/personen/jaenicke/postfix_tls/prngd.html> の
Pseudo-random number generating daemon (PRNGD)

=back

=begin original

If you are using the low level API functions to communicate with other
SSL implementations, you would do well to call

=end original

他の SSL 実装と通信するために低レベル API 関数を使っているのであれば、
以下のようにして、他のいくるかの SSL 実装での、よく知られているバグをうまく
処理するよう、以下のように呼び出すとうまくいきます:

    Net::SSLeay::CTX_set_options($ctx, &Net::SSLeay::OP_ALL)
         or die_if_ssl_error("ssl ctx set options");

=begin original

to cope with some well know bugs in some other SSL
implementations. The high level API functions always set all known
compatibility options.

=end original

高レベル API 関数は常に全てのわかっている互換性オプションを設定します。

=begin original

Sometimes C<sslcat()> (and the high level HTTPS functions that build on it)
is too fast in signaling the EOF to legacy HTTPS servers. This causes
the server to return empty page. To work around this problem you can
set the global variable

=end original

時折、C<sslcat()> (そしてそれを基に構築された高レベル HTTPS 関数)が、
レガシーな HTTPS サーバに EOF の合図を出すのが速すぎることがあります。
これによりサーバが空のページを返してしまいます。
この問題を回避するためには、グローバル変数を設定することができます

=begin original

    $Net::SSLeay::slowly = 1;   # Add sleep so broken servers can keep up

=end original

    $Net::SSLeay::slowly = 1;   # 壊れたサーバでも保持できるよう sleep を追加

=begin original

HTTP/1.1 is not supported. Specifically this module does not know to
issue or serve multiple http requests per connection. This is a serious
shortcoming, but using the SSL session cache on your server helps to
alleviate the CPU load somewhat.

=end original

HTTP/1.1 はサポートされていません。
明確に、このモジュールは接続ごとに複数の http リクエストを発行したり、
それをサービスすることを知りません。
これは重大な短所です。
しかしサーバで SSL セッションキャッシュを使うことが CPU の負荷を
いくぶん軽くすることを助けてくれます。

=begin original

As of version 1.09 many newer OpenSSL auxiliary functions were
added (from C<REM_AUTOMATICALLY_GENERATED_1_09> onwards in C<SSLeay.xs>).
Unfortunately I have not had any opportunity to test these. Some of
them are trivial enough that I believe they "just work", but others
have rather complex interfaces with function pointers and all. In these
cases you should proceed wit great caution.

=end original

バージョン 1.09 では多くの新しい OpenSSL 補助関数が追加されました
(C<SSLeay.xs> では C<REM_AUTOMATICALLY_GENERATED_1_09> が前に付いています)。
残念ながらこれらをテストする機会を持つことができていません。
それらのいくつかは私が"動くだけ"だと思うに十分なほどささいなものです。
しかし他のものは機能ポインタや全てで、どちらかといえば複雑な
インターフェースを持っています。
これらの場合には、大いに注意する必要があります。

=begin original

This module defaults to using OpenSSL automatic protocol negotiation
code for automatically detecting the version of the SSL protocol
that the other end talks. With most web servers this works just
fine, but once in a while I get complaints from people that the module
does not work with some web servers. Usually this can be solved
by explicitly setting the protocol version, e.g.

=end original

このモジュールはデフォルトで、自動的にもう一方が話す SSL プロトコルコードの
バージョンを検出するための OpenSSL 自動プロトコルネゴシエーションの
コードを使います。
ほとんどのWebサーバでは、これはうまく機能します。
しかし私は時折、モジュールがある種の Web サーバでは動かないという
苦情を受けます。
通常これは、明示的にプロトコルバージョンを
設定することにより解決することができます。
例えば:

=begin original

   $Net::SSLeay::ssl_version = 2;  # Insist on SSLv2
   $Net::SSLeay::ssl_version = 3;  # Insist on SSLv3
   $Net::SSLeay::ssl_version = 10; # Insist on TLSv1

=end original

   $Net::SSLeay::ssl_version = 2;  # SSLv2 を要求します
   $Net::SSLeay::ssl_version = 3;  # SSLv3 を要求します
   $Net::SSLeay::ssl_version = 10; # TLSv1 を要求します

=begin original

Although the autonegotiation is nice to have, the SSL standards
do not formally specify any such mechanism. Most of the world has
accepted the SSLeay/OpenSSL way of doing it as the de facto standard. But
for the few that think differently, you have to explicitly speak
the correct version. This is not really a bug, but rather a deficiency
in the standards. If a site refuses to respond or sends back some
nonsensical error codes (at the SSL handshake level), try this option
before mailing me.

=end original

自動ネゴシエーションは素晴らしいのですが、SSL 標準では公式には
そのような機能を規定していません。
世界中のほとんどが SSLeay/OpenSSL のやり方を
デファクトスダンダードとして受け入れています。
しかし中には違う考えを持つ人には、明示的に正しいバージョンを
話さなければなりません。
これは本当はバグではありません。
むしろ標準での欠落です。
もしサイトが応答を拒絶したり、無意味なエラーコードを送り返してきたら、
私にメールする前に、このオプションを試してみてください。

=begin original

On some systems, OpenSSL may be compiled without support for SSLv2.
If this is the case, Net::SSLeay will warn if ssl_version has been set
to 2.

=end original

一部のシステムでは、OpenSSLがSSLv2のサポートなしでコンパイルされている場合があります。
この場合、ssl_versionが2に設定されていると、Net::SSLeayによって警告が表示されます。
(TBR)

=begin original

The high level API returns the certificate of the peer, thus allowing
one to check what certificate was supplied. However, you will only be
able to check the certificate after the fact, i.e. you already sent
your form data by the time you find out that you did not trust them,
oops.

=end original

高レベル API は相手側の証明書を返します。
これにより、どんな証明書が提供されたかをチェックすることができます。
しかしその事の後にだけ、証明書をチェックすることができます。
つまり彼らを信頼しないことがわかったときには、あなたは既にあなたの
フォームデータを送信しているのです;
アリャマ。

=begin original

So, while being able to know the certificate after the fact is surely
useful, the security minded would still choose to do the connection
and certificate verification first and only then exchange data
with the site. Currently none of the high level API functions do
this, thus you would have to program it using the low level API. A
good place to start is to see how the C<Net::SSLeay::http_cat()> function
is implemented.

=end original

そこで、その事が後に証明書を知ることができることが便利だとしても、
セキュリティを気にする人たちは、先に接続し証明書の確認を行い、
その後にだけそのサイトとデータを交換することを選択するでしょう。
現在、これを行う高レベルの API 関数はありません。
このため低レベルの API を使ってプログラムしなければなりません。
C<Net::SSLeay::http_cat()> 関数がどのように実装されているかを見ることから
はじめるといいでしょう。

=begin original

The high level API functions use a global file handle C<SSLCAT_S>
internally. This really should not be a problem because there is no
way to interleave the high level API functions, unless you use threads
(but threads are not very well supported in perl anyway (as of version
5.6.1). However, you may run into problems if you call undocumented
internal functions in an interleaved fashion. The best solution is to "require Net::SSLeay"
in one thread after all the threads have been created.

=end original

高レベル API 関数は内部でグローバルファイルハンドル C<SSLCAT_S> を使います。
高レベル API 関数をインターリーブする方法はないので、
スレッドを使わない限り、実際に問題になることはないはずです
(しかし (バージョン 5.6.1 から) どちらにしても perl はスレッドに
うまく対応していません))。
しかし、インターリーブされた方法で文書化されていない内部関数を呼び出すと、
問題に突き当たるかもしれません。
最良の解法は、全てのスレッドが作成された後、一つのスレッドで
"require Net::SSLeay" を行うことです。

=head1 DIAGNOSTICS

(診断情報)

=over

=item Random number generator not seeded!!!

=begin original

B<(W)> This warning indicates that C<randomize()> was not able to read
C</dev/random> or C</dev/urandom>, possibly because your system does not
have them or they are differently named. You can still use SSL, but
the encryption will not be as strong.

=end original

B<(W)> この警告は C<randomize()> が C</dev/random> あるいは
C</dev/urandom> を読むことができなかったことをしめします。
おそらくあなたのシステムがそれらを持っていないか、
別の名前になっているからでしょう。
これでも SSL を使うことは出来ます。
しかし暗号化はあまり強力ではありません。

=item open_tcp_connection: destination host not found:`server' (port 123) ($!)

=begin original

Name lookup for host named C<server> failed.

=end original

C<server> 名前のホストの名前検索が失敗しました。

=item open_tcp_connection: failed `server', 123 ($!)

=begin original

The name was resolved, but establishing the TCP connection failed.

=end original

名前は解決されましたが、TCP 接続の確立が失敗しました。

=item msg 123: 1 - error:140770F8:SSL routines:SSL23_GET_SERVER_HELLO:unknown proto

=begin original

SSLeay error string. The first number (123) is the PID, the second number
(1) indicates the position of the error message in SSLeay error stack.
You often see a pile of these messages as errors cascade.

=end original

SSLeay エラー文字列。
最初の (123) 番号は PID、2 番目の数字 (1) は SSLeay エラースタックでの
エラーメッセージの位置を示します。
階段状になったエラーで、これらのメッセージが重なったものを、しばしば
目にするでしょう。

=item msg 123: 1 - error:02001002::lib(2) :func(1) :reason(2)

=begin original

The same as above, but you didn't call load_error_strings() so SSLeay
couldn't verbosely explain the error. You can still find out what it
means with this command:

=end original

上記と同じ。
しかし load_error_strings() を呼ばなかったので、SSLeay は
多くの言葉でエラーを説明することができませんでした。
それでも、それがどんな意味かは以下のコマンドにより知ることができます:

    /usr/local/ssl/bin/ssleay errstr 02001002

=item Password is being asked for private key

(秘密鍵のためのパスワードを聞かれる)

=begin original

This is normal behaviour if your private key is encrypted. Either
you have to supply the password or you have to use an unencrypted
private key. Scan OpenSSL.org for the FAQ that explains how to
do this (or just study examples/makecert.pl which is used
during C<make test> to do just that).

=end original

あなたの秘密鍵が暗号化されていれば、これは通常の動作です。
パスワードを与えるか、暗号化されていない秘密鍵を使うかの
どちらかをする必要があります。
これをどのように行うかの FAQ については OpenSSL.org をよく見てください。
(あるいは単純に、C<make test> の時、それを行うためだけに使われる
examples/makecert.pl を研究してください)。

=back

=head1 BUGS AND SUPPORT

(バグ報告とサポート)

=begin original

Please report any bugs or feature requests to
C<bug-Net-SSLeay at rt.cpan.org>, or through the web interface at
L<http://rt.cpan.org/Public/Dist/Display.html?Name=Net-SSLeay>.
I will be notified, and then you'll automatically be notified of progress on
your bug as I make changes.

=end original

バグや機能リクエストは
C<bug-Net-SSLeay at rt.cpan.org> か、
L<http://rt.cpan.org/Public/Dist/Display.html?Name=Net-SSLeay>
の web インターフェースで報告してください。
私には通知が届き、私が変更するとバグに関する進展について
自動的にあなたに通知されます。

=begin original

Subversion access to the latest source code etc can be obtained at
L<http://alioth.debian.org/projects/net-ssleay>

=end original

最新ソースコードなどへの Subversion アクセスは、
L<http://alioth.debian.org/projects/net-ssleay> で得られます。

=begin original

The developer mailing list (for people interested in contributing
to the source code) can be found at
L<http://lists.alioth.debian.org/mailman/listinfo/net-ssleay-devel>

=end original

(ソースコードに貢献することに興味のある人々のための)
開発者メーリングリストは
L<http://lists.alioth.debian.org/mailman/listinfo/net-ssleay-devel> に
あります。

=begin original

You can find documentation for this module with the C<perldoc> command.

=end original

このモジュールの文書を C<perldoc> コマンドで読むことができます。

    perldoc Net::SSLeay

=begin original

You can also look for information at:

=end original

次の場所の情報を見ることもできます:

=over 4

=item * AnnoCPAN: Annotated CPAN documentation

=begin original

L<http://annocpan.org/dist/Net-SSLeay>

=end original

L<http://annocpan.org/dist/Net-SSLeay>(英語)
(TBR)

=item * CPAN Ratings

=begin original

L<http://cpanratings.perl.org/d/Net-SSLeay>

=end original

L<http://cpanratings.perl.org/d/Net-SSLeay>
(TBR)

=item * Search CPAN

=begin original

L<http://search.cpan.org/dist/Net-SSLeay>

=end original

<http://search.cpan.org/dist/Net-SSLeay>(英語)
(TBR)

=back

=begin original

Commercial support for Net::SSLeay may be obtained from

=end original

Net::SSLeay の商用サポートは、以下のところで得られるでしょう

   Symlabs (netssleay@symlabs.com)
   Tel: +351-214.222.630
   Fax: +351-214.222.637

=head1 AUTHOR

(作者)

=begin original

Maintained by Mike McCauley and Florian Ragwitz since November 2005

=end original

2005年11月からMike McCauleyとFlorian Ragwitzによって管理されています。
(TBR)

=begin original

Originally written by Sampo Kellomäki <sampo@symlabs.com>

=end original

著者:Sampo Kellomanaki<sampo@symlabs.com>
(TBR)

=head1 COPYRIGHT

=begin original

Copyright (c) 1996-2003 Sampo Kellomäki <sampo@symlabs.com>

=end original

Copyright(c)1996-2003 Sampo Kellomaki<sampo@symlabs.com>(英語)
(TBR)

=begin original

Copyright (C) 2005-2006 Florian Ragwitz <rafl@debian.org>

=end original

著作権(C)2005-2006 Florian Ragwitz<rafl@debian.org>
(TBR)

=begin original

Copyright (C) 2005 Mike McCauley <mikem@open.com.au>

=end original

Copyright(C)2005 Mike McCauley<mikem@open.com.au>(英語)
(TBR)

=begin original

All Rights Reserved.

=end original

無断複写複製転載を禁じます。
(TBR)

=begin original

Distribution and use of this module is under the same terms as the
OpenSSL package itself (i.e. free, but mandatory attribution; NO
WARRANTY). Please consult LICENSE file in the root of the OpenSSL
distribution.

=end original

このモジュールの配布と使用は、OpenSSLパッケージ自体と同じ条件の下で行われます(つまり、無料ですが、帰属は必須です。
保証はありません)。
OpenSSL配布のルートにあるLICENSEファイルを参照してください。
(TBR)

=begin original

While the source distribution of this perl module does not contain
Eric's or OpenSSL's code, if you use this module you will use OpenSSL
library. Please give Eric and OpenSSL team credit (as required by
their licenses).

=end original

このperlモジュールのソース配布にはEricまたはOpenSSLのコードは含まれていませんが、このモジュールを使用する場合は、OpenSSLライブラリを使用することになります。
EricとOpenSSLチームのクレジットを(彼らのライセンスで要求されているように)提供してください。
(TBR)

=begin original

And remember, you, and nobody else but you, are responsible for
auditing this module and OpenSSL library for security problems,
backdoors, and general suitability for your application.

=end original

また、このモジュールとOpenSSLライブラリのセキュリティ問題、バックドア、およびアプリケーションに対する一般的な適合性を監査する責任は、あなた自身にあり、あなた以外の誰にもないことを覚えておいてください。
(TBR)

=head1 SEE ALSO

=begin original

  Net::SSLeay::Handle                      - File handle interface
  ./examples                               - Example servers and a clients
  <http://www.openssl.org/>                - OpenSSL source, documentation, etc
  openssl-users-request@openssl.org        - General OpenSSL mailing list
  <http://www.ietf.org/rfc/rfc2246.txt>    - TLS 1.0 specification
  <http://www.w3c.org>                     - HTTP specifications
  <http://www.ietf.org/rfc/rfc2617.txt>    - How to send password
  <http://www.lothar.com/tech/crypto/>     - Entropy Gathering Daemon (EGD)
  <http://www.aet.tu-cottbus.de/personen/jaenicke/postfix_tls/prngd.html>
                           - pseudo-random number generating daemon (PRNGD)
  perl(1)
  perlref(1)
  perllol(1)
  perldoc ~openssl/doc/ssl/SSL_CTX_set_verify.pod

=end original

  Net::SSLeay::Handle                      - ファイルハンドルのインターフェース
  ./examples                               - サーバとクライアントの例
  <http://www.openssl.org/>                - OpenSSL ソース、ドキュメントなど
  openssl-users-request@openssl.org        - 一般的な OpenSSL メーリングリスト
  <http://www.ietf.org/rfc/rfc2246.txt>    - TLS 1.0 仕様
  <http://www.w3c.org>                     - HTTP 仕様
  <http://www.ietf.org/rfc/rfc2617.txt>    - パスワードの送信方法
  <http://www.lothar.com/tech/crypto/>     - Entropy Gathering Daemon (EGD)
  <http://www.aet.tu-cottbus.de/personen/jaenicke/postfix_tls/prngd.html>
                           - 疑似乱数生成デーモン (PRNGD)
  perl(1)
  perlref(1)
  perllol(1)
  perldoc ~openssl/doc/ssl/SSL_CTX_set_verify.pod

=begin meta

Translate: hippo2000
Update: SHIRAKATA Kentaro <argrath@ub32.org> (1.36-)
Status: in progress

=end meta

