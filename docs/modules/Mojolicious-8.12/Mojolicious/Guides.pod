=encoding utf8

=head1 NAME

=begin original

Mojolicious::Guides - The Mojolicious Guide to the Galaxy

=end original

Mojolicious::Guides - 銀河 Mojolicious ガイド

=head1 DON'T PANIC!

(あわてるな)

=begin original

The L<Mojolicious|https://mojolicious.org> documentation is structured into
three parts. The L</"TUTORIAL"> everyone starts with, the L</"GUIDES"> that
explain all major features in detail, and the class L</"REFERENCE"> listing
all available APIs.

=end original

L<Mojolicious|https://mojolicious.org> ドキュメントは三つの部分で
構成されています。
全員が始めるための L</"TUTORIAL">、全ての主な機能を説明する L</"GUIDES">、
全ての利用可能な API の一覧である L</"REFERENCE"> です。

=begin original

Some parts of the documentation only use the L<Mojolicious::Lite> micro web
framework for examples, but that's merely a convenience for the reader. Almost
all features are exactly the same for full L<Mojolicious> applications.

=end original

このドキュメントの一部は例として
L<Mojolicious::Lite> マイクロ web フレームワークのみを使っていますが、
これは単に読者の利便性のためです。
ほとんど全ての機能は完全な L<Mojolicious> アプリケーションに対しても
正確に同じです。

=head1 BASICS

=over 2

=item Learning Perl

(Perlを学ぶ)

=begin original

If you are new to Perl, we recommend
L<Learn Perl in 2 hours 30 minutes|http://qntm.org/files/perl/perl.html> for a
quick introduction, or the
L<Modern Perl book|https://pragprog.com/book/swperl/modern-perl-fourth-edition>,
freely available in many formats. Both are excellent introductions to the
language. For more books and documentation, check out
L<learn.perl.org|http://learn.perl.org/>.

=end original

もしあなたがPerlが初めてならば、すばやい学習のために
L<Learn Perl in 2 hours 30 minutes|http://qntm.org/files/perl/perl.html> を見るか、
多くのフォーマットで自由に利用できる
L<Modern Perl book|https://pragprog.com/book/swperl/modern-perl-fourth-edition>という本 をおすすめします。
どちらも素晴らしい言語の入門になっています。
さらなる本やドキュメントについては、
L<learn.perl.org|http://learn.perl.org/> を見てください。

=item Learning Web Technologies

=begin original

All web development starts with HTML, CSS and JavaScript, to learn the basics
we recommend the
L<Mozilla Developer Network|https://developer.mozilla.org/en-US/docs/Web>. And
if you want to know more about how browsers and web servers actually
communicate, there's also a very nice introduction to
L<HTTP|https://developer.mozilla.org/en-US/docs/Web/HTTP>.

=end original

全ての web 開発は HTML, CSS, JavaScript から始まるので、
基本を学ぶためには
L<Mozilla Developer Network|https://developer.mozilla.org/en-US/docs/Web> を
お勧めします。
そしてブラウザと web サーバーが実際にどのように通信するかについて
さらに知りたいなら、
L<HTTP|https://developer.mozilla.org/en-US/docs/Web/HTTP> が
とても良い導入となります。

=back

=head1 CONVENTIONS

=over 2

=item Modern Perl

(モダン Perl)

=begin original

L<Mojolicious> uses a modern subset of Perl exclusively, and therefore all
documentation assumes that L<strict>, L<warnings>, L<utf8> and Perl 5.10
L<features|feature> are enabled, even if examples don't specifically mention it.

=end original

L<Mojolicious> は Perl のモダンな部分だけを使うので、
全てのドキュメントは、たとえ例が特に触れていなくても、
L<strict>, L<warnings>, L<utf8> および Perl 5.10
L<features|feature> が有効であることを仮定しています。

  use strict;
  use warnings;
  use utf8;
  use feature ':5.10';

=begin original

Some modules, like L<Mojo::Base> and L<Mojolicious::Lite>, will enable them for
you automatically, whenever they are used.

=end original

L<Mojo::Base> と L<Mojolicious::Lite> のような一部のモジュールは、
これがどこで使われても、あなたのためにこれらを自動的に有効にします。

=item Variable names

(変数名)

=begin original

For brevity and clarity, example variables will reflect the type of data the API
uses. For instance, C<$bytes> or C<$chars> to distinguish whether it is encoded
bytes or decoded characters in a Perl L<string|perlunifaq>, C<$bool> if the
value just indicates true or false, C<$c> to denote a L<Mojolicious::Controller>
object, or C<$app> to denote the L<application|Mojolicious> object.

=end original

簡潔さと明確さのために、例の変数は API が使うデータの型を反映しています。
例えば、C<$bytes> や C<$chars> はエンコードされたバイト列か
デコードされた Perl L<文字列|perlunifaq> かを区別し、
値が単に真または偽を示す場合は C<$bool> を、
L<Mojolicious::Controller> オブジェクトを示すためには C<$c> を、
L<application|Mojolicious> オブジェクトを示すためには C<$app> を使います。

=back

=head1 TUTORIAL

(チュートリアル)

=over 2

=item L<Mojolicious::Guides::Tutorial>

=begin original

A fast and fun way to get started developing web applications with
L<Mojolicious>. The tutorial introduces the L<Mojolicious::Lite> micro web
framework, which is only a thin wrapper around the full web framework. The
simplified notation introduced in the tutorial is commonly used throughout the
guides and is therefore considered a prerequisite, you should definitely take a
look!

=end original

L<Mojolicious> でウェブアプリケーションの開発を始める本当に早く楽しい方法。
このチュートリアルは、完全な web フレームワークの薄いラッパーである
L<Mojolicious::Lite> マイクロ web フレームワークを紹介しています。
このチュートリアルで学ぶほとんどすべてのことは、
普通のL<Mojolicious>アプリケーション で利用することができ、
ガイドを読む前に学習するためのものになっています。
絶対に見るべきです!

=back

=head1 GUIDES

(ガイド)

=over 2

=item L<Mojolicious::Guides::Growing>

=begin original

Starting a L<Mojolicious::Lite> prototype from scratch and growing it into a
well-structured L<Mojolicious> application.

=end original

ゼロからの L<Mojolicious::Lite> の原型から始めて、
それを良く構造化された L<Mojolicious> アプリケーションへ育てること。

=item L<Mojolicious::Guides::Routing>

=begin original

Simple and fun introduction to the L<Mojolicious> router.

=end original

簡単で楽しい L<Mojolicious> ルータへの入門。

=item L<Mojolicious::Guides::Rendering>

=begin original

Generating content with the L<Mojolicious> renderer.

=end original

L<Mojolicious> レンダラでの内容生成。

=item L<Mojolicious::Guides::Testing>

=begin original

Powerful yet elegant testing techniques and tools for L<Mojolicious> and other
web applications.

=end original

強力だが洗練された、L<Mojolicious> やその他の web アプリケーションのための
テスト技術とツール。

=item L<Mojolicious::Guides::Cookbook>

=begin original

Cooking with L<Mojolicious>, recipes for every taste.

=end original

L<Mojolicious> での料理、あらゆる風味のためのレシピ。

=item L<Mojolicious::Guides::Contributing>

=begin original

Become a part of the ongoing L<Mojolicious> development.

=end original

進行中のL<Mojolicious>開発に参加しよう。

=item L<Mojolicious::Guides::FAQ>

=begin original

Answers to the most frequently asked questions.

=end original

もっともよくある質問への回答。

=back

=head1 HIGHLIGHTS

(ハイライト)

=begin original

L<Mojolicious> and L<Mojolicious::Lite> are the sum of many parts, built on top
of the L<Mojo> web development toolkit. Small building blocks that can be used
independently for all kinds of applications, these are the most prominent ones.

=end original

L<Mojolicious> と L<Mojolicious::Lite> は
L<Mojo> web 開発ツールキットの上に構築された多くの部品の集合体です。
つまり独立に使用可能である小さな構成ブロックが集約されたものです;
これらは最も顕著なものです。

=over 2

=item L<Mojo::UserAgent>

=begin original

Full featured non-blocking I/O HTTP and WebSocket user agent.

=end original

完全な機能を備えた非同期 I/O HTTP および WebSocket ユーザエージェント。

=item L<Mojo::DOM>

=begin original

Very fun and minimalistic HTML/XML DOM parser with CSS selector support.

=end original

とても楽しい、CSS セレクタをサポートした最小限の HTML/XML DOM パーサ。

=item L<Mojo::JSON>

=begin original

Minimalistic JSON implementation that just works.

=end original

正しく動作する最小限の JSON 実装。

=item L<Mojo::Server::Daemon>

=begin original

Full featured, highly portable non-blocking I/O HTTP and WebSocket server, with
self-restart support through L<Mojo::Server::Morbo>, perfect for development
and testing.

=end original

完全な機能を持ち、高度にポータブルな非同期 I/O HTTP および WebSocket サーバ;
開発とテストに最適な、L<Mojo::Server::Morbo> による自己再起動に対応。

=item L<Mojo::Server::Prefork>

=begin original

Full featured, UNIX optimized, preforking non-blocking I/O HTTP and WebSocket
server with support for zero downtime software upgrades (hot deployment)
through L<Mojo::Server::Hypnotoad>.

=end original

完全な機能を備え、UNIXに最適化された、
プリフォーク非同期 I/O HTTP および WebSocket サーバ;
L<Mojo::Server::Hypnotoad>を通して、
停止時間なしでのソフトウェア更新(ホットデプロイメント)をサポートします。

=item L<Mojo::Server::CGI>, L<Mojo::Server::PSGI>

=begin original

Transparent CGI and L<PSGI> support out of the box.

=end original

そのままで CGI, FastCGI, PSGI を透過的にサポート。

=item L<Mojo::IOLoop>

=begin original

A minimalistic event loop with support for multiple reactor backends.

=end original

複数のリアクターバックエンドをサポートした最小限のイベントループ。

=item L<Mojo::Template>

=begin original

Very Perl-ish and minimalistic template system.

=end original

とても Perl 的、かつ最小限のテンプレートシステム。

=item L<Test::Mojo>

=begin original

Testing toolkit for web applications.

=end original

ウェブアプリケーションのためのテストツールキット。

=item L<ojo>

=begin original

Fun one-liners using everything above.

=end original

上記全ての利用をワンライナーでお楽しみ下さい。

=back

=head1 SPIN-OFFS

(スピンオフ)

=begin original

These modules are not part of the L<Mojolicious> distribution, but have been
designed to be used with it and are being developed under the same umbrella.

=end original

これらのモジュールは L<Mojolicious> ディストリビューションの
一部ではありませんが、これらと共に使うように設計されており、
同じ傘の下で開発されています。

=over 2

=item L<Mojo::Pg>

=begin original

A tiny wrapper around L<DBD::Pg> that makes
L<PostgreSQL|http://www.postgresql.org> a lot of fun to use with
L<Mojolicious>. Perform queries blocking and non-blocking, use all
L<SQL features|https://www.postgresql.org/docs/current/static/sql.html>
PostgreSQL has to offer, generate CRUD queries from data structures, manage your
database schema with migrations and build scalable real-time web applications
with the publish/subscribe pattern.

=end original

L<PostgreSQL|http://www.postgresql.org> を
L<Mojolicious> と共にとても楽しく使えるようにするための
L<DBD::Pg> の小さいラッパーです。
ブロックと非ブロックのクエリの実行、
PostgreSQL が提供している全ての
L<SQL 機能|https://www.postgresql.org/docs/current/static/sql.html> の使用、
データ構造からの CRUD クエリの生成、
マイグレーションのあるデータベーススキーマの管理、
発行/購読パターンのスケールするリアルタイム web アプリケーションの
構築などです。

=begin original

B<Examples:> The minimal
L<chat|https://github.com/mojolicious/mojo-pg/tree/master/examples/chat.pl>
application will show you how to scale WebSockets to multiple servers, and the
well-structured
L<blog|https://github.com/mojolicious/mojo-pg/tree/master/examples/blog> 
application how to apply the MVC design pattern in practice.

=end original

B<例:> 最小限の
L<チャット|https://github.com/mojolicious/mojo-pg/tree/master/examples/chat.pl>
アプリケーションは、WebSockets を複数サーバーにスケールする方法を示し、
よく構成された
L<ブログ|https://github.com/mojolicious/mojo-pg/tree/master/examples/blog> 
アプリケーションは実践的な MVC デザインパターンの適用方法を示します。

=item L<Minion>

=begin original

A full featured job queue for L<Mojolicious> with support for multiple backends
(such as L<PostgreSQL|http://www.postgresql.org>). Job queues allow you to
process time and/or computationally intensive tasks in background processes,
outside of the request/response lifecycle. Among those tasks you'll commonly
find image resizing, spam filtering, HTTP downloads, building tarballs, warming
caches and basically everything else you can imagine that's not super fast.

=end original

(L<PostgreSQL|http://www.postgresql.org> のような) 複数のバックエンドに
対応する、L<Mojolicious> のための完全な機能のジョブキューです。
ジョブキューは、時間や計算集約的なタスクを、リクエスト/レスポンスの
ライフサイクルの外側のバックグラウンドプロセスで処理できるようになります。
いろいろなタスクの中でも、よくあるのはイメージのリサイズ、スパムフィルタ、
HTTP ダウンロード、tar ボールのビルド、キャッシュのウォーミングアップおよび、
一般的にとても速いという訳ではないと想像する全てです。

=begin original

B<Examples:> The
L<link
checker|https://github.com/mojolicious/minion/tree/master/examples/linkcheck>
will show you how to integrate background jobs into well-structured
L<Mojolicious> applications.

=end original

B<例:> L<リンクチェッカー|https://github.com/mojolicious/minion/tree/master/examples/linkcheck> は、
バックグラウンドジョブをよく構成された
L<Mojolicious> アプリケーションとどのように統合するかを示しています。

=back

=head1 REFERENCE

=begin original

This is the class hierarchy of the L<Mojolicious> distribution.

=end original

これは L<Mojolicious> 配布のクラス階層です。

=over 2

=item * L<Mojo>

=item * L<Mojo::Base>

=over 2

=item * L<Mojolicious>

=over 2

=item * L<Mojo::HelloWorld>

=item * L<Mojolicious::Lite>

=back

=item * L<Mojo::Cache>

=item * L<Mojo::Cookie>

=over 2

=item * L<Mojo::Cookie::Request>

=item * L<Mojo::Cookie::Response>

=back

=item * L<Mojo::DOM::CSS>

=item * L<Mojo::DOM::HTML>

=item * L<Mojo::Date>

=item * L<Mojo::EventEmitter>

=over 2

=item * L<Mojo::Asset>

=over 2

=item * L<Mojo::Asset::File>

=item * L<Mojo::Asset::Memory>

=back

=item * L<Mojo::Content>

=over 2

=item * L<Mojo::Content::MultiPart>

=item * L<Mojo::Content::Single>

=back

=item * L<Mojo::IOLoop>

=item * L<Mojo::IOLoop::Client>

=item * L<Mojo::IOLoop::Server>

=item * L<Mojo::IOLoop::Stream>

=item * L<Mojo::IOLoop::Subprocess>

=item * L<Mojo::IOLoop::TLS>

=item * L<Mojo::Log>

=item * L<Mojo::Message>

=over 2

=item * L<Mojo::Message::Request>

=item * L<Mojo::Message::Response>

=back

=item * L<Mojo::Reactor>

=over 2

=item * L<Mojo::Reactor::Poll>

=over 2

=item * L<Mojo::Reactor::EV>

=back

=back

=item * L<Mojo::Server>

=over 2

=item * L<Mojo::Server::CGI>

=item * L<Mojo::Server::Daemon>

=over 2

=item * L<Mojo::Server::Prefork>

=back

=item * L<Mojo::Server::PSGI>

=back

=item * L<Mojo::Transaction>

=over 2

=item * L<Mojo::Transaction::HTTP>

=item * L<Mojo::Transaction::WebSocket>

=back

=item * L<Mojo::UserAgent>

=item * L<Mojolicious::Plugins>

=back

=item * L<Mojo::Exception>

=item * L<Mojo::Headers>

=item * L<Mojo::JSON::Pointer>

=item * L<Mojo::Parameters>

=item * L<Mojo::Path>

=item * L<Mojo::Promise>

=over 2

=item * L<Mojo::IOLoop::Delay>

=back

=item * L<Mojo::Server::Hypnotoad>

=item * L<Mojo::Server::Morbo>

=item * L<Mojo::Server::Morbo::Backend>

=over 2

=item * L<Mojo::Server::Morbo::Backend::Poll>

=back

=item * L<Mojo::Template>

=item * L<Mojo::URL>

=item * L<Mojo::Upload>

=item * L<Mojo::UserAgent::CookieJar>

=item * L<Mojo::UserAgent::Proxy>

=item * L<Mojo::UserAgent::Server>

=item * L<Mojo::UserAgent::Transactor>

=item * L<Mojolicious::Command>

=over 2

=item * L<Mojolicious::Command::cgi>

=item * L<Mojolicious::Command::daemon>

=item * L<Mojolicious::Command::eval>

=item * L<Mojolicious::Command::get>

=item * L<Mojolicious::Command::prefork>

=item * L<Mojolicious::Command::psgi>

=item * L<Mojolicious::Command::routes>

=item * L<Mojolicious::Command::version>

=item * L<Mojolicious::Command::Author::cpanify>

=item * L<Mojolicious::Command::Author::generate::app>

=item * L<Mojolicious::Command::Author::generate::lite_app>

=item * L<Mojolicious::Command::Author::generate::makefile>

=item * L<Mojolicious::Command::Author::generate::plugin>

=item * L<Mojolicious::Command::Author::inflate>

=item * L<Mojolicious::Commands>

=over 2

=item * L<Mojolicious::Command::Author::generate>

=back

=back

=item * L<Mojolicious::Controller>

=item * L<Mojolicious::Plugin>

=over 2

=item * L<Mojolicious::Plugin::Config>

=over 2

=item * L<Mojolicious::Plugin::JSONConfig>

=back

=item * L<Mojolicious::Plugin::DefaultHelpers>

=item * L<Mojolicious::Plugin::EPLRenderer>

=over 2

=item * L<Mojolicious::Plugin::EPRenderer>

=back

=item * L<Mojolicious::Plugin::HeaderCondition>

=item * L<Mojolicious::Plugin::Mount>

=item * L<Mojolicious::Plugin::TagHelpers>

=back

=item * L<Mojolicious::Renderer>

=item * L<Mojolicious::Routes::Match>

=item * L<Mojolicious::Routes::Pattern>

=item * L<Mojolicious::Routes::Route>

=over 2

=item * L<Mojolicious::Routes>

=back

=item * L<Mojolicious::Sessions>

=item * L<Mojolicious::Static>

=item * L<Mojolicious::Types>

=item * L<Mojolicious::Validator>

=item * L<Mojolicious::Validator::Validation>

=item * L<Test::Mojo>

=back

=item * L<Mojo::ByteStream>

=item * L<Mojo::Collection>

=item * L<Mojo::DynamicMethods>

=item * L<Mojo::DOM>

=item * L<Mojo::File>

=over 2

=item * L<Mojo::Home>

=back

=item * L<Mojo::JSON>

=item * L<Mojo::Loader>

=item * L<Mojo::Util>

=item * L<Mojo::WebSocket>

=item * L<ojo>

=back

=head1 MORE

(より学ぶには)

=begin original

A lot more documentation and examples by many different authors can be found in
the L<Mojolicious wiki|http://github.com/mojolicious/mojo/wiki>.

=end original

多くのユーザーによるより多くのドキュメントやサンプルは
L<Mojolicious wiki|http://github.com/mojolicious/mojo/wiki> にあります。

=head1 SUPPORT

(サポート)

=begin original

If you have any questions the documentation might not yet answer, don't
hesitate to ask on the
L<mailing list|http://groups.google.com/group/mojolicious> or the official IRC
channel C<#mojo> on C<irc.freenode.net> (L<chat
now!|https://kiwiirc.com/nextclient/#irc://irc.freenode.net/mojo?nick=guest-?>).

=end original

ドキュメントに答えが見つからなくて質問があるときは、
L<mailing list|http://groups.google.com/group/mojolicious>か公式のIRCチャンネルである
C<irc.freenode.net>
(L<chat now!|https://kiwiirc.com/nextclient/#irc://irc.freenode.net/mojo?nick=guest-?>)の
C<#mojo>でためらわずに質問してください。

=begin meta

Translate: 木本裕紀
Translate: 前山将人
Update: SHIRAKATA Kentaro <argrath@ub32.org> (8.12)
Status: in progress

=end meta

=cut

