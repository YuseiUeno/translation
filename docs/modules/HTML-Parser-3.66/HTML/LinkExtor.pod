
=encoding euc-jp

=head1 NAME

=begin original

HTML::LinkExtor - Extract links from an HTML document

=end original

HTML::LinkExtor - HTML 文書からリンクを抽出する

(訳注: (TBR)がついている段落は「みんなの自動翻訳＠TexTra」による
機械翻訳です。)

=head1 SYNOPSIS

 require HTML::LinkExtor;
 $p = HTML::LinkExtor->new(\&cb, "http://www.perl.org/");
 sub cb {
     my($tag, %links) = @_;
     print "$tag @{[%links]}\n";
 }
 $p->parse_file("index.html");

=head1 DESCRIPTION

=begin original

I<HTML::LinkExtor> is an HTML parser that extracts links from an
HTML document.  The I<HTML::LinkExtor> is a subclass of
I<HTML::Parser>. This means that the document should be given to the
parser by calling the $p->parse() or $p->parse_file() methods.

=end original

I<HTML::LinkExtor>は、HTML文書からリンクを抽出するHTMLパーサーです。
I<HTML::LinkExtor>は、I<HTML::Parser>のサブクラスです。
つまり、$p->parse()メソッドまたは$p->parse_file()メソッドを呼び出して、文書をパーサーに渡す必要があります。
(TBR)

=cut

=over 4

=item $p = HTML::LinkExtor->new

=item $p = HTML::LinkExtor->new( $callback )

=item $p = HTML::LinkExtor->new( $callback, $base )

=begin original

The constructor takes two optional arguments. The first is a reference
to a callback routine. It will be called as links are found. If a
callback is not provided, then links are just accumulated internally
and can be retrieved by calling the $p->links() method.

=end original

コンストラクタは2つのオプションの引数を取ります。
1つ目はコールバックルーチンへの参照です。
リンクが見つかると呼び出されます。
コールバックが提供されない場合、リンクは内部に蓄積されるだけで、$p->links()メソッドを呼び出すことで取得できます。
(TBR)

=begin original

The $base argument is an optional base URL used to absolutize all URLs found.
You need to have the I<URI> module installed if you provide $base.

=end original

$base引数は、検出されたすべてのURLを絶対化するために使用されるオプションのベースURLです。
$baseを指定する場合は、I<URI>モジュールをインストールする必要があります。
(TBR)

=begin original

The callback is called with the lowercase tag name as first argument,
and then all link attributes as separate key/value pairs.  All
non-link attributes are removed.

=end original

コールバックは、最初の引数として小文字のタグ名を使用して呼び出され、次にすべてのリンク属性が個別のキーと値のペアとして呼び出されます。
すべての非リンク属性は削除されます。
(TBR)

=cut

=item $p->links

=begin original

Returns a list of all links found in the document.  The returned
values will be anonymous arrays with the following elements:

=end original

文書内で見つかったすべてのリンクのリストを返します。
戻り値は、次の要素を持つ匿名配列になります。
(TBR)

  [$tag, $attr => $url1, $attr2 => $url2,...]

=begin original

The $p->links method will also truncate the internal link list.  This
means that if the method is called twice without any parsing
between them the second call will return an empty list.

=end original

$p->linksメソッドも内部リンクリストをトランケートします。
これは、メソッドが2回呼び出されてもそれらの間で解析が行われない場合、2回目の呼び出しでは空のリストが返されることを意味します。
(TBR)

=begin original

Also note that $p->links will always be empty if a callback routine
was provided when the I<HTML::LinkExtor> was created.

=end original

また、I<HTML::LinkExtor>の作成時にコールバックルーチンが提供された場合、$p->リンクは常に空になることに注意してください。
(TBR)

=cut

=back

=head1 EXAMPLE

=begin original

This is an example showing how you can extract links from a document
received using LWP:

=end original

次の例は、LWPを使用して受信した文書からリンクを抽出する方法を示しています。
(TBR)

  use LWP::UserAgent;
  use HTML::LinkExtor;
  use URI::URL;

  $url = "http://www.perl.org/";  # for instance
  $ua = LWP::UserAgent->new;

  # Set up a callback that collect image links
  my @imgs = ();
  sub callback {
     my($tag, %attr) = @_;
     return if $tag ne 'img';  # we only look closer at <img ...>
     push(@imgs, values %attr);
  }

  # Make the parser.  Unfortunately, we don't know the base yet
  # (it might be different from $url)
  $p = HTML::LinkExtor->new(\&callback);

  # Request document and parse it as it arrives
  $res = $ua->request(HTTP::Request->new(GET => $url),
                      sub {$p->parse($_[0])});

  # Expand all image URLs to absolute ones
  my $base = $res->base;
  @imgs = map { $_ = url($_, $base)->abs; } @imgs;

  # Print them out
  print join("\n", @imgs), "\n";

=head1 SEE ALSO

L<HTML::Parser>, L<HTML::Tagset>, L<LWP>, L<URI::URL>

=head1 COPYRIGHT

Copyright 1996-2001 Gisle Aas.

This library is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.

=begin meta

Translate: SHIRAKATA Kentaro <argrath@ub32.org>
Status: in progress

=end meta

=cut

